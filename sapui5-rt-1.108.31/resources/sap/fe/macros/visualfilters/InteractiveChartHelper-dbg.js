/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/util/JSTokenizer", "sap/fe/core/CommonUtils", "sap/fe/core/controls/filterbar/utils/VisualFilterUtils", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/CriticalityFormatters", "sap/fe/core/templating/FilterHelper", "sap/fe/macros/CommonHelper", "sap/fe/macros/filter/FilterFieldHelper", "sap/fe/macros/ResourceModel", "sap/ui/core/format/NumberFormat", "sap/ui/mdc/condition/ConditionConverter", "sap/fe/core/type/TypeUtil", "sap/ui/model/odata/v4/AnnotationHelper", "sap/ui/model/odata/v4/ODataUtils"], function (JSTokenizer, CommonUtils, VisualFilterUtils, StableIdHelper, CriticalityFormatters, FilterHelper, CommonHelper, FilterFieldHelper, ResourceModel, NumberFormat, ConditionConverter, TypeUtil, ODataModelAnnotationHelper, ODataUtils) {
  "use strict";

  var getFiltersConditionsFromSelectionVariant = FilterHelper.getFiltersConditionsFromSelectionVariant;
  var buildExpressionForCriticalityColorMicroChart = CriticalityFormatters.buildExpressionForCriticalityColorMicroChart;
  var generate = StableIdHelper.generate;
  var InteractiveChartHelper = {
    getChartDisplayedValue: function (value, oValueFormat, sMetaPath) {
      //var sType = "" + value + "@odata.type";
      var sInfoPath = generate([sMetaPath]);
      return "{parts:[{path:'" + value + "',type:'sap.ui.model.odata.type.Decimal', constraints:{'nullable':false}}" + (oValueFormat && oValueFormat.ScaleFactor ? ",{value:'" + oValueFormat.ScaleFactor.$Decimal + "'}" : ",{path:'internal>scalefactorNumber/" + sInfoPath + "'}") + (oValueFormat && oValueFormat.NumberOfFractionalDigits ? ",{value:'" + oValueFormat.NumberOfFractionalDigits + "'}" : ",{value:'0'}") + ",{path:'internal>currency/" + sInfoPath + "'}" + ",{path:'" + value + "',type:'sap.ui.model.odata.type.String', constraints:{'nullable':false}}" + "], formatter:'VisualFilterRuntime.scaleVisualFilterValue'}"; //+ sType.split('#').length ? sType.split('#')[1] : 'Decimal' + "}";
    },

    getChartValue: function (oValue) {
      return "{path:'" + oValue + "',type:'sap.ui.model.odata.type.Decimal', constraints:{'nullable':false}}";
    },
    getChart: function (oMetaPath) {
      var oModel = oMetaPath.getModel();
      var oPresentationVariant = oModel.getObject(oMetaPath.getPath());
      var aVisualizations = oPresentationVariant.Visualizations;
      for (var i = 0; i < aVisualizations.length; i++) {
        if (aVisualizations[i].$AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
          var sCollectionPath = ODataModelAnnotationHelper.getNavigationPath(oMetaPath.getPath());
          return oModel.createBindingContext(sCollectionPath + "/" + aVisualizations[i].$AnnotationPath);
        }
      }
      return undefined;
    },
    getChartLabel: function () {
      return arguments.length <= 2 ? undefined : arguments[2];
    },
    /**
     * Build the expression for measure path based on whether CustomAggregate/Dynamic/TransformationAggregate measures exists.
     *
     * @param oChartAnnotation Chart configurations.
     * @param bCustomAggregate Indicator for existence for custom aggregates in chart measures.
     * @returns Measure Path
     */
    _getMeasurePath: function (oChartAnnotation, bCustomAggregate) {
      var sMeasurePath;
      if (bCustomAggregate) {
        sMeasurePath = "/Measures/0/$PropertyPath";
      }
      if (oChartAnnotation.DynamicMeasures && oChartAnnotation.DynamicMeasures.length > 0) {
        sMeasurePath = "/DynamicMeasures/0/$AnnotationPath/AggregatableProperty/$PropertyPath";
      } else if (!bCustomAggregate && oChartAnnotation.Measures && oChartAnnotation.Measures.length > 0) {
        sMeasurePath = "/Measures/0/$PropertyPath";
      }
      return sMeasurePath;
    },
    getAggregationBinding: function (oInterface, oChartAnnotations, oCollection, oTextAssociation, oDimensionType, aSortOrder, selectionVariantAnnotation, bCustomAggregate, oAggregation, bUoMHasCustomAggregate, aParameters, oFilterBarContext, bDraftSupported, sChartMeasure) {
      var oContextPath = oFilterBarContext.getProperty("contextPath");
      var sEntityType = oContextPath ? oContextPath.getPath() : "";
      var sDimension = oChartAnnotations.Dimensions[0].$PropertyPath;
      var aFilters = [];
      var sAggregationExpression, sUOMExpression, filterConditions, sBindingPath;
      var sCollectionName = oCollection.$kind == "NavigationProperty" ? oInterface.getPath(1) : (oCollection.$kind == "EntitySet" ? "/" : "") + oInterface.getModel(1).getObject("".concat(oInterface.getPath(1), "@sapui.name"));
      var vUOM = InteractiveChartHelper.getUoM(oInterface, oChartAnnotations, oCollection, undefined, bCustomAggregate, oAggregation);
      var sEntitySetPath = oInterface.getInterface(1).getPath(),
        oMetaModel = oInterface.getInterface(1).getModel();
      if (bDraftSupported) {
        aFilters.push({
          operator: "EQ",
          value1: "true",
          value2: null,
          path: "IsActiveEntity",
          isParameter: true
        });
      }
      if (selectionVariantAnnotation && selectionVariantAnnotation.getObject()) {
        filterConditions = getFiltersConditionsFromSelectionVariant(sEntitySetPath, oMetaModel, selectionVariantAnnotation.getObject(), VisualFilterUtils.getCustomConditions.bind(VisualFilterUtils));
        for (var sPath in filterConditions) {
          var aConditions = filterConditions[sPath];
          aConditions.forEach(function (oCondition) {
            if (!oCondition.isParameter) {
              aFilters.push(oCondition);
            }
          });
        }
      }
      if (sEntityType !== "".concat(sCollectionName, "/") && aParameters && aParameters.length && filterConditions) {
        var aParams = [];
        var convertedFilterConditions = VisualFilterUtils.convertFilterCondions(filterConditions);
        var parameterProperties = CommonUtils.getParameterInfo(oMetaModel, sCollectionName).parameterProperties;
        for (var i in aParameters) {
          var parameter = aParameters[i];
          var oProperty = parameterProperties[parameter];
          var sEntityPath = sEntitySetPath.split("/")[1];
          var oPropertyContext = oMetaModel.createBindingContext("/".concat(sEntityPath, "/").concat(parameter));
          var oFormatOptions = JSTokenizer.parseJS(FilterFieldHelper.formatOptions(oProperty, {
            context: oPropertyContext
          }) || "{}");
          var oConstraints = JSTokenizer.parseJS(FilterFieldHelper.constraints(oProperty, {
            context: oPropertyContext
          }) || "{}");
          var typeConfig = TypeUtil.getTypeConfig(oProperty.$Type, oFormatOptions, oConstraints);
          var oCondition = convertedFilterConditions[parameter];
          var oConditionInternal = oCondition ? oCondition[0] : undefined;
          if (oConditionInternal) {
            var mInternalParameterCondition = ConditionConverter.toType(oConditionInternal, typeConfig, TypeUtil);
            var sEdmType = oProperty.$Type;
            var sValue = encodeURIComponent(ODataUtils.formatLiteral(mInternalParameterCondition.values[0], sEdmType));
            sValue = sValue.replaceAll("'", "\\'");
            aParams.push("".concat(parameter, "=").concat(sValue));
          }
        }
        var sParameterEntitySet = sCollectionName.slice(0, sCollectionName.lastIndexOf("/"));
        var sTargetNavigation = sCollectionName.substring(sCollectionName.lastIndexOf("/") + 1);
        // create parameter context
        sBindingPath = "".concat(sParameterEntitySet, "(").concat(aParams.toString(), ")/").concat(sTargetNavigation);
        sCollectionName = sBindingPath;
      }
      if (bCustomAggregate) {
        //custom aggregate for a currency or unit of measure corresponding to this aggregatable property
        if (bUoMHasCustomAggregate) {
          sAggregationExpression = vUOM && vUOM.$Path ? "{ 'unit' : '".concat(vUOM.$Path, "' }") : "{}";
          sUOMExpression = "";
        } else {
          sAggregationExpression = "{}";
          sUOMExpression = vUOM && vUOM.$Path ? ", '".concat(vUOM.$Path, "' : {}") : "";
        }
      } else if (oAggregation && oAggregation.AggregatableProperty && oAggregation.AggregatableProperty.value && oAggregation.AggregationMethod) {
        sAggregationExpression = "{ 'name' : '" + oAggregation.AggregatableProperty.value + "', 'with' : '" + oAggregation.AggregationMethod + "'}";
        sUOMExpression = vUOM && vUOM.$Path ? ", '" + vUOM.$Path + "' : {}" : "";
      }
      var sTextAssociationExpression = oTextAssociation ? "' : { 'additionally' : ['" + oTextAssociation.$Path + "'] }" : "' : { }";
      var sFilterExpression = JSON.stringify(aFilters);
      return "{path: '" + sCollectionName + "', templateShareable: true, suspended : true, 'filters' : " + sFilterExpression + ",'parameters' : {" + InteractiveChartHelper.getSortOrder(oInterface, oMetaModel, oChartAnnotations, oDimensionType, aSortOrder, sChartMeasure) + ", '$$aggregation' : {'aggregate' : {'" + sChartMeasure + "' : " + sAggregationExpression + "},'group' : {'" + sDimension + sTextAssociationExpression + sUOMExpression + "} } }" + InteractiveChartHelper.getMaxItems(oChartAnnotations) + "}";
    },
    getSortOrder: function (oInterface, oMetaModel, oChartAnnotations, sDimensionType, aSortOrder, sChartMeasure) {
      var sSortPropertyName;
      if (oChartAnnotations.ChartType.$EnumMember === "com.sap.vocabularies.UI.v1.ChartType/Donut" || oChartAnnotations.ChartType.$EnumMember === "com.sap.vocabularies.UI.v1.ChartType/Bar") {
        if (aSortOrder && aSortOrder.length) {
          if (aSortOrder[0].DynamicProperty) {
            sSortPropertyName = oMetaModel.getObject(oInterface.getPath(0).split("@")[0] + aSortOrder[0].DynamicProperty.$AnnotationPath).Name;
          } else {
            sSortPropertyName = aSortOrder[0].Property.$PropertyPath;
          }
          if (sSortPropertyName === sChartMeasure) {
            return "'$orderby' : '" + sChartMeasure + (aSortOrder[0].Descending ? " desc'" : "'");
          }
          return "'$orderby' : '" + sChartMeasure + " desc'";
        }
        return "'$orderby' : '" + sChartMeasure + " desc'";
      } else if (sDimensionType === "Edm.Date" || sDimensionType === "Edm.Time" || sDimensionType === "Edm.DateTimeOffset") {
        return "'$orderby' : '" + oChartAnnotations.Dimensions[0].$PropertyPath + "'";
      } else if (aSortOrder && aSortOrder.length && aSortOrder[0].Property.$PropertyPath === oChartAnnotations.Dimensions[0].$PropertyPath) {
        return "'$orderby' : '" + aSortOrder[0].Property.$PropertyPath + (aSortOrder[0].Descending ? " desc'" : "'");
      } else {
        return "'$orderby' : '" + oChartAnnotations.Dimensions[0].$PropertyPath + "'";
      }
    },
    getMaxItems: function (oChartAnnotations) {
      if (oChartAnnotations.ChartType.$EnumMember === "com.sap.vocabularies.UI.v1.ChartType/Bar") {
        return ",'startIndex' : 0,'length' : 3";
      } else if (oChartAnnotations.ChartType.$EnumMember === "com.sap.vocabularies.UI.v1.ChartType/Line") {
        return ",'startIndex' : 0,'length' : 6";
      } else {
        return "";
      }
    },
    getColorBinding: function (iContext, oDataPoint, oDimension) {
      var oModel = iContext.getModel(0);
      var oDimensionPath = iContext.getPath(1);
      var aValueCriticality = oModel.getObject("".concat(oDimensionPath, "$PropertyPath@com.sap.vocabularies.UI.v1.ValueCriticality"));
      oDataPoint = oDataPoint.targetObject;
      if (oDataPoint.Criticality) {
        return buildExpressionForCriticalityColorMicroChart(oDataPoint);
      } else if (oDataPoint.CriticalityCalculation) {
        var oDirection = oDataPoint.CriticalityCalculation.ImprovementDirection && oDataPoint.CriticalityCalculation.ImprovementDirection.$EnumMember;
        var oDataPointValue = ODataModelAnnotationHelper.value(oDataPoint.Value, {
          context: iContext.getInterface(0)
        });
        var oDeviationRangeLowValue = ODataModelAnnotationHelper.value(oDataPoint.CriticalityCalculation.DeviationRangeLowValue, {
          context: iContext.getInterface(0)
        });
        var oToleranceRangeLowValue = ODataModelAnnotationHelper.value(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue, {
          context: iContext.getInterface(0)
        });
        var oAcceptanceRangeLowValue = ODataModelAnnotationHelper.value(oDataPoint.CriticalityCalculation.AcceptanceRangeLowValue, {
          context: iContext.getInterface(0)
        });
        var oAcceptanceRangeHighValue = ODataModelAnnotationHelper.value(oDataPoint.CriticalityCalculation.AcceptanceRangeHighValue, {
          context: iContext.getInterface(0)
        });
        var oToleranceRangeHighValue = ODataModelAnnotationHelper.value(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue, {
          context: iContext.getInterface(0)
        });
        var oDeviationRangeHighValue = ODataModelAnnotationHelper.value(oDataPoint.CriticalityCalculation.DeviationRangeHighValue, {
          context: iContext.getInterface(0)
        });
        return CommonHelper.getCriticalityCalculationBinding(oDirection, oDataPointValue, oDeviationRangeLowValue, oToleranceRangeLowValue, oAcceptanceRangeLowValue, oAcceptanceRangeHighValue, oToleranceRangeHighValue, oDeviationRangeHighValue);
      } else if (aValueCriticality && aValueCriticality.length) {
        return CommonHelper.getValueCriticality(oDimension.$PropertyPath, aValueCriticality);
      } else {
        return undefined;
      }
    },
    getScaleUoMTitle: function (oInterface, oChartAnnotation, oCollection, sMetaPath, bCustomAggregate, oAggregation, sSeperator, bIsToolTip) {
      var oModel = oInterface.getModel(0);
      var sScaleFactor = oModel.getObject("".concat(oInterface.getPath(0), "/MeasureAttributes/0/DataPoint/$AnnotationPath/ValueFormat/ScaleFactor/$Decimal"));
      var sInfoPath = generate([sMetaPath]);
      var fixedInteger = NumberFormat.getIntegerInstance({
        style: "short",
        showScale: false,
        shortRefNumber: sScaleFactor
      });
      var sScale = fixedInteger.getScale();
      var vUOM = InteractiveChartHelper.getUoM(oInterface, oChartAnnotation, oCollection, undefined, bCustomAggregate, oAggregation);
      vUOM = vUOM && (vUOM.$Path ? "${internal>uom/" + sInfoPath + "}" : "'" + vUOM + "'");
      sScale = sScale ? "'" + sScale + "'" : "${internal>scalefactor/" + sInfoPath + "}";
      if (!sSeperator) {
        sSeperator = "|";
      }
      sSeperator = vUOM ? "' " + sSeperator + " ' + " : "";
      var sExpression = sScale && vUOM ? sSeperator + sScale + " + ' ' + " + vUOM : sSeperator + (sScale || vUOM);
      return bIsToolTip ? sExpression : "{= " + sExpression + "}";
    },
    getMeasureDimensionTitle: function (oInterface, oChartAnnotation, oCollection, bCustomAggregate, oAggregation) {
      var oModel = oInterface.getModel(0);
      var sMeasureLabel;
      var sMeasurePathExpression = InteractiveChartHelper._getMeasurePath(oChartAnnotation, bCustomAggregate);
      var sMeasurePath = oModel.getObject("".concat(oInterface.getPath(0)) + sMeasurePathExpression);
      var sDimensionPath = oModel.getObject("".concat(oInterface.getPath(0), "/Dimensions/0/$PropertyPath"));
      var sDimensionLabel = InteractiveChartHelper.getLabel(oModel, oInterface, "Dimensions");
      if (!bCustomAggregate && oAggregation) {
        // check if the label is part of aggregated properties (Transformation aggregates)
        sMeasureLabel = oAggregation.annotations && oAggregation.annotations.Common && oAggregation.annotations.Common.Label;
        if (sMeasureLabel === undefined) {
          sMeasureLabel = sMeasureLabel = InteractiveChartHelper.getLabel(oModel, oInterface, "Measures");
        }
      } else {
        sMeasureLabel = InteractiveChartHelper.getLabel(oModel, oInterface, "Measures");
      }
      if (sMeasureLabel === undefined) {
        sMeasureLabel = sMeasurePath;
      }
      if (sDimensionLabel === undefined) {
        sDimensionLabel = sDimensionPath;
      }
      return ResourceModel && ResourceModel.getText("M_INTERACTIVE_CHART_HELPER_VISUALFILTER_MEASURE_DIMENSION_TITLE", [sMeasureLabel, sDimensionLabel]);
    },
    getLabel: function (oModel, oInterface, sProperty) {
      return oModel.getObject("".concat(oInterface.getPath(0), "/").concat(sProperty, "/0/$PropertyPath@com.sap.vocabularies.Common.v1.Label"));
    },
    getToolTip: function (oInterface, oChartAnnotation, oCollection, sMetaPath, bCustomAggregate, oAggregation, bRenderLineChart) {
      var sChartType = oChartAnnotation && oChartAnnotation["ChartType"] && oChartAnnotation["ChartType"]["$EnumMember"];
      var sMeasureDimensionToolTip = InteractiveChartHelper.getMeasureDimensionTitle(oInterface, oChartAnnotation, oCollection, bCustomAggregate, oAggregation);
      sMeasureDimensionToolTip = CommonHelper.escapeSingleQuotes(sMeasureDimensionToolTip);
      if (bRenderLineChart === "false" && sChartType === "com.sap.vocabularies.UI.v1.ChartType/Line") {
        return "{= '".concat(sMeasureDimensionToolTip, "'}");
      }
      var sSeperator = ResourceModel.getText("M_INTERACTIVE_CHART_HELPER_VISUALFILTER_TOOLTIP_SEPERATOR");
      var sInfoPath = generate([sMetaPath]);
      var sScaleUOMTooltip = InteractiveChartHelper.getScaleUoMTitle(oInterface, oChartAnnotation, oCollection, sInfoPath, bCustomAggregate, oAggregation, sSeperator, true);
      return "{= '" + sMeasureDimensionToolTip + (sScaleUOMTooltip ? "' + " + sScaleUOMTooltip : "'") + "}";
    },
    getUoM: function (oInterface, oChartAnnotation, oCollection, isCustomData, bCustomAggregate, oAggregation) {
      var oModel = oInterface.getModel(0);
      var sMeasurePathExpression = InteractiveChartHelper._getMeasurePath(oChartAnnotation, bCustomAggregate);
      var vISOCurrency = oModel.getObject("".concat(oInterface.getPath(0)) + sMeasurePathExpression + "@Org.OData.Measures.V1.ISOCurrency");
      var vUnit = oModel.getObject("".concat(oInterface.getPath(0)) + sMeasurePathExpression + "@Org.OData.Measures.V1.Unit");
      var sMeasurePath = oModel.getObject("".concat(oInterface.getPath(0)) + sMeasurePathExpression);
      var sAggregatablePropertyPath;
      if (!bCustomAggregate && oAggregation) {
        sAggregatablePropertyPath = oAggregation.AggregatableProperty && oAggregation.AggregatableProperty.value;
      } else {
        sAggregatablePropertyPath = sMeasurePath;
      }
      var _getUOM = function (vUOM, sAnnotation) {
        var sUOM = sAnnotation && sAnnotation.split("V1.")[1];
        var oUOM = {};
        if (vUOM) {
          // check if the UOM is part of Measure annotations(Custom aggregates)
          oUOM[sUOM] = vUOM;
          return isCustomData && vUOM.$Path ? JSON.stringify(oUOM) : vUOM;
        } else if (sAggregatablePropertyPath) {
          // check if the UOM is part of base property annotations(Transformation aggregates)
          vUOM = oInterface.getModel(1).getObject("".concat(oInterface.getPath(1), "/").concat(sAggregatablePropertyPath).concat(sAnnotation));
          oUOM[sUOM] = vUOM;
          return vUOM && isCustomData && vUOM.$Path ? JSON.stringify(oUOM) : vUOM;
        }
      };
      return _getUOM(vISOCurrency, "@Org.OData.Measures.V1.ISOCurrency") || _getUOM(vUnit, "@Org.OData.Measures.V1.Unit");
    },
    getScaleFactor: function (oValueFormat) {
      if (oValueFormat && oValueFormat.ScaleFactor) {
        return oValueFormat.ScaleFactor.$Decimal;
      }
      return undefined;
    },
    getUoMVisiblity: function (oInterface, oChartAnnotation, bShowError) {
      var sChartType = oChartAnnotation && oChartAnnotation["ChartType"] && oChartAnnotation["ChartType"]["$EnumMember"];
      if (bShowError) {
        return false;
      } else if (!(sChartType === "com.sap.vocabularies.UI.v1.ChartType/Bar" || sChartType === "com.sap.vocabularies.UI.v1.ChartType/Line")) {
        return false;
      } else {
        return true;
      }
    },
    getInParameterFiltersBinding: function (aInParameters) {
      if (aInParameters.length > 0) {
        var aParts = [];
        var sPaths = "";
        aInParameters.forEach(function (oInParameter) {
          if (oInParameter.localDataProperty) {
            aParts.push("{path:'$filters>/conditions/".concat(oInParameter.localDataProperty, "'}"));
          }
        });
        if (aParts.length > 0) {
          sPaths = aParts.join();
          return "{parts:[".concat(sPaths, "], formatter:'sap.fe.macros.visualfilters.VisualFilterRuntime.getFiltersFromConditions'}");
        } else {
          return undefined;
        }
      } else {
        return undefined;
      }
    },
    getfilterCountBinding: function (oInterface, oChartAnnotation) {
      var sDimension = oChartAnnotation.Dimensions[0].$PropertyPath;
      return "{path:'$filters>/conditions/" + sDimension + "', formatter:'sap.fe.macros.visualfilters.VisualFilterRuntime.getFilterCounts'}";
    }
  };
  InteractiveChartHelper.getfilterCountBinding.requiresIContext = true;
  InteractiveChartHelper.getColorBinding.requiresIContext = true;
  InteractiveChartHelper.getAggregationBinding.requiresIContext = true;
  InteractiveChartHelper.getUoM.requiresIContext = true;
  InteractiveChartHelper.getScaleUoMTitle.requiresIContext = true;
  InteractiveChartHelper.getToolTip.requiresIContext = true;
  InteractiveChartHelper.getMeasureDimensionTitle.requiresIContext = true;
  InteractiveChartHelper.getUoMVisiblity.requiresIContext = true;
  return InteractiveChartHelper;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,