/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/CriticalityFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/internal/helpers/DataPointTemplating", "sap/fe/macros/MacroMetadata"], function (MetaModelConverter, BindingToolkit, CriticalityFormatters, DataModelPathHelper, PropertyHelper, UIFormatters, FieldHelper, FieldTemplating, DatapointTemplating, MacroMetadata) {
  "use strict";

  var DataPoint = MacroMetadata.extend("sap.fe.macros.internal.DataPoint", {
    /**
     * Define macro stereotype for documentation
     */
    name: "DataPoint",
    /**
     * Namespace of the macro control
     */
    namespace: "sap.fe.macros.internal",
    /**
     * Fragment source of the macro (optional) - if not set, fragment is generated from namespace and name
     */
    fragment: "sap.fe.macros.internal.DataPoint",
    /**
     * The metadata describing the macro control.
     */
    metadata: {
      /**
       * Define macro stereotype for documentation purpose
       */
      stereotype: "xmlmacro",
      /**
       * Properties.
       */
      properties: {
        /**
         * Prefix added to the generated ID of the field
         */
        idPrefix: {
          type: "string"
        },
        /**
         * Metadata path to the dataPoint.
         * This property is usually a metadataContext pointing to a DataPoint having
         * $Type = "com.sap.vocabularies.UI.v1.DataPointType"
         * And a Visualization/$EnumNumber = "com.sap.vocabularies.UI.v1.VisualizationType/Rating", "com.sap.vocabularies.UI.v1.VisualizationType/Progress", or None
         * But it can also be a Property with $kind="Property"
         */
        metaPath: {
          type: "sap.ui.model.Context",
          required: true,
          $kind: ["Property"]
        },
        /**
         * Property added to associate the label with the DataPoint
         */
        ariaLabelledBy: {
          type: "string"
        },
        /**
         * Context pointing to an array of the property's semantic objects
         */
        semanticObjects: {
          type: "sap.ui.model.Context",
          required: false,
          computed: true
        },
        formatOptions: {
          type: "object",
          properties: {
            dataPointStyle: {
              type: "string",
              allowedValues: ["", "large"]
            },
            displayMode: {
              type: "string",
              allowedValues: ["Value", "Description", "ValueDescription", "DescriptionValue"]
            },
            /**
             * Define the size of the icons (For RatingIndicator only)
             */
            iconSize: {
              type: "string",
              allowedValues: ["1rem", "1.375rem", "2rem"]
            },
            isAnalytics: {
              type: "boolean",
              defaultValue: false
            },
            measureDisplayMode: {
              type: "string",
              allowedValues: ["Hidden", "ReadOnly"]
            },
            /**
             * If set to 'true', SAP Fiori elements shows an empty indicator in display mode for the ObjectNumber
             */
            showEmptyIndicator: {
              type: "boolean",
              defaultValue: false
            },
            /**
             * When true, displays the labels for the Rating and Progress indicators
             */
            showLabels: {
              type: "boolean",
              defaultValue: false
            }
          }
        },
        /**
         * Mandatory context to the DataPoint
         */
        contextPath: {
          type: "sap.ui.model.Context",
          required: true,
          $kind: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
        }
      }
    },
    create: function (oProps) {
      var _oDataModelPath$targe, _oDataModelPath$targe2, _valueProperty$annota, _valueProperty$annota2;
      var oDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(oProps.metaPath, oProps.contextPath);
      var oValueDataModelPath;
      oProps.visible = FieldTemplating.getVisibleExpression(oDataModelPath);
      if (oDataModelPath !== null && oDataModelPath !== void 0 && (_oDataModelPath$targe = oDataModelPath.targetObject) !== null && _oDataModelPath$targe !== void 0 && (_oDataModelPath$targe2 = _oDataModelPath$targe.Value) !== null && _oDataModelPath$targe2 !== void 0 && _oDataModelPath$targe2.path) {
        oValueDataModelPath = DataModelPathHelper.enhanceDataModelPath(oDataModelPath, oDataModelPath.targetObject.Value.path);
      }
      var oDataPointConverted = MetaModelConverter.convertMetaModelContext(oProps.metaPath);
      if (!oProps.formatOptions) {
        oProps.formatOptions = {};
      }
      oProps.semanticObjects = FieldTemplating.getSemanticObjects([]);
      oProps.hasQuickViewFacets = false;
      oProps.hasSemanticObjectOnNavigation = false;
      if ((oDataPointConverted === null || oDataPointConverted === void 0 ? void 0 : oDataPointConverted.Visualization) === "UI.VisualizationType/Rating") {
        return this.setUpRatingIndicator(oProps, oDataPointConverted);
      }
      if ((oDataPointConverted === null || oDataPointConverted === void 0 ? void 0 : oDataPointConverted.Visualization) === "UI.VisualizationType/Progress") {
        return this.setUpProgressBar(oProps, oDataPointConverted, oDataModelPath);
      }
      var valueProperty = oValueDataModelPath && oValueDataModelPath.targetObject;
      if (FieldTemplating.isUsedInNavigationWithQuickViewFacets(oDataModelPath, valueProperty) || valueProperty !== null && valueProperty !== void 0 && (_valueProperty$annota = valueProperty.annotations) !== null && _valueProperty$annota !== void 0 && (_valueProperty$annota2 = _valueProperty$annota.Common) !== null && _valueProperty$annota2 !== void 0 && _valueProperty$annota2.SemanticObject) {
        this.setUpSemanticObjectsAndQuickView(oProps, oDataPointConverted, oDataModelPath, oValueDataModelPath);
      } else if (PropertyHelper.isProperty(valueProperty) && (PropertyHelper.hasUnit(valueProperty) || PropertyHelper.hasCurrency(valueProperty))) {
        // we only show an objectNumber if there is no quickview and a unit or a currency
        return this.setUpObjectNumber(oProps, oDataPointConverted, oDataModelPath, oValueDataModelPath);
      }
      return this.setUpObjectStatus(oProps, oDataPointConverted, oDataModelPath);
    },
    setUpRatingIndicator: function (oProps, oDataPointConverted) {
      oProps.targetLabel = BindingToolkit.compileExpression(BindingToolkit.formatResult([BindingToolkit.pathInModel("T_HEADER_RATING_INDICATOR_FOOTER", "sap.fe.i18n"), BindingToolkit.getExpressionFromAnnotation(oDataPointConverted.Value), oDataPointConverted.TargetValue ? BindingToolkit.getExpressionFromAnnotation(oDataPointConverted.TargetValue) : "5"], "MESSAGE"));
      oProps.visualization = "Rating";
      return oProps;
    },
    setUpProgressBar: function (oProps, oDataPointConverted, oDataModelPath) {
      oProps.criticalityColorExpression = CriticalityFormatters.buildExpressionForCriticalityColor(oDataPointConverted, oDataModelPath);
      oProps.displayValue = DatapointTemplating.buildExpressionForProgressIndicatorDisplayValue(oDataModelPath);
      oProps.percentValue = DatapointTemplating.buildExpressionForProgressIndicatorPercentValue(oDataModelPath);
      oProps.visualization = "Progress";
      return oProps;
    },
    setUpObjectNumber: function (oProps, oDataPointConverted, oDataModelPath, oValueDataModelPath) {
      oProps.criticalityColorExpression = CriticalityFormatters.buildExpressionForCriticalityColor(oDataPointConverted, oDataModelPath);
      oProps.emptyIndicatorMode = oProps.formatOptions.showEmptyIndicator ? "On" : undefined;
      oProps.objectStatusNumber = DatapointTemplating.buildFieldBindingExpression(oDataModelPath, oProps.formatOptions, true);
      oProps.unit = oProps.formatOptions.measureDisplayMode === "Hidden" ? undefined : BindingToolkit.compileExpression(UIFormatters.getBindingForUnitOrCurrency(oValueDataModelPath));
      oProps.visualization = "ObjectNumber";
      return oProps;
    },
    setUpObjectStatus: function (oProps, oDataPointConverted, oDataModelPath) {
      // if teh semanticObjects already calculated the criticality we don't calculate it again
      oProps.criticalityColorExpression = oProps.criticalityColorExpression ? oProps.criticalityColorExpression : CriticalityFormatters.buildExpressionForCriticalityColor(oDataPointConverted, oDataModelPath);
      oProps.emptyIndicatorMode = oProps.formatOptions.showEmptyIndicator ? "On" : undefined;
      oProps.objectStatusText = DatapointTemplating.buildFieldBindingExpression(oDataModelPath, oProps.formatOptions, false);
      oProps.iconExpression = CriticalityFormatters.buildExpressionForCriticalityIcon(oDataPointConverted, oDataModelPath);
      oProps.visualization = "ObjectStatus";
      return oProps;
    },
    setUpSemanticObjectsAndQuickView: function (oProps, oDataPointConverted, oDataModelPath, oValueDataModelPath) {
      var _oValueDataModelPath$;
      var valueProperty = oValueDataModelPath && oValueDataModelPath.targetObject;
      oProps.hasQuickViewFacets = valueProperty ? FieldTemplating.isUsedInNavigationWithQuickViewFacets(oDataModelPath, valueProperty) : false;
      oProps.semanticObject = "";
      var oAnnotations,
        aSemObjExprToResolve = [];
      if (typeof oDataPointConverted.Value === "object") {
        var _oDataPointConverted$, _oDataPointConverted$2;
        oAnnotations = (_oDataPointConverted$ = oDataPointConverted.Value.$target) === null || _oDataPointConverted$ === void 0 ? void 0 : (_oDataPointConverted$2 = _oDataPointConverted$.annotations) === null || _oDataPointConverted$2 === void 0 ? void 0 : _oDataPointConverted$2.Common;
        aSemObjExprToResolve = FieldTemplating.getSemanticObjectExpressionToResolve(oAnnotations);
      }
      if (!!oProps.semanticObject && oProps.semanticObject[0] === "{") {
        aSemObjExprToResolve.push({
          key: oProps.semanticObject.substr(1, oProps.semanticObject.length - 2),
          value: oProps.semanticObject
        });
      }
      oProps.semanticObjects = FieldTemplating.getSemanticObjects(aSemObjExprToResolve); // this is used via semanticObjects>
      // This sets up the semantic links found in the navigation property, if there is no semantic links define before.
      if (!oProps.semanticObject && (oValueDataModelPath === null || oValueDataModelPath === void 0 ? void 0 : (_oValueDataModelPath$ = oValueDataModelPath.navigationProperties) === null || _oValueDataModelPath$ === void 0 ? void 0 : _oValueDataModelPath$.length) > 0) {
        oValueDataModelPath.navigationProperties.forEach(function (navProperty) {
          var _navProperty$annotati, _navProperty$annotati2;
          if (navProperty !== null && navProperty !== void 0 && (_navProperty$annotati = navProperty.annotations) !== null && _navProperty$annotati !== void 0 && (_navProperty$annotati2 = _navProperty$annotati.Common) !== null && _navProperty$annotati2 !== void 0 && _navProperty$annotati2.SemanticObject) {
            oProps.semanticObject = navProperty.annotations.Common.SemanticObject;
            oProps.hasSemanticObjectOnNavigation = true;
          }
        });
      }
      oProps.criticalityColorExpression = CriticalityFormatters.buildExpressionForCriticalityColor(oDataPointConverted, oDataModelPath);
      if (oProps.criticalityColorExpression === "None" && oValueDataModelPath) {
        oProps.criticalityColorExpression = oProps.hasQuickViewFacets ? "Information" : FieldHelper.getStateDependingOnSemanticObjectTargets(oValueDataModelPath);
      }
    }
  });
  return DataPoint;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,