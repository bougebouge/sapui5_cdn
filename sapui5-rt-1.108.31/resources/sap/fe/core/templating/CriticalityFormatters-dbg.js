/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper"], function (BindingToolkit, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var or = BindingToolkit.or;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  /**
   * Returns an expression to set button type based on Criticality
   * Supported Criticality: Positive, Negative, Critical and Information leading to Success, Error, Warning and None state respectively.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityColor
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField a DataPoint or a DataModelObjectPath.
   * @param [oPropertyDataModelPath] DataModelObjectPath.
   * @returns An expression to deduce the state of an objectStatus.
   * @private
   * @ui5-restricted
   */
  var buildExpressionForCriticalityColor = function (oTarget, oPropertyDataModelPath) {
    var oAnnotationTarget = oTarget.targetObject ? oTarget.targetObject : oTarget;
    var oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    var relativeLocation = oPropertyDataModelPath ? getRelativePaths(oPropertyDataModelPath) : undefined;
    var oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty, relativeLocation);
    var sValueStateExpression;
    if (oCriticalityProperty) {
      sValueStateExpression = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("Error"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Critical")), equal(oCriticalityExpression, constant(2)), equal(oCriticalityExpression, constant("2"))), constant("Warning"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("Success"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Information")), equal(oCriticalityExpression, constant(5)), equal(oCriticalityExpression, constant("5"))), constant("Information"), constant("None")))));
    } else {
      // Any other cases are not valid, the default value of 'None' will be returned
      sValueStateExpression = constant("None");
    }
    return compileExpression(sValueStateExpression);
  };

  /**
   * Returns an expression to set icon type based on Criticality
   * Supported Criticality: Positive, Negative, Critical and Information.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityIcon
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField a DataPoint or a DataModelObjectPath.
   * @param [oPropertyDataModelPath] DataModelObjectPath.
   * @returns An expression to deduce the icon of an objectStatus.
   * @private
   * @ui5-restricted
   */
  _exports.buildExpressionForCriticalityColor = buildExpressionForCriticalityColor;
  var buildExpressionForCriticalityIcon = function (oTarget, oPropertyDataModelPath) {
    var oAnnotationTarget = oTarget !== null && oTarget !== void 0 && oTarget.targetObject ? oTarget.targetObject : oTarget;
    var oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    var relativeLocation = oPropertyDataModelPath ? getRelativePaths(oPropertyDataModelPath) : undefined;
    var oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty, relativeLocation);
    var bCondition = (oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.CriticalityRepresentation) && (oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.CriticalityRepresentation) === "UI.CriticalityRepresentationType/WithoutIcon";
    var sIconPath;
    if (!bCondition) {
      if (oCriticalityProperty) {
        sIconPath = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("sap-icon://message-error"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Critical")), equal(oCriticalityExpression, constant(2)), equal(oCriticalityExpression, constant("2"))), constant("sap-icon://message-warning"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("sap-icon://message-success"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Information")), equal(oCriticalityExpression, constant(5)), equal(oCriticalityExpression, constant("5"))), constant("sap-icon://message-information"), constant("")))));
      } else {
        sIconPath = constant("");
      }
    } else {
      sIconPath = constant("");
    }
    return compileExpression(sIconPath);
  };

  /**
   * Returns an expression to set button type based on Criticality
   * Supported Criticality: Positive and Negative leading to Accept and Reject button type respectively.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityButtonType
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField, DataPoint, DataModelObjectPath.
   * @returns An expression to deduce button type.
   * @private
   * @ui5-restricted
   */
  _exports.buildExpressionForCriticalityIcon = buildExpressionForCriticalityIcon;
  var buildExpressionForCriticalityButtonType = function (oTarget) {
    var oAnnotationTarget = oTarget !== null && oTarget !== void 0 && oTarget.targetObject ? oTarget.targetObject : oTarget;
    var oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    var oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty);
    var sButtonTypeExpression;
    if (oCriticalityProperty) {
      sButtonTypeExpression = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("Reject"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("Accept"), constant("Default")));
    } else {
      // Any other cases are not valid, the default value of 'Default' will be returned
      sButtonTypeExpression = constant("Default");
    }
    return compileExpression(sButtonTypeExpression);
  };

  /**
   * Returns an expression to set color in MicroCharts based on Criticality
   * Supported Criticality: Positive, Negative and Critical leading to Good, Error and Critical color respectively.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityColorMicroChart
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField, DataPoint, DataModelObjectPath
   * @returns An expression to deduce colors in Microcharts
   * @private
   * @ui5-restricted
   */
  _exports.buildExpressionForCriticalityButtonType = buildExpressionForCriticalityButtonType;
  var buildExpressionForCriticalityColorMicroChart = function (oTarget) {
    var oAnnotationTarget = oTarget !== null && oTarget !== void 0 && oTarget.targetObject ? oTarget.targetObject : oTarget;
    var oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    var oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty);
    var sColorExpression;
    if (oCriticalityProperty) {
      sColorExpression = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("Error"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Critical")), equal(oCriticalityExpression, constant(2)), equal(oCriticalityExpression, constant("2"))), constant("Critical"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("Good"), constant("Neutral"))));
    } else {
      sColorExpression = constant("Neutral");
    }
    return compileExpression(sColorExpression);
  };
  _exports.buildExpressionForCriticalityColorMicroChart = buildExpressionForCriticalityColorMicroChart;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZEV4cHJlc3Npb25Gb3JDcml0aWNhbGl0eUNvbG9yIiwib1RhcmdldCIsIm9Qcm9wZXJ0eURhdGFNb2RlbFBhdGgiLCJvQW5ub3RhdGlvblRhcmdldCIsInRhcmdldE9iamVjdCIsIm9Dcml0aWNhbGl0eVByb3BlcnR5IiwiQ3JpdGljYWxpdHkiLCJyZWxhdGl2ZUxvY2F0aW9uIiwiZ2V0UmVsYXRpdmVQYXRocyIsInVuZGVmaW5lZCIsIm9Dcml0aWNhbGl0eUV4cHJlc3Npb24iLCJnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24iLCJzVmFsdWVTdGF0ZUV4cHJlc3Npb24iLCJpZkVsc2UiLCJvciIsImVxdWFsIiwiY29uc3RhbnQiLCJjb21waWxlRXhwcmVzc2lvbiIsImJ1aWxkRXhwcmVzc2lvbkZvckNyaXRpY2FsaXR5SWNvbiIsImJDb25kaXRpb24iLCJDcml0aWNhbGl0eVJlcHJlc2VudGF0aW9uIiwic0ljb25QYXRoIiwiYnVpbGRFeHByZXNzaW9uRm9yQ3JpdGljYWxpdHlCdXR0b25UeXBlIiwic0J1dHRvblR5cGVFeHByZXNzaW9uIiwiYnVpbGRFeHByZXNzaW9uRm9yQ3JpdGljYWxpdHlDb2xvck1pY3JvQ2hhcnQiLCJzQ29sb3JFeHByZXNzaW9uIl0sInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyJDcml0aWNhbGl0eUZvcm1hdHRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb24gfSBmcm9tIFwic2FwL2ZlL2NvcmUvaGVscGVycy9CaW5kaW5nVG9vbGtpdFwiO1xuaW1wb3J0IHsgY29tcGlsZUV4cHJlc3Npb24sIGNvbnN0YW50LCBlcXVhbCwgZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uLCBpZkVsc2UsIG9yIH0gZnJvbSBcInNhcC9mZS9jb3JlL2hlbHBlcnMvQmluZGluZ1Rvb2xraXRcIjtcbmltcG9ydCB0eXBlIHsgRGF0YU1vZGVsT2JqZWN0UGF0aCB9IGZyb20gXCJzYXAvZmUvY29yZS90ZW1wbGF0aW5nL0RhdGFNb2RlbFBhdGhIZWxwZXJcIjtcbmltcG9ydCB7IGdldFJlbGF0aXZlUGF0aHMgfSBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9EYXRhTW9kZWxQYXRoSGVscGVyXCI7XG4vKipcbiAqIFJldHVybnMgYW4gZXhwcmVzc2lvbiB0byBzZXQgYnV0dG9uIHR5cGUgYmFzZWQgb24gQ3JpdGljYWxpdHlcbiAqIFN1cHBvcnRlZCBDcml0aWNhbGl0eTogUG9zaXRpdmUsIE5lZ2F0aXZlLCBDcml0aWNhbCBhbmQgSW5mb3JtYXRpb24gbGVhZGluZyB0byBTdWNjZXNzLCBFcnJvciwgV2FybmluZyBhbmQgTm9uZSBzdGF0ZSByZXNwZWN0aXZlbHkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBzYXAuZmUuY29yZS5Dcml0aWNhbGl0eUZvcm1hdHRlcnMuYnVpbGRFeHByZXNzaW9uRm9yQ3JpdGljYWxpdHlDb2xvclxuICogQG1lbWJlcm9mIHNhcC5mZS5jb3JlLkNyaXRpY2FsaXR5Rm9ybWF0dGVyc1xuICogQHBhcmFtIG9UYXJnZXQgQSBEYXRhRmllbGQgYSBEYXRhUG9pbnQgb3IgYSBEYXRhTW9kZWxPYmplY3RQYXRoLlxuICogQHBhcmFtIFtvUHJvcGVydHlEYXRhTW9kZWxQYXRoXSBEYXRhTW9kZWxPYmplY3RQYXRoLlxuICogQHJldHVybnMgQW4gZXhwcmVzc2lvbiB0byBkZWR1Y2UgdGhlIHN0YXRlIG9mIGFuIG9iamVjdFN0YXR1cy5cbiAqIEBwcml2YXRlXG4gKiBAdWk1LXJlc3RyaWN0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkRXhwcmVzc2lvbkZvckNyaXRpY2FsaXR5Q29sb3IgPSAob1RhcmdldDogYW55LCBvUHJvcGVydHlEYXRhTW9kZWxQYXRoOiBEYXRhTW9kZWxPYmplY3RQYXRoKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcblx0Y29uc3Qgb0Fubm90YXRpb25UYXJnZXQgPSBvVGFyZ2V0LnRhcmdldE9iamVjdCA/IG9UYXJnZXQudGFyZ2V0T2JqZWN0IDogb1RhcmdldDtcblx0Y29uc3Qgb0NyaXRpY2FsaXR5UHJvcGVydHkgPSBvQW5ub3RhdGlvblRhcmdldD8uQ3JpdGljYWxpdHk7XG5cdGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBvUHJvcGVydHlEYXRhTW9kZWxQYXRoID8gZ2V0UmVsYXRpdmVQYXRocyhvUHJvcGVydHlEYXRhTW9kZWxQYXRoKSA6IHVuZGVmaW5lZDtcblx0Y29uc3Qgb0NyaXRpY2FsaXR5RXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz4gPSBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24ob0NyaXRpY2FsaXR5UHJvcGVydHksIHJlbGF0aXZlTG9jYXRpb24pO1xuXHRsZXQgc1ZhbHVlU3RhdGVFeHByZXNzaW9uO1xuXHRpZiAob0NyaXRpY2FsaXR5UHJvcGVydHkpIHtcblx0XHRzVmFsdWVTdGF0ZUV4cHJlc3Npb24gPSBpZkVsc2UoXG5cdFx0XHRvcihcblx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiwgY29uc3RhbnQoXCJVSS5Dcml0aWNhbGl0eVR5cGUvTmVnYXRpdmVcIikpLFxuXHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxOdW1iZXI+LCBjb25zdGFudCgxKSksXG5cdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiMVwiKSlcblx0XHRcdCksXG5cdFx0XHRjb25zdGFudChcIkVycm9yXCIpLFxuXHRcdFx0aWZFbHNlKFxuXHRcdFx0XHRvcihcblx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIlVJLkNyaXRpY2FsaXR5VHlwZS9Dcml0aWNhbFwiKSksXG5cdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248TnVtYmVyPiwgY29uc3RhbnQoMikpLFxuXHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiMlwiKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0Y29uc3RhbnQoXCJXYXJuaW5nXCIpLFxuXHRcdFx0XHRpZkVsc2UoXG5cdFx0XHRcdFx0b3IoXG5cdFx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIlVJLkNyaXRpY2FsaXR5VHlwZS9Qb3NpdGl2ZVwiKSksXG5cdFx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxOdW1iZXI+LCBjb25zdGFudCgzKSksXG5cdFx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjNcIikpXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRjb25zdGFudChcIlN1Y2Nlc3NcIiksXG5cdFx0XHRcdFx0aWZFbHNlKFxuXHRcdFx0XHRcdFx0b3IoXG5cdFx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL0luZm9ybWF0aW9uXCIpKSxcblx0XHRcdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248TnVtYmVyPiwgY29uc3RhbnQoNSkpLFxuXHRcdFx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjVcIikpXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0Y29uc3RhbnQoXCJJbmZvcm1hdGlvblwiKSxcblx0XHRcdFx0XHRcdGNvbnN0YW50KFwiTm9uZVwiKVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gQW55IG90aGVyIGNhc2VzIGFyZSBub3QgdmFsaWQsIHRoZSBkZWZhdWx0IHZhbHVlIG9mICdOb25lJyB3aWxsIGJlIHJldHVybmVkXG5cdFx0c1ZhbHVlU3RhdGVFeHByZXNzaW9uID0gY29uc3RhbnQoXCJOb25lXCIpO1xuXHR9XG5cdHJldHVybiBjb21waWxlRXhwcmVzc2lvbihzVmFsdWVTdGF0ZUV4cHJlc3Npb24pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGV4cHJlc3Npb24gdG8gc2V0IGljb24gdHlwZSBiYXNlZCBvbiBDcml0aWNhbGl0eVxuICogU3VwcG9ydGVkIENyaXRpY2FsaXR5OiBQb3NpdGl2ZSwgTmVnYXRpdmUsIENyaXRpY2FsIGFuZCBJbmZvcm1hdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqIEBuYW1lIHNhcC5mZS5jb3JlLkNyaXRpY2FsaXR5Rm9ybWF0dGVycy5idWlsZEV4cHJlc3Npb25Gb3JDcml0aWNhbGl0eUljb25cbiAqIEBtZW1iZXJvZiBzYXAuZmUuY29yZS5Dcml0aWNhbGl0eUZvcm1hdHRlcnNcbiAqIEBwYXJhbSBvVGFyZ2V0IEEgRGF0YUZpZWxkIGEgRGF0YVBvaW50IG9yIGEgRGF0YU1vZGVsT2JqZWN0UGF0aC5cbiAqIEBwYXJhbSBbb1Byb3BlcnR5RGF0YU1vZGVsUGF0aF0gRGF0YU1vZGVsT2JqZWN0UGF0aC5cbiAqIEByZXR1cm5zIEFuIGV4cHJlc3Npb24gdG8gZGVkdWNlIHRoZSBpY29uIG9mIGFuIG9iamVjdFN0YXR1cy5cbiAqIEBwcml2YXRlXG4gKiBAdWk1LXJlc3RyaWN0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkRXhwcmVzc2lvbkZvckNyaXRpY2FsaXR5SWNvbiA9IChvVGFyZ2V0OiBhbnksIG9Qcm9wZXJ0eURhdGFNb2RlbFBhdGg6IERhdGFNb2RlbE9iamVjdFBhdGgpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuXHRjb25zdCBvQW5ub3RhdGlvblRhcmdldCA9IG9UYXJnZXQ/LnRhcmdldE9iamVjdCA/IG9UYXJnZXQudGFyZ2V0T2JqZWN0IDogb1RhcmdldDtcblx0Y29uc3Qgb0NyaXRpY2FsaXR5UHJvcGVydHkgPSBvQW5ub3RhdGlvblRhcmdldD8uQ3JpdGljYWxpdHk7XG5cdGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBvUHJvcGVydHlEYXRhTW9kZWxQYXRoID8gZ2V0UmVsYXRpdmVQYXRocyhvUHJvcGVydHlEYXRhTW9kZWxQYXRoKSA6IHVuZGVmaW5lZDtcblx0Y29uc3Qgb0NyaXRpY2FsaXR5RXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz4gPSBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24ob0NyaXRpY2FsaXR5UHJvcGVydHksIHJlbGF0aXZlTG9jYXRpb24pO1xuXHRjb25zdCBiQ29uZGl0aW9uID1cblx0XHRvQW5ub3RhdGlvblRhcmdldD8uQ3JpdGljYWxpdHlSZXByZXNlbnRhdGlvbiAmJlxuXHRcdG9Bbm5vdGF0aW9uVGFyZ2V0Py5Dcml0aWNhbGl0eVJlcHJlc2VudGF0aW9uID09PSBcIlVJLkNyaXRpY2FsaXR5UmVwcmVzZW50YXRpb25UeXBlL1dpdGhvdXRJY29uXCI7XG5cdGxldCBzSWNvblBhdGg7XG5cdGlmICghYkNvbmRpdGlvbikge1xuXHRcdGlmIChvQ3JpdGljYWxpdHlQcm9wZXJ0eSkge1xuXHRcdFx0c0ljb25QYXRoID0gaWZFbHNlKFxuXHRcdFx0XHRvcihcblx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIlVJLkNyaXRpY2FsaXR5VHlwZS9OZWdhdGl2ZVwiKSksXG5cdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248TnVtYmVyPiwgY29uc3RhbnQoMSkpLFxuXHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiMVwiKSlcblx0XHRcdFx0KSxcblx0XHRcdFx0Y29uc3RhbnQoXCJzYXAtaWNvbjovL21lc3NhZ2UtZXJyb3JcIiksXG5cdFx0XHRcdGlmRWxzZShcblx0XHRcdFx0XHRvcihcblx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL0NyaXRpY2FsXCIpKSxcblx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24gYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPE51bWJlcj4sIGNvbnN0YW50KDIpKSxcblx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiMlwiKSlcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGNvbnN0YW50KFwic2FwLWljb246Ly9tZXNzYWdlLXdhcm5pbmdcIiksXG5cdFx0XHRcdFx0aWZFbHNlKFxuXHRcdFx0XHRcdFx0b3IoXG5cdFx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL1Bvc2l0aXZlXCIpKSxcblx0XHRcdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248TnVtYmVyPiwgY29uc3RhbnQoMykpLFxuXHRcdFx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjNcIikpXG5cdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0Y29uc3RhbnQoXCJzYXAtaWNvbjovL21lc3NhZ2Utc3VjY2Vzc1wiKSxcblx0XHRcdFx0XHRcdGlmRWxzZShcblx0XHRcdFx0XHRcdFx0b3IoXG5cdFx0XHRcdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiwgY29uc3RhbnQoXCJVSS5Dcml0aWNhbGl0eVR5cGUvSW5mb3JtYXRpb25cIikpLFxuXHRcdFx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24gYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPE51bWJlcj4sIGNvbnN0YW50KDUpKSxcblx0XHRcdFx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjVcIikpXG5cdFx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRcdGNvbnN0YW50KFwic2FwLWljb246Ly9tZXNzYWdlLWluZm9ybWF0aW9uXCIpLFxuXHRcdFx0XHRcdFx0XHRjb25zdGFudChcIlwiKVxuXHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdClcblx0XHRcdFx0KVxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c0ljb25QYXRoID0gY29uc3RhbnQoXCJcIik7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHNJY29uUGF0aCA9IGNvbnN0YW50KFwiXCIpO1xuXHR9XG5cdHJldHVybiBjb21waWxlRXhwcmVzc2lvbihzSWNvblBhdGgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGV4cHJlc3Npb24gdG8gc2V0IGJ1dHRvbiB0eXBlIGJhc2VkIG9uIENyaXRpY2FsaXR5XG4gKiBTdXBwb3J0ZWQgQ3JpdGljYWxpdHk6IFBvc2l0aXZlIGFuZCBOZWdhdGl2ZSBsZWFkaW5nIHRvIEFjY2VwdCBhbmQgUmVqZWN0IGJ1dHRvbiB0eXBlIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBzdGF0aWNcbiAqIEBuYW1lIHNhcC5mZS5jb3JlLkNyaXRpY2FsaXR5Rm9ybWF0dGVycy5idWlsZEV4cHJlc3Npb25Gb3JDcml0aWNhbGl0eUJ1dHRvblR5cGVcbiAqIEBtZW1iZXJvZiBzYXAuZmUuY29yZS5Dcml0aWNhbGl0eUZvcm1hdHRlcnNcbiAqIEBwYXJhbSBvVGFyZ2V0IEEgRGF0YUZpZWxkLCBEYXRhUG9pbnQsIERhdGFNb2RlbE9iamVjdFBhdGguXG4gKiBAcmV0dXJucyBBbiBleHByZXNzaW9uIHRvIGRlZHVjZSBidXR0b24gdHlwZS5cbiAqIEBwcml2YXRlXG4gKiBAdWk1LXJlc3RyaWN0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkRXhwcmVzc2lvbkZvckNyaXRpY2FsaXR5QnV0dG9uVHlwZSA9IChvVGFyZ2V0OiBhbnkpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuXHRjb25zdCBvQW5ub3RhdGlvblRhcmdldCA9IG9UYXJnZXQ/LnRhcmdldE9iamVjdCA/IG9UYXJnZXQudGFyZ2V0T2JqZWN0IDogb1RhcmdldDtcblx0Y29uc3Qgb0NyaXRpY2FsaXR5UHJvcGVydHkgPSBvQW5ub3RhdGlvblRhcmdldD8uQ3JpdGljYWxpdHk7XG5cdGNvbnN0IG9Dcml0aWNhbGl0eUV4cHJlc3Npb246IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+ID0gZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKG9Dcml0aWNhbGl0eVByb3BlcnR5KTtcblx0bGV0IHNCdXR0b25UeXBlRXhwcmVzc2lvbjtcblx0aWYgKG9Dcml0aWNhbGl0eVByb3BlcnR5KSB7XG5cdFx0c0J1dHRvblR5cGVFeHByZXNzaW9uID0gaWZFbHNlKFxuXHRcdFx0b3IoXG5cdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL05lZ2F0aXZlXCIpKSxcblx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248TnVtYmVyPiwgY29uc3RhbnQoMSkpLFxuXHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjFcIikpXG5cdFx0XHQpLFxuXHRcdFx0Y29uc3RhbnQoXCJSZWplY3RcIiksXG5cdFx0XHRpZkVsc2UoXG5cdFx0XHRcdG9yKFxuXHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL1Bvc2l0aXZlXCIpKSxcblx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxOdW1iZXI+LCBjb25zdGFudCgzKSksXG5cdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiwgY29uc3RhbnQoXCIzXCIpKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRjb25zdGFudChcIkFjY2VwdFwiKSxcblx0XHRcdFx0Y29uc3RhbnQoXCJEZWZhdWx0XCIpXG5cdFx0XHQpXG5cdFx0KTtcblx0fSBlbHNlIHtcblx0XHQvLyBBbnkgb3RoZXIgY2FzZXMgYXJlIG5vdCB2YWxpZCwgdGhlIGRlZmF1bHQgdmFsdWUgb2YgJ0RlZmF1bHQnIHdpbGwgYmUgcmV0dXJuZWRcblx0XHRzQnV0dG9uVHlwZUV4cHJlc3Npb24gPSBjb25zdGFudChcIkRlZmF1bHRcIik7XG5cdH1cblx0cmV0dXJuIGNvbXBpbGVFeHByZXNzaW9uKHNCdXR0b25UeXBlRXhwcmVzc2lvbik7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gZXhwcmVzc2lvbiB0byBzZXQgY29sb3IgaW4gTWljcm9DaGFydHMgYmFzZWQgb24gQ3JpdGljYWxpdHlcbiAqIFN1cHBvcnRlZCBDcml0aWNhbGl0eTogUG9zaXRpdmUsIE5lZ2F0aXZlIGFuZCBDcml0aWNhbCBsZWFkaW5nIHRvIEdvb2QsIEVycm9yIGFuZCBDcml0aWNhbCBjb2xvciByZXNwZWN0aXZlbHkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAc3RhdGljXG4gKiBAbmFtZSBzYXAuZmUuY29yZS5Dcml0aWNhbGl0eUZvcm1hdHRlcnMuYnVpbGRFeHByZXNzaW9uRm9yQ3JpdGljYWxpdHlDb2xvck1pY3JvQ2hhcnRcbiAqIEBtZW1iZXJvZiBzYXAuZmUuY29yZS5Dcml0aWNhbGl0eUZvcm1hdHRlcnNcbiAqIEBwYXJhbSBvVGFyZ2V0IEEgRGF0YUZpZWxkLCBEYXRhUG9pbnQsIERhdGFNb2RlbE9iamVjdFBhdGhcbiAqIEByZXR1cm5zIEFuIGV4cHJlc3Npb24gdG8gZGVkdWNlIGNvbG9ycyBpbiBNaWNyb2NoYXJ0c1xuICogQHByaXZhdGVcbiAqIEB1aTUtcmVzdHJpY3RlZFxuICovXG5leHBvcnQgY29uc3QgYnVpbGRFeHByZXNzaW9uRm9yQ3JpdGljYWxpdHlDb2xvck1pY3JvQ2hhcnQgPSAob1RhcmdldDogYW55KTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcblx0Y29uc3Qgb0Fubm90YXRpb25UYXJnZXQgPSBvVGFyZ2V0Py50YXJnZXRPYmplY3QgPyBvVGFyZ2V0LnRhcmdldE9iamVjdCA6IG9UYXJnZXQ7XG5cdGNvbnN0IG9Dcml0aWNhbGl0eVByb3BlcnR5ID0gb0Fubm90YXRpb25UYXJnZXQ/LkNyaXRpY2FsaXR5O1xuXHRjb25zdCBvQ3JpdGljYWxpdHlFeHByZXNzaW9uOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPiA9IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihvQ3JpdGljYWxpdHlQcm9wZXJ0eSk7XG5cdGxldCBzQ29sb3JFeHByZXNzaW9uO1xuXHRpZiAob0NyaXRpY2FsaXR5UHJvcGVydHkpIHtcblx0XHRzQ29sb3JFeHByZXNzaW9uID0gaWZFbHNlKFxuXHRcdFx0b3IoXG5cdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL05lZ2F0aXZlXCIpKSxcblx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248TnVtYmVyPiwgY29uc3RhbnQoMSkpLFxuXHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjFcIikpXG5cdFx0XHQpLFxuXHRcdFx0Y29uc3RhbnQoXCJFcnJvclwiKSxcblx0XHRcdGlmRWxzZShcblx0XHRcdFx0b3IoXG5cdFx0XHRcdFx0ZXF1YWwob0NyaXRpY2FsaXR5RXhwcmVzc2lvbiwgY29uc3RhbnQoXCJVSS5Dcml0aWNhbGl0eVR5cGUvQ3JpdGljYWxcIikpLFxuXHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24gYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPE51bWJlcj4sIGNvbnN0YW50KDIpKSxcblx0XHRcdFx0XHRlcXVhbChvQ3JpdGljYWxpdHlFeHByZXNzaW9uLCBjb25zdGFudChcIjJcIikpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGNvbnN0YW50KFwiQ3JpdGljYWxcIiksXG5cdFx0XHRcdGlmRWxzZShcblx0XHRcdFx0XHRvcihcblx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiVUkuQ3JpdGljYWxpdHlUeXBlL1Bvc2l0aXZlXCIpKSxcblx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24gYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPE51bWJlcj4sIGNvbnN0YW50KDMpKSxcblx0XHRcdFx0XHRcdGVxdWFsKG9Dcml0aWNhbGl0eUV4cHJlc3Npb24sIGNvbnN0YW50KFwiM1wiKSlcblx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdGNvbnN0YW50KFwiR29vZFwiKSxcblx0XHRcdFx0XHRjb25zdGFudChcIk5ldXRyYWxcIilcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0gZWxzZSB7XG5cdFx0c0NvbG9yRXhwcmVzc2lvbiA9IGNvbnN0YW50KFwiTmV1dHJhbFwiKTtcblx0fVxuXHRyZXR1cm4gY29tcGlsZUV4cHJlc3Npb24oc0NvbG9yRXhwcmVzc2lvbik7XG59O1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7RUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ08sSUFBTUEsa0NBQWtDLEdBQUcsVUFBQ0MsT0FBWSxFQUFFQyxzQkFBMkMsRUFBeUI7SUFDcEksSUFBTUMsaUJBQWlCLEdBQUdGLE9BQU8sQ0FBQ0csWUFBWSxHQUFHSCxPQUFPLENBQUNHLFlB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