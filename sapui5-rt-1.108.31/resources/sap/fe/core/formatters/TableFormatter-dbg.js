/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/formatters/TableFormatterTypes"], function (TableFormatterTypes) {
  "use strict";

  var MessageType = TableFormatterTypes.MessageType;
  var getMessagetypeOrder = function (messageType) {
    switch (messageType) {
      case "Error":
        return 4;
      case "Warning":
        return 3;
      case "Information":
        return 2;
      case "None":
        return 1;
      default:
        return -1;
    }
  };

  /**
   * Gets the validity of creation row fields.
   *
   * @function
   * @name validateCreationRowFields
   * @param fieldValidityObject Object holding the fields
   * @returns `true` if all the fields in the creation row are valid, `false` otherwise
   */
  var validateCreationRowFields = function (fieldValidityObject) {
    if (!fieldValidityObject) {
      return false;
    }
    var fieldKeys = Object.keys(fieldValidityObject);
    return fieldKeys.length > 0 && fieldKeys.every(function (key) {
      return fieldValidityObject[key]["validity"];
    });
  };
  validateCreationRowFields.__functionName = "sap.fe.core.formatters.TableFormatter#validateCreationRowFields";

  /**
   * @param this The object status control.
   * @param semanticKeyHasDraftIndicator The property name of the draft indicator.
   * @param aFilteredMessages Array of messages.
   * @param columnName
   * @param isSemanticKeyInFieldGroup Flag which says if semantic key is a part of field group.
   * @returns The value for the visibility property of the object status
   */
  var getErrorStatusTextVisibilityFormatter = function (semanticKeyHasDraftIndicator, aFilteredMessages, columnName, isSemanticKeyInFieldGroup) {
    var bStatusVisibility = false;
    if (aFilteredMessages && aFilteredMessages.length > 0 && (isSemanticKeyInFieldGroup || columnName === semanticKeyHasDraftIndicator)) {
      var sCurrentContextPath = this.getBindingContext() ? this.getBindingContext().getPath() : undefined;
      aFilteredMessages.forEach(function (oMessage) {
        if (oMessage.type === "Error" && oMessage.aTargets[0].indexOf(sCurrentContextPath) === 0) {
          bStatusVisibility = true;
          return bStatusVisibility;
        }
      });
    }
    return bStatusVisibility;
  };
  getErrorStatusTextVisibilityFormatter.__functionName = "sap.fe.core.formatters.TableFormatter#getErrorStatusTextVisibilityFormatter";

  /**
   * rowHighlighting
   *
   * @param {object} this The context
   * @param {string|number} CriticalityValue The criticality value
   * @param {number} messageLastUpdate Timestamp of the last message that was created. It's defined as an input value, but not used in the body of the function
   * It is used to refresh the formatting of the table each time a new message is updated
   * @returns {object} The value from the inner function
   */

  var rowHighlighting = function (criticalityValue, aFilteredMessages, hasActiveEntity, isActiveEntity, isDraftRoot) {
    var isNewObject = !hasActiveEntity && !isActiveEntity;
    var iHighestCriticalityValue = -1;
    if (aFilteredMessages && aFilteredMessages.length > 0) {
      var _this$getBindingConte;
      var sCurrentContextPath = (_this$getBindingConte = this.getBindingContext()) === null || _this$getBindingConte === void 0 ? void 0 : _this$getBindingConte.getPath();
      aFilteredMessages.forEach(function (oMessage) {
        if (oMessage.aTargets[0].indexOf(sCurrentContextPath) === 0 && iHighestCriticalityValue < getMessagetypeOrder(oMessage.type)) {
          iHighestCriticalityValue = getMessagetypeOrder(oMessage.type);
          criticalityValue = oMessage.type;
        }
      });
    }
    if (typeof criticalityValue !== "string") {
      switch (criticalityValue) {
        case 1:
          criticalityValue = MessageType.Error;
          break;
        case 2:
          criticalityValue = MessageType.Warning;
          break;
        case 3:
          criticalityValue = MessageType.Success;
          break;
        case 5:
          criticalityValue = MessageType.Information;
          break;
        default:
          criticalityValue = MessageType.None;
      }
    }
    if (criticalityValue === MessageType.None) {
      if (isDraftRoot === "true" && isNewObject) {
        return MessageType.Information;
      } else {
        return MessageType.None;
      }
    } else {
      return criticalityValue;
    }
  };
  rowHighlighting.__functionName = "sap.fe.core.formatters.TableFormatter#rowHighlighting";
  var navigatedRow = function (sDeepestPath) {
    var _this$getBindingConte2;
    var sPath = (_this$getBindingConte2 = this.getBindingContext()) === null || _this$getBindingConte2 === void 0 ? void 0 : _this$getBindingConte2.getPath();
    if (sPath && sDeepestPath) {
      return sDeepestPath.indexOf(sPath) === 0;
    } else {
      return false;
    }
  };
  navigatedRow.__functionName = "sap.fe.core.formatters.TableFormatter#navigatedRow";
  function isRatingIndicator(oControl) {
    if (oControl.isA("sap.fe.core.controls.FieldWrapper")) {
      var vContentDisplay = Array.isArray(oControl.getContentDisplay()) ? oControl.getContentDisplay()[0] : oControl.getContentDisplay();
      if (vContentDisplay && vContentDisplay.isA("sap.m.RatingIndicator")) {
        return true;
      }
    }
    return false;
  }
  function _updateStyleClassForRatingIndicator(oFieldWrapper, bLast) {
    var vContentDisplay = Array.isArray(oFieldWrapper.getContentDisplay()) ? oFieldWrapper.getContentDisplay()[0] : oFieldWrapper.getContentDisplay();
    var vContentEdit = Array.isArray(oFieldWrapper.getContentEdit()) ? oFieldWrapper.getContentEdit()[0] : oFieldWrapper.getContentEdit();
    if (bLast) {
      vContentDisplay.addStyleClass("sapUiNoMarginBottom");
      vContentDisplay.addStyleClass("sapUiNoMarginTop");
      vContentEdit.removeStyleClass("sapUiTinyMarginBottom");
    } else {
      vContentDisplay.addStyleClass("sapUiNoMarginBottom");
      vContentDisplay.removeStyleClass("sapUiNoMarginTop");
      vContentEdit.addStyleClass("sapUiTinyMarginBottom");
    }
  }
  function getVBoxVisibility() {
    var aItems = this.getItems();
    var bLastElementFound = false;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    for (var index = aItems.length - 1; index >= 0; index--) {
      if (!bLastElementFound) {
        if (args[index] !== true) {
          bLastElementFound = true;
          if (isRatingIndicator(aItems[index])) {
            _updateStyleClassForRatingIndicator(aItems[index], true);
          } else {
            aItems[index].removeStyleClass("sapUiTinyMarginBottom");
          }
        }
      } else if (isRatingIndicator(aItems[index])) {
        _updateStyleClassForRatingIndicator(aItems[index], false);
      } else {
        aItems[index].addStyleClass("sapUiTinyMarginBottom");
      }
    }
    return true;
  }
  getVBoxVisibility.__functionName = "sap.fe.core.formatters.TableFormatter#getVBoxVisibility";

  // See https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters for more detail on this weird syntax
  /**
   * Collection of table formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  var tableFormatter = function (sName) {
    if (tableFormatter.hasOwnProperty(sName)) {
      for (var _len2 = arguments.length, oArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        oArgs[_key2 - 1] = arguments[_key2];
      }
      return tableFormatter[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  tableFormatter.validateCreationRowFields = validateCreationRowFields;
  tableFormatter.rowHighlighting = rowHighlighting;
  tableFormatter.navigatedRow = navigatedRow;
  tableFormatter.getErrorStatusTextVisibilityFormatter = getErrorStatusTextVisibilityFormatter;
  tableFormatter.getVBoxVisibility = getVBoxVisibility;
  tableFormatter.isRatingIndicator = isRatingIndicator; // for unit tests

  /**
   * @global
   */
  return tableFormatter;
}, true);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,