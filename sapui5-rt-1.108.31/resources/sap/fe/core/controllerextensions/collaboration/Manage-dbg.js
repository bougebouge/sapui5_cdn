/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/m/MessageToast", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/library"], function (CollaborationCommon, MessageToast, Core, Fragment, coreLibrary) {
  "use strict";

  var _exports = {};
  var UserStatus = CollaborationCommon.UserStatus;
  var UserEditingState = CollaborationCommon.UserEditingState;
  var shareObject = CollaborationCommon.shareObject;
  var getText = CollaborationCommon.getText;
  var CollaborationUtils = CollaborationCommon.CollaborationUtils;
  var createUserDetailsPopover = function (view) {
    try {
      var popoverPromise = Fragment.load({
        id: "manageCollaborationDraft",
        // todo should be view id
        name: "sap.fe.core.controllerextensions.collaboration.UserDetails"
      });
      return Promise.resolve(popoverPromise.then(function (popover) {
        view.addDependent(popover);
        return popover;
      }).catch(function () {
        throw "not this time";
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var showUserDetails = function (event, view) {
    try {
      function _temp7() {
        popover.setBindingContext(source.getBindingContext("internal"), "internal");
        popover.openBy(source, false);
      }
      var source = event.getSource();
      var popover = byId("userDetails");
      var _temp8 = function () {
        if (!popover) {
          return Promise.resolve(createUserDetailsPopover(view)).then(function (_createUserDetailsPop) {
            popover = _createUserDetailsPop;
          });
        }
      }();
      return Promise.resolve(_temp8 && _temp8.then ? _temp8.then(_temp7) : _temp7(_temp8));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _exports.showUserDetails = showUserDetails;
  var readInvitedUsers = function (view) {
    try {
      var model = view.getModel();
      // TODO: inform model colleagues on missing TS definition
      var parameters = {
        $select: "UserID,UserDescription,UserEditingState"
      };
      var invitedUserList = model.bindList("DraftAdministrativeData/DraftAdministrativeUser", view.getBindingContext(), [], [], parameters);
      var internalModelContext = view.getBindingContext("internal");
      // TODO: limit?
      return Promise.resolve(invitedUserList.requestContexts(0, 100).then(function (aContexts) {
        var invitedUsers = [];
        var activeUsers = view.getModel("internal").getProperty("/collaboration/activeUsers") || [];
        var me = CollaborationUtils.getMe(view);
        var userStatus;
        if ((aContexts === null || aContexts === void 0 ? void 0 : aContexts.length) > 0) {
          aContexts.forEach(function (oContext) {
            var userData = oContext.getObject();
            var isMe = (me === null || me === void 0 ? void 0 : me.id) === userData.UserID;
            var isActive = activeUsers.find(function (u) {
              return u.id === userData.UserID;
            });
            var userDescription = userData.UserDescription || userData.UserID;
            var initials = CollaborationUtils.formatInitials(userDescription);
            userDescription += isMe ? " (".concat(CollaborationUtils.getText("C_COLLABORATIONDRAFT_YOU"), ")") : "";
            switch (userData.UserEditingState) {
              case UserEditingState.NoChanges:
                userStatus = isActive ? UserStatus.CurrentlyEditing : UserStatus.NoChangesMade;
                break;
              case UserEditingState.InProgress:
                userStatus = isActive ? UserStatus.CurrentlyEditing : UserStatus.ChangesMade;
                break;
              default:
                userStatus = UserStatus.NotYetInvited;
            }
            var user = {
              id: userData.UserID,
              name: userDescription,
              status: userStatus,
              color: CollaborationUtils.getUserColor(userData.UserID, activeUsers, invitedUsers),
              initials: initials,
              me: isMe
            };
            invitedUsers.push(user);
          });
        } else {
          //not yet shared, just add me
          invitedUsers.push(me);
        }
        internalModelContext.setProperty("collaboration/UserID", "");
        internalModelContext.setProperty("collaboration/UserDescription", "");
        internalModelContext.setProperty("collaboration/invitedUsers", invitedUsers);
      }).catch(function () {
        // TODO: handle this case, close dialog?
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _exports.readInvitedUsers = readInvitedUsers;
  var createManageCollaborationDialog = function (view) {
    try {
      var pDialog = view.getController().getExtensionAPI().loadFragment({
        name: "sap.fe.core.controllerextensions.collaboration.ManageDialog",
        id: "manageCollaborationDraft",
        controller: {
          share: share,
          addUser: addUser,
          removeUser: removeUser,
          close: closeDialog,
          addUserChanged: addUserChanged,
          formatUserStatus: formatUserStatus,
          formatUserStatusColor: formatUserStatusColor
        }
      });
      return Promise.resolve(pDialog.then(function (dialog) {
        view.addDependent(dialog);
        return dialog;
      }).catch(function () {
        throw "not this time";
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var ValueState = coreLibrary.ValueState;
  var openManageDialog = function (view) {
    try {
      function _temp3() {
        return Promise.resolve(readInvitedUsers(view)).then(function () {
          dialog.open();
        });
      }
      var dialog = byId("dialog");
      var _temp4 = function () {
        if (!dialog) {
          return Promise.resolve(createManageCollaborationDialog(view)).then(function (_createManageCollabor) {
            dialog = _createManageCollabor;
          });
        }
      }();
      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  _exports.openManageDialog = openManageDialog;
  function addUser(event) {
    var addButton = event.getSource();
    var internalModelContext = addButton.getBindingContext("internal");
    var invitedUsers = internalModelContext.getProperty("invitedUsers") || [];
    var activeUsers = addButton.getModel("internal").getProperty("/collaboration/activeUsers");
    var newUser = {
      id: internalModelContext === null || internalModelContext === void 0 ? void 0 : internalModelContext.getProperty("UserID"),
      name: internalModelContext === null || internalModelContext === void 0 ? void 0 : internalModelContext.getProperty("UserDescription")
    };
    if (!(invitedUsers.findIndex(function (user) {
      return user.id === newUser.id;
    }) > -1 || newUser.id === newUser.name && newUser.id === "")) {
      newUser.name = newUser.name || newUser.id;
      newUser.initials = CollaborationUtils.formatInitials(newUser.name);
      newUser.color = CollaborationUtils.getUserColor(newUser.id, activeUsers, invitedUsers);
      newUser.transient = true;
      newUser.status = UserStatus.NotYetInvited;
      invitedUsers.unshift(newUser);
      internalModelContext.setProperty("invitedUsers", invitedUsers);
      internalModelContext.setProperty("UserID", "");
      internalModelContext.setProperty("UserDescription", "");
    }
  }
  function addUserChanged(event) {
    var userInput = event.getSource();
    event.getParameter("promise").then(function (newUserId) {
      var internalModelContext = userInput.getBindingContext("internal");
      var invitedUsers = internalModelContext.getProperty("invitedUsers") || [];
      if (invitedUsers.findIndex(function (user) {
        return user.id === newUserId;
      }) > -1) {
        userInput.setValueState("Error");
        userInput.setValueStateText(getText("C_COLLABORATIONDRAFT_INVITATION_USER_ERROR"));
      } else {
        userInput.setValueState("None");
        userInput.setValueStateText("");
      }
    }).catch(function () {
      throw "User couldn't be determined at all";
    });
  }
  function removeUser(event) {
    removeUserFromList(event.getSource());
  }
  function removeUserFromList(item) {
    var internalModelContext = item.getBindingContext("pageInternal");
    var deleteUserID = item.getBindingContext("internal").getProperty("id");
    var invitedUsers = internalModelContext.getProperty("collaboration/invitedUsers");
    invitedUsers = invitedUsers.filter(function (user) {
      return user.id !== deleteUserID;
    });
    internalModelContext.setProperty("collaboration/invitedUsers", invitedUsers);
  }
  function byId(id) {
    return Core.byId("manageCollaborationDraft--".concat(id));
  }
  function closeDialog() {
    byId("dialog").close();
  }
  function share(event) {
    var users = [];
    var source = event.getSource();
    var bindingContext = source.getBindingContext();
    var contexts = byId("userList").getBinding("items").getContexts();
    contexts.forEach(function (context) {
      users.push({
        UserID: context.getProperty("id"),
        UserAccessRole: "O" // For now according to UX every user retrieves the owner role
      });
    });

    shareObject(bindingContext, users).then(function () {
      MessageToast.show(getText("C_COLLABORATIONDRAFT_INVITATION_SUCCESS_TOAST"));
    }).catch(function () {
      MessageToast.show(getText("C_COLLABORATIONDRAFT_INVITATION_FAILED_TOAST"));
    });
    closeDialog();
  }
  function formatUserStatus(userStatus) {
    switch (userStatus) {
      case UserStatus.CurrentlyEditing:
        return getText("C_COLLABORATIONDRAFT_USER_CURRENTLY_EDITING");
      case UserStatus.ChangesMade:
        return getText("C_COLLABORATIONDRAFT_USER_CHANGES_MADE");
      case UserStatus.NoChangesMade:
        return getText("C_COLLABORATIONDRAFT_USER_NO_CHANGES_MADE");
      case UserStatus.NotYetInvited:
      default:
        return getText("C_COLLABORATIONDRAFT_USER_NOT_YET_INVITED");
    }
  }
  function formatUserStatusColor(userStatus) {
    switch (userStatus) {
      case UserStatus.CurrentlyEditing:
        return ValueState.Success;
      case UserStatus.ChangesMade:
        return ValueState.Warning;
      case UserStatus.NoChangesMade:
      case UserStatus.NotYetInvited:
      default:
        return ValueState.Information;
    }
  }
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,