/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingToolkit"], function (BindingToolkit) {
  "use strict";

  var _exports = {};
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var equal = BindingToolkit.equal;
  var and = BindingToolkit.and;
  var UI = {
    IsCreateMode: pathInModel("createMode", "ui"),
    IsCreateModeSticky: pathInModel("createModeSticky", "ui"),
    IsEditable: pathInModel("/isEditable", "ui"),
    IsTransientBinding: equal(pathInModel("@$ui5.context.isTransient"), true),
    IsTotal: equal(pathInModel("@$ui5.node.isTotal"), true),
    IsExpanded: equal(pathInModel("@$ui5.node.isExpanded"), true),
    NodeLevel: pathInModel("@$ui5.node.level"),
    IsInactive: pathInModel("@$ui5.context.isInactive")
  };
  _exports.UI = UI;
  var Entity = {
    HasDraft: pathInModel("HasDraftEntity"),
    HasActive: pathInModel("HasActiveEntity"),
    IsActive: pathInModel("IsActiveEntity")
  };
  _exports.Entity = Entity;
  var Draft = {
    IsNewObject: and(not(Entity.HasActive), not(Entity.IsActive)),
    HasNoDraftForCurrentUser: or(not(Entity.HasDraft), and(Entity.HasDraft, not(pathInModel("DraftAdministrativeData/DraftIsCreatedByMe"))))
  };

  /**
   * Gets a singleton based on the fully qualified name.
   *
   * @param convertedTypes The converted types
   * @param fullyQualifiedName The fully qualified name of the singleton
   * @returns The singleton instance.
   */
  _exports.Draft = Draft;
  function getSingleton(convertedTypes, fullyQualifiedName) {
    return convertedTypes.singletons.find(function (singleton) {
      return singleton.fullyQualifiedName === fullyQualifiedName;
    });
  }

  /**
   * Function to adjust singleton paths in the annotation.
   * The absolute path via EntityContainer needs to be shortened to /SingletonName/PropertyName.
   *
   * @param path The path configured in the annotation
   * @param convertedTypes The instance of the converter context
   * @param visitedNavigationPaths The array of visited navigation paths
   * @returns The adjusted path for the reference of the singleton property, otherwise the input path itself.
   */
  var singletonPathVisitor = function (path, convertedTypes, visitedNavigationPaths) {
    // Determine whether the path is absolute and whether it points to a singleton.
    if (path.indexOf("/") === 0) {
      var parts = path.split("/").filter(Boolean),
        propertyName = parts.pop(),
        entitySetName = parts.join("/"),
        singleton = getSingleton(convertedTypes, entitySetName);
      if (singleton) {
        // Set the absolute binding path to access the singleton property
        path = "/".concat(singleton.name, "/").concat(propertyName);
      }
    } else {
      // Not a singleton reference.
      // Prefix the navigation path to the property path
      var localPath = visitedNavigationPaths.concat();
      localPath.push(path);
      path = localPath.join("/");
    }
    return path;
  };

  /**
   * Function to adjust property paths defined in the binding of an action.
   *
   * The binding parameter name needs to be removed. Singleton paths need to be resolved.
   *
   * @param path The path configured in the annotation
   * @param converterContext The instance of the converter context
   * @param bindingParameterFullName The fully qualified name of the binding parameter
   * @returns The adjusted property path
   */
  _exports.singletonPathVisitor = singletonPathVisitor;
  function bindingContextPathVisitor(path, converterContext, bindingParameterFullName) {
    var bindingParameterPrefix = "".concat(bindingParameterFullName === null || bindingParameterFullName === void 0 ? void 0 : bindingParameterFullName.substring(bindingParameterFullName.lastIndexOf("/") + 1), "/");
    // Strip the binding parameter name from OperationAvailable path
    // For e.g. _it/property1 --> property1
    if (path.startsWith(bindingParameterPrefix)) {
      return path.substring(bindingParameterPrefix.length);
    }
    return singletonPathVisitor(path, converterContext.getConvertedTypes(), []);
  }
  _exports.bindingContextPathVisitor = bindingContextPathVisitor;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,