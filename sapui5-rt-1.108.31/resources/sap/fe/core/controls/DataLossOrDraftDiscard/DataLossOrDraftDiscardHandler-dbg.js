/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/model/json/JSONModel"], function (Log, Fragment, XMLPreprocessor, XMLTemplateProcessor, JSONModel) {
  "use strict";

  var _exports = {};
  var DraftDataLossOptions;
  (function (DraftDataLossOptions) {
    DraftDataLossOptions["Save"] = "draftDataLossOptionSave";
    DraftDataLossOptions["Keep"] = "draftDataLossOptionKeep";
    DraftDataLossOptions["Discard"] = "draftDataLossOptionDiscard";
  })(DraftDataLossOptions || (DraftDataLossOptions = {}));
  var fnOnDataLossConfirmed;
  var fnOnDataLossCancel;
  function fnDataLossConfirmation(onDataLossOk, onDataLossCancel, controller, skipBindingToView) {
    // Open the data loss popup and after processing the selected function finally call
    // onDataLossConfirmed which resolves the promise and leads to processing of the originally
    // triggered action like e.g. a back navigation
    var dataLossPopup;
    fnOnDataLossConfirmed = onDataLossOk;
    fnOnDataLossCancel = onDataLossCancel;
    var fragmentName = "sap.fe.core.controls.DataLossOrDraftDiscard.DataLossDraft";
    var view = controller.getView();
    var fragmentController = {
      onDataLossOk: function () {
        var selectedKey = getSelectedKey(dataLossPopup);
        if (selectedKey === DraftDataLossOptions.Save) {
          saveDocument(controller).then(fnOnDataLossConfirmed).catch(function (error) {
            Log.error("Error while saving document", error);
          });
          dataLossPopup.close();
        } else if (selectedKey === DraftDataLossOptions.Keep) {
          fnOnDataLossConfirmed();
          dataLossPopup.close();
        } else if (selectedKey === DraftDataLossOptions.Discard) {
          discardDraft(controller, skipBindingToView).then(fnOnDataLossConfirmed).catch(function (error) {
            Log.error("Error while discarding draft", error);
          });
          dataLossPopup.close();
        }
      },
      onDataLossCancel: function () {
        fnOnDataLossCancel();
        dataLossPopup.close();
      },
      setDataLossPopup: function (inDataLossPopup) {
        controller.dataLossPopup = inDataLossPopup;
      }
    };
    var i18nModel = view.getModel("sap.fe.i18n");
    var localThisModel = new JSONModel({}),
      preprocessorSettings = {
        bindingContexts: {
          "this": localThisModel.createBindingContext("/")
        },
        models: {
          "this": localThisModel,
          "i18n": i18nModel
        }
      };
    if (controller.dataLossPopup) {
      dataLossPopup = controller.dataLossPopup;
      dataLossPopup.open();
      selectAndFocusFirstEntry(dataLossPopup);
    } else {
      var dialogFragment = XMLTemplateProcessor.loadTemplate(fragmentName, "fragment");
      Promise.resolve(XMLPreprocessor.process(dialogFragment, {
        name: fragmentName
      }, preprocessorSettings)).then(function (fragment) {
        return Fragment.load({
          definition: fragment,
          controller: fragmentController
        });
      }).then(function (popup) {
        dataLossPopup = popup;
        popup.attachAfterOpen(function () {
          selectAndFocusFirstEntry(dataLossPopup);
        });
        view.addDependent(dataLossPopup);
        dataLossPopup.open();
        fragmentController.setDataLossPopup(dataLossPopup);
      }).catch(function (error) {
        Log.error("Error while opening the Discard Dialog fragment", error);
      });
    }
  }
  function performAfterDiscardorKeepDraft(processFunctionOnDatalossOk, processFunctionOnDatalossCancel, controller, skipBindingToView) {
    // Depending on if the user closed the data loss popup with Ok or Cancel,
    // execute the provided follow-up function and resolve or reject the promise
    return new Promise(function (resolve, reject) {
      var dataLossPopupOk = function (context) {
        var returnValue = processFunctionOnDatalossOk(context);
        resolve(returnValue);
      };
      var dataLossPopupCancel = function () {
        processFunctionOnDatalossCancel();
        reject();
      };
      fnDataLossConfirmation(dataLossPopupOk, dataLossPopupCancel, controller, skipBindingToView);
    });
  }
  _exports.performAfterDiscardorKeepDraft = performAfterDiscardorKeepDraft;
  function discardDraft(controller, skipBindingToView) {
    var context = controller.getView().getBindingContext();
    var params = {
      skipBackNavigation: true,
      skipDiscardPopover: true,
      skipBindingToView: skipBindingToView !== undefined ? skipBindingToView : true
    };
    return controller.editFlow.cancelDocument(context, params);
  }
  _exports.discardDraft = discardDraft;
  function saveDocument(controller) {
    var context = controller.getView().getBindingContext();
    // We check if we are on the OP and then call the internal _saveDocument from the OP controller
    // since here some special handling is done for creationRow before editFlow.saveDocument is called.
    // In case of a custom controller we directly call saveDocument from the editFlow
    if (controller.isA("sap.fe.templates.ObjectPage.ObjectPageController")) {
      return controller._saveDocument(context);
    } else {
      return controller.editFlow.saveDocument(context);
    }
  }
  _exports.saveDocument = saveDocument;
  function getSelectedKey(dataLossPopup) {
    // For not using control IDs we introduced customData in the fragment and
    // use it here for finding the correct list in the dialog and for
    // determining the selected option from the list
    var dataLossOptionsList = dataLossPopup.getContent().find(function (element) {
      return element.data("listIdentifier") === "draftDataLossOptionsList";
    });
    return dataLossOptionsList.getSelectedItem().data("itemKey");
  }
  _exports.getSelectedKey = getSelectedKey;
  function selectAndFocusFirstEntry(dataLossPopup) {
    // For not using control IDs we introduced customData in the fragment and
    // use it here for finding the correct list in the dialog.
    var dataLossOptionsList = dataLossPopup.getContent().find(function (element) {
      return element.data("listIdentifier") === "draftDataLossOptionsList";
    });
    // Preselect the first entry in the list
    var firstListItemOption = dataLossOptionsList.getItems()[0];
    dataLossOptionsList.setSelectedItem(firstListItemOption);
    // By default set the focus on the first button of the dialog
    dataLossPopup.getButtons()[0].focus();
  }
  _exports.selectAndFocusFirstEntry = selectAndFocusFirstEntry;
  return {
    performAfterDiscardorKeepDraft: performAfterDiscardorKeepDraft,
    discardDraft: discardDraft,
    saveDocument: saveDocument,
    getSelectedKey: getSelectedKey,
    selectAndFocusFirstEntry: selectAndFocusFirstEntry
  };
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,