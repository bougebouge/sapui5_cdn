/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/SemanticDateOperators", "sap/ui/core/routing/HashChanger"], function (Log, CommonUtils, SemanticDateOperators, HashChanger) {
  "use strict";

  function getCountUrl(oController) {
    var _oController$_getTabl;
    var oTable = (_oController$_getTabl = oController._getTable) === null || _oController$_getTabl === void 0 ? void 0 : _oController$_getTabl.call(oController);
    if (!oTable) {
      return "";
    }
    var oBinding = oTable.getRowBinding() || oTable.getBinding("items");
    var sDownloadUrl = oBinding && oBinding.getDownloadUrl() || "";
    var aSplitUrl = sDownloadUrl.split("?");
    var baseUrl = "".concat(aSplitUrl[0], "/$count?");
    // getDownloadUrl() returns url with $select, $expand which is not supported when /$count is used to get the record count. only $apply, $search, $filter is supported
    // ?$count=true returns count in a format which is not supported by FLP yet.
    // currently supported format for v4 is ../count.. only (where tile preview will still not work)
    var aSupportedParams = [];
    if (aSplitUrl.length > 1) {
      var urlParams = aSplitUrl[1];
      urlParams.split("&").forEach(function (urlParam) {
        var aUrlParamParts = urlParam.split("=");
        switch (aUrlParamParts[0]) {
          case "$apply":
          case "$search":
          case "$filter":
            aSupportedParams.push(urlParam);
        }
      });
    }
    return baseUrl + aSupportedParams.join("&");
  }
  function getShareEmailUrl() {
    var oUShellContainer = sap.ushell && sap.ushell.Container;
    if (oUShellContainer) {
      return oUShellContainer.getFLPUrlAsync(true).then(function (sFLPUrl) {
        return sFLPUrl;
      }).catch(function (sError) {
        Log.error("Could not retrieve cFLP URL for the sharing dialog (dialog will not be opened)", sError);
      });
    } else {
      return Promise.resolve(document.URL);
    }
  }
  function getSaveAsTileServiceUrl(oController) {
    var oFilterBar = oController._getFilterBarControl();
    if (oFilterBar) {
      var oConditions = oFilterBar.getFilterConditions();
      var bSaveAsTileServiceUrlAllowed = SemanticDateOperators.hasSemanticDateOperations(oConditions);
      if (bSaveAsTileServiceUrlAllowed) {
        return getCountUrl(oController);
      }
    }
    return "";
  }
  function getJamUrl() {
    var sHash = HashChanger.getInstance().getHash();
    var sBasePath = HashChanger.getInstance().hrefForAppSpecificHash ? HashChanger.getInstance().hrefForAppSpecificHash("") : "";
    var sJamUrl = sHash ? sBasePath + sHash : window.location.hash;
    // in case we are in cFLP scenario, the application is running
    // inside an iframe, and there for we need to get the cFLP URL
    // and not 'document.URL' that represents the iframe URL
    if (sap.ushell && sap.ushell.Container && sap.ushell.Container.runningInIframe && sap.ushell.Container.runningInIframe()) {
      sap.ushell.Container.getFLPUrl(true).then(function (sUrl) {
        return sUrl.substr(0, sUrl.indexOf("#")) + sJamUrl;
      }).catch(function (sError) {
        Log.error("Could not retrieve cFLP URL for the sharing dialog (dialog will not be opened)", sError);
      });
    } else {
      return window.location.origin + window.location.pathname + sJamUrl;
    }
  }
  var ShareOverride = {
    adaptShareMetadata: function (oShareMetadata) {
      var _this = this;
      Promise.resolve(getJamUrl()).then(function (sJamUrl) {
        var oAppComponent = CommonUtils.getAppComponent(_this.base.getView());
        var oMetadata = oAppComponent.getMetadata();
        var oUIManifest = oMetadata.getManifestEntry("sap.ui");
        var sIcon = oUIManifest && oUIManifest.icons && oUIManifest.icons.icon || "";
        var oAppManifest = oMetadata.getManifestEntry("sap.app");
        var sTitle = oAppManifest && oAppManifest.title || "";
        // TODO: check if there is any semantic date used before adding serviceURL as BLI:FIORITECHP1-18023
        oShareMetadata.tile = {
          icon: sIcon,
          title: sTitle,
          queryUrl: getSaveAsTileServiceUrl(_this.base.getView().getController())
        };
        oShareMetadata.title = document.title;
        oShareMetadata.jam.url = sJamUrl;
        // MS Teams collaboration does not want to allow further changes to the URL
        // so update colloborationInfo model at LR override to ignore further extension changes at multiple levels
        var collaborationInfoModel = _this.base.getView().getModel("collaborationInfo");
        collaborationInfoModel.setProperty("/url", oShareMetadata.url);
        collaborationInfoModel.setProperty("/appTitle", oShareMetadata.title);
      }).catch(function (error) {
        Log.error(error);
      });
      return Promise.resolve(getShareEmailUrl()).then(function (sFLPUrl) {
        oShareMetadata.email.url = sFLPUrl;
        return oShareMetadata;
      });
    }
  };
  return ShareOverride;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,