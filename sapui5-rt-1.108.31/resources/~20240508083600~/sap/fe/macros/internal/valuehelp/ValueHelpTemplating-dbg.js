/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters"], function (BindingToolkit, StableIdHelper, DataModelPathHelper, PropertyHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getDisplayMode = UIFormatters.getDisplayMode;
  var isUnit = PropertyHelper.isUnit;
  var isCurrency = PropertyHelper.isCurrency;
  var hasValueListForValidation = PropertyHelper.hasValueListForValidation;
  var hasValueHelpWithFixedValues = PropertyHelper.hasValueHelpWithFixedValues;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var hasDateType = PropertyHelper.hasDateType;
  var checkFilterExpressionRestrictions = DataModelPathHelper.checkFilterExpressionRestrictions;
  var generate = StableIdHelper.generate;
  var compileExpression = BindingToolkit.compileExpression;
  /**
   * Retrieve the displayMode for the value help.
   * The main rule is that if a property is used in a VHTable then we don't want to display the text arrangement directly.
   *
   * @param propertyPath The current property
   * @param isValueHelpWithFixedValues The value help is a drop-down list
   * @returns The target displayMode
   */
  var getValueHelpTableDisplayMode = function (propertyPath, isValueHelpWithFixedValues) {
    var _propertyPath$targetO, _propertyPath$targetO2, _oTextAnnotation$anno, _oTextAnnotation$anno2, _oTextAnnotation$anno3;
    var sDisplayMode = getDisplayMode(propertyPath);
    var oTextAnnotation = (_propertyPath$targetO = propertyPath.targetObject.annotations) === null || _propertyPath$targetO === void 0 ? void 0 : (_propertyPath$targetO2 = _propertyPath$targetO.Common) === null || _propertyPath$targetO2 === void 0 ? void 0 : _propertyPath$targetO2.Text;
    var oTextArrangementAnnotation = typeof oTextAnnotation !== "string" && (oTextAnnotation === null || oTextAnnotation === void 0 ? void 0 : (_oTextAnnotation$anno = oTextAnnotation.annotations) === null || _oTextAnnotation$anno === void 0 ? void 0 : (_oTextAnnotation$anno2 = _oTextAnnotation$anno.UI) === null || _oTextAnnotation$anno2 === void 0 ? void 0 : (_oTextAnnotation$anno3 = _oTextAnnotation$anno2.TextArrangement) === null || _oTextAnnotation$anno3 === void 0 ? void 0 : _oTextAnnotation$anno3.toString());
    if (isValueHelpWithFixedValues) {
      return oTextAnnotation && typeof oTextAnnotation !== "string" && oTextAnnotation.path ? sDisplayMode : "Value";
    } else {
      // Only explicit defined TextArrangements in a Value Help with Dialog are considered
      return oTextArrangementAnnotation ? sDisplayMode : "Value";
    }
  };

  /**
   * Method to return delegate property of Value Help.
   *
   * @function
   * @name getDelegateConfiguration
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param propertyPath The current property path
   * @param conditionModelName Condition model of the Value Help
   * @returns The expression needed to configure the delegate
   */
  _exports.getValueHelpTableDisplayMode = getValueHelpTableDisplayMode;
  var getDelegateConfiguration = function (propertyPath, conditionModelName) {
    var delegateConfiguration = {
      name: "sap/fe/macros/field/FieldValueHelpDelegate",
      payload: {
        propertyPath: propertyPath,
        conditionModel: conditionModelName
      }
    };
    return compileExpression(delegateConfiguration);
  };

  /**
   * Method to return delegate property of Value Help.
   *
   * @function
   * @name getDelegateConfigurationNew
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param propertyPath The current property path
   * @param conditionModelName Condition model of the Value Help
   * @param originalPropertyPath The original property path
   * @param requestGroupId The requestGroupId to use for requests
   * @param useMultiValueField If true the value help is for a multi value Field
   * @returns The expression needed to configure the delegate
   */
  _exports.getDelegateConfiguration = getDelegateConfiguration;
  var getDelegateConfigurationNew = function (propertyPath, conditionModelName, originalPropertyPath, requestGroupId) {
    var useMultiValueField = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var isUnitValueHelp = propertyPath !== originalPropertyPath;
    var delegateConfiguration = {
      name: "sap/fe/macros/valuehelp/ValueHelpDelegate",
      payload: {
        propertyPath: propertyPath,
        isUnitValueHelp: isUnitValueHelp,
        conditionModel: conditionModelName,
        requestGroupId: requestGroupId,
        useMultiValueField: useMultiValueField,
        qualifiers: {},
        valueHelpQualifier: ""
      }
    };
    return compileExpression(delegateConfiguration); // for some reason "qualifiers: {}" is ignored here
  };

  /**
   * Method to generate the ID for Value Help.
   *
   * @function
   * @name generateID
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param sFlexId Flex ID of the current object
   * @param sIdPrefix Prefix for the ValueHelp ID
   * @param sOriginalPropertyName Name of the property
   * @param sPropertyName Name of the ValueHelp Property
   * @returns The Id generated for the ValueHelp
   */
  _exports.getDelegateConfigurationNew = getDelegateConfigurationNew;
  var generateID = function (sFlexId, sIdPrefix, sOriginalPropertyName, sPropertyName) {
    if (sFlexId) {
      return sFlexId;
    }
    var sProperty = sPropertyName;
    if (sOriginalPropertyName !== sPropertyName) {
      sProperty = "".concat(sOriginalPropertyName, "::").concat(sPropertyName);
    }
    return generate([sIdPrefix, sProperty]);
  };

  /**
   * Method to check if a property needs to be validated or not when used in the valuehelp.
   *
   * @function
   * @name requiresValidation
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param  oProperty ValueHelp property type annotations
   * @returns `true` if the value help need to be validated
   */
  _exports.generateID = generateID;
  var requiresValidation = function (oProperty) {
    return hasValueHelpWithFixedValues(oProperty) || hasValueListForValidation(oProperty) || hasValueHelp(oProperty) && (isUnit(oProperty) || isCurrency(oProperty));
  };

  /**
   * Method to decide if case sensitive filter requests shall be used or not.
   *
   *  If the backend has FilterFunctions Capabilies for the service or the entity, we check it includes support for tolower.
   *
   * @function
   * @name useCaseSensitiveFilterRequests
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param oDataModelPath Current data model pathÂ·
   * @param aEntityContainerFilterFunctions Filter functions of entity container
   * @returns `true` if the entity set or service supports case sensitive filter requests
   */
  _exports.requiresValidation = requiresValidation;
  var useCaseSensitiveFilterRequests = function (oDataModelPath, aEntityContainerFilterFunctions) {
    var _oDataModelPath$targe, _oDataModelPath$targe2, _oDataModelPath$targe3;
    var filterFunctions = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : (_oDataModelPath$targe = oDataModelPath.targetEntitySet) === null || _oDataModelPath$targe === void 0 ? void 0 : (_oDataModelPath$targe2 = _oDataModelPath$targe.annotations) === null || _oDataModelPath$targe2 === void 0 ? void 0 : (_oDataModelPath$targe3 = _oDataModelPath$targe2.Capabilities) === null || _oDataModelPath$targe3 === void 0 ? void 0 : _oDataModelPath$targe3.FilterFunctions) || aEntityContainerFilterFunctions;
    return filterFunctions ? !(filterFunctions.indexOf("tolower") > -1) : true;
  };
  _exports.useCaseSensitiveFilterRequests = useCaseSensitiveFilterRequests;
  var isSemanticDateRange = function (oDataModelPath) {
    var targetProperty = oDataModelPath.targetObject;
    var targetRestrictions = checkFilterExpressionRestrictions(oDataModelPath, ["SingleRange"]);
    return hasDateType(targetProperty) && compileExpression(targetRestrictions);
  };
  _exports.isSemanticDateRange = isSemanticDateRange;
  var shouldShowConditionPanel = function (oDataModelPath) {
    return compileExpression(checkFilterExpressionRestrictions(oDataModelPath, ["SingleValue", "MultiValue"])) === "false";
  };
  _exports.shouldShowConditionPanel = shouldShowConditionPanel;
  var getColumnDataProperty = function (sValueListProperty, propertyPath) {
    var _propertyPath$targetO3, _propertyPath$targetO4, _propertyPath$targetO5, _propertyPath$targetO6, _propertyPath$targetO7, _propertyPath$targetO8;
    if (propertyPath !== null && propertyPath !== void 0 && (_propertyPath$targetO3 = propertyPath.targetObject) !== null && _propertyPath$targetO3 !== void 0 && (_propertyPath$targetO4 = _propertyPath$targetO3.annotations) !== null && _propertyPath$targetO4 !== void 0 && (_propertyPath$targetO5 = _propertyPath$targetO4.Common) !== null && _propertyPath$targetO5 !== void 0 && _propertyPath$targetO5.Text && (_propertyPath$targetO6 = propertyPath.targetObject.annotations.Common.Text) !== null && _propertyPath$targetO6 !== void 0 && (_propertyPath$targetO7 = _propertyPath$targetO6.annotations) !== null && _propertyPath$targetO7 !== void 0 && (_propertyPath$targetO8 = _propertyPath$targetO7.UI) !== null && _propertyPath$targetO8 !== void 0 && _propertyPath$targetO8.TextArrangement && propertyPath.targetObject.annotations.Common.Text.annotations.UI.TextArrangement.valueOf() === "UI.TextArrangementType/TextOnly") {
      return propertyPath.targetObject.annotations.Common.Text.path;
    }
    return sValueListProperty;
  };
  _exports.getColumnDataProperty = getColumnDataProperty;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,