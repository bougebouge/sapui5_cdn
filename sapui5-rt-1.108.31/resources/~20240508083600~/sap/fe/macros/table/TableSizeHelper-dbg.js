/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/base/util/ObjectPath", "sap/fe/core/templating/DisplayModeFormatter", "sap/m/Button", "sap/m/table/Util", "sap/ui/dom/units/Rem"], function (Log, ObjectPath, DisplayModeFormatter, Button, Util, Rem) {
  "use strict";

  var EDM_TYPE_MAPPING = DisplayModeFormatter.EDM_TYPE_MAPPING;
  var TableSizeHelper = {
    nbCalls: 0,
    oBtn: undefined,
    propertyHelper: undefined,
    init: function () {
      // Create a new button in static area sap.ui.getCore().getStaticAreaRef()
      this.nbCalls = this.nbCalls ? this.nbCalls : 0;
      this.nbCalls++;
      this.oBtn = this.oBtn ? this.oBtn : new Button().placeAt(sap.ui.getCore().getStaticAreaRef());
      // Hide button from accessibility tree
      this.oBtn.setVisible(false);
    },
    /**
     * Method to calculate button's width from a temp created button placed in static area.
     *
     * @param sText The text to masure inside the Button.
     * @returns The value of the Button width.
     */
    getButtonWidth: function (sText) {
      if (this.oBtn.getVisible() === false) {
        this.oBtn.setVisible(true);
      }
      this.oBtn.setText(sText);
      //adding missing styles from buttons inside a table
      // for sync rendering
      this.oBtn.rerender();
      var nButtonWidth = Rem.fromPx(this.oBtn.getDomRef().scrollWidth);
      this.oBtn.setVisible(false);
      return Math.round(nButtonWidth * 100) / 100;
    },
    /**
     * Method to calculate MDC Column's width.
     *
     * @param oProperty The Property or PropertyInfo Object for which the width will be calculated.
     * @private
     * @alias sap.fe.macros.TableSizeHelper
     * @returns The value of the Column width.
     */
    getMDCColumnWidth: function (oProperty) {
      var _EDM_TYPE_MAPPING;
      var propertyODataType = (_EDM_TYPE_MAPPING = EDM_TYPE_MAPPING[oProperty.typeConfig ? oProperty.typeConfig.className : oProperty.$Type]) === null || _EDM_TYPE_MAPPING === void 0 ? void 0 : _EDM_TYPE_MAPPING.type;
      var PropertyODataConstructor = propertyODataType ? ObjectPath.get(propertyODataType) : null;
      var instance = PropertyODataConstructor ? new PropertyODataConstructor() : null;
      var sSize = instance ? Util.calcColumnWidth(instance) : null;
      if (!sSize) {
        Log.error("Cannot compute the column width for property: ".concat(oProperty.name));
      }
      return sSize ? parseFloat(sSize.replace("Rem", "")) : 0;
    },
    _getPropertyHelperCache: function (sTableId) {
      return this.propertyHelper && this.propertyHelper[sTableId];
    },
    _setPropertyHelperCache: function (sTableId, oPropertyHelper) {
      this.propertyHelper = Object.assign({}, this.propertyHelper);
      this.propertyHelper[sTableId] = oPropertyHelper;
    },
    /**
     * Method to calculate  width of a DataFieldAnnotation object contained in a fieldgroup.
     *
     * @param oData DataFieldAnnotation object.
     * @param bShowDataFieldsLabel Label is displayed inside the field
     * @param aProperties Array containing all PropertyInfo objects.
     * @param oContext Context Object of the parent property.
     * @private
     * @alias sap.fe.macros.TableSizeHelper
     * @returns Object containing the width of the label and the width of the property.
     */
    getWidthForDataFieldForAnnotation: function (oData, bShowDataFieldsLabel, aProperties, oContext) {
      var oObject = oContext.getObject(oData.Target.$AnnotationPath),
        oValue = oObject.Value;
      var oTargetedProperty,
        nPropertyWidth = 0,
        fLabelWidth = 0;
      if (oValue) {
        oTargetedProperty = this._getPropertiesByPath(aProperties, oContext.getObject(oData.Target.$AnnotationPath).Value.$Path);
        var oVisualization = oContext.getObject(oData.Target.$AnnotationPath).Visualization;
        switch (oVisualization && oVisualization.$EnumMember) {
          case "com.sap.vocabularies.UI.v1.VisualizationType/Rating":
            var iTargetedValue = oContext.getObject(oData.Target.$AnnotationPath).TargetValue;
            nPropertyWidth = parseInt(iTargetedValue, 10) * 1.375;
            break;
          case "com.sap.vocabularies.UI.v1.VisualizationType/Progress":
          default:
            nPropertyWidth = 5;
        }
        var sLabel = oTargetedProperty ? oTargetedProperty.label : oData.Label || "";
        fLabelWidth = bShowDataFieldsLabel && sLabel ? TableSizeHelper.getButtonWidth(sLabel) : 0;
      } else if (oObject.$Type === "com.sap.vocabularies.Communication.v1.ContactType") {
        var propertyPath = oData.Target.$AnnotationPath.replace(/\/@.*/, "");
        var fullNameProperty = oContext.getObject(propertyPath + "/" + oObject.fn.$Path);
        nPropertyWidth = this.getMDCColumnWidth(fullNameProperty);
      } else {
        Log.error("Cannot compute width for type object: ".concat(oObject.$Type));
      }
      return {
        labelWidth: fLabelWidth,
        propertyWidth: nPropertyWidth
      };
    },
    /**
     * Method to calculate  width of a DataField object.
     *
     * @param {object} oData DataFieldAnnotation object.
     * @param {boolean} bShowDataFieldsLabel Label is displayed inside the field.
     * @param {Array} aProperties Array containing all PropertyInfo objects.
     * @param {object} oContext Context Object of the parent property.
     * @param {object} oTable The Table reference.
     * @private
     * @alias sap.fe.macros.TableSizeHelper
     * @returns {object} Object containing the width of the label and the width of the property.
     */

    getWidthForDataField: function (oData, bShowDataFieldsLabel, aProperties, oContext) {
      var oTargetedProperty = this._getPropertiesByPath(aProperties, oData.Value.$Path),
        oTextArrangementTarget = oContext.getObject("".concat(oData.Value.$Path, "@com.sap.vocabularies.Common.v1.Text")),
        oTextArrangementType = oContext.getObject("".concat(oData.Value.$Path, "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"));
      var nPropertyWidth = 0,
        fLabelWidth = 0;
      if (oTargetedProperty) {
        var TextArrangmentTargetWidth = 0;
        if (oTextArrangementTarget && oTextArrangementType) {
          var oTextArrangementTargetProperty = this._getPropertiesByPath(aProperties, oTextArrangementTarget.$Path);
          TextArrangmentTargetWidth = oTextArrangementTargetProperty && this.getMDCColumnWidth(oTextArrangementTargetProperty) - 1;
        }
        switch (oTextArrangementType && oTextArrangementType.$EnumMember) {
          case "com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst":
          case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
            nPropertyWidth = this.getMDCColumnWidth(oTargetedProperty) - 1 + TextArrangmentTargetWidth;
            break;
          case "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly":
            nPropertyWidth = TextArrangmentTargetWidth;
            break;
          case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
          default:
            nPropertyWidth = this.getMDCColumnWidth(oTargetedProperty) - 1;
        }
        var sLabel = oData.Label ? oData.Label : oTargetedProperty.label;
        fLabelWidth = bShowDataFieldsLabel && sLabel ? TableSizeHelper.getButtonWidth(sLabel) : 0;
      } else {
        Log.error("Cannot compute width for type object: ".concat(oData.$Type));
      }
      return {
        labelWidth: fLabelWidth,
        propertyWidth: nPropertyWidth
      };
    },
    _getPropertiesByPath: function (aProperties, sPath) {
      return aProperties.find(function (oProperty) {
        return oProperty.path === sPath;
      });
    },
    exit: function () {
      this.nbCalls--;
      if (this.nbCalls === 0) {
        this.oBtn.destroy();
        this.oBtn = null;
      }
    }
  };
  return TableSizeHelper;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,