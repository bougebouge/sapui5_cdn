/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/CommonUtils", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/macros/CommonHelper", "sap/ui/model/odata/v4/AnnotationHelper", "sap/base/util/JSTokenizer"], function (CommonUtils, ModelHelper, DisplayModeFormatter, CommonHelper, AnnotationHelper, JSTokenizer) {
  "use strict";

  var EDM_TYPE_MAPPING = DisplayModeFormatter.EDM_TYPE_MAPPING;
  var FilterFieldHelper = {
    //FilterField
    isRequiredInFilter: function (path, oDetails) {
      var oModel = oDetails.context.getModel(),
        sPropertyPath = oDetails.context.getPath(),
        sPropertyLocationPath = CommonHelper.getLocationForPropertyPath(oModel, sPropertyPath);
      var entitySetPath = ModelHelper.getEntitySetPath(sPropertyLocationPath, oModel);
      var sProperty,
        oFR,
        bIsRequired = oModel.getObject(entitySetPath + "/@com.sap.vocabularies.Common.v1.ResultContext");
      if (!bIsRequired) {
        if (typeof path === "string") {
          sProperty = path;
        } else {
          sProperty = oModel.getObject("".concat(sPropertyPath, "@sapui.name"));
        }
        oFR = CommonUtils.getFilterRestrictionsByPath(entitySetPath, oModel);
        bIsRequired = oFR && oFR.RequiredProperties && oFR.RequiredProperties.indexOf(sProperty) > -1;
      }
      return bIsRequired;
    },
    maxConditions: function (path, oDetails) {
      var sProperty,
        maxConditions = -1;
      var oModel = oDetails.context.getModel(),
        sPropertyPath = oDetails.context.getPath();
      var sPropertyLocationPath = CommonHelper.getLocationForPropertyPath(oModel, sPropertyPath);
      if (oModel.getObject("".concat(sPropertyLocationPath, "/@com.sap.vocabularies.Common.v1.ResultContext")) === true) {
        return 1;
      }
      if (typeof path === "string") {
        sProperty = path;
      } else {
        sProperty = oModel.getObject("".concat(sPropertyPath, "@sapui.name"));
      }
      var oFilterRestrictions = CommonUtils.getFilterRestrictionsByPath(sPropertyLocationPath, oModel);
      var oProperty = oModel.getObject("".concat(sPropertyLocationPath, "/").concat(sProperty));
      if (!oProperty) {
        oProperty = oModel.getObject(sPropertyPath);
      }
      if (oProperty.$Type === "Edm.Boolean") {
        maxConditions = 1;
      } else if (oFilterRestrictions && oFilterRestrictions.FilterAllowedExpressions && oFilterRestrictions.FilterAllowedExpressions[sProperty]) {
        var sAllowedExpression = CommonUtils.getSpecificAllowedExpression(oFilterRestrictions.FilterAllowedExpressions[sProperty]);
        if (sAllowedExpression === "SingleValue" || sAllowedExpression === "SingleRange") {
          maxConditions = 1;
        }
      }
      return maxConditions;
    },
    /**
     * To Create binding for mdc:filterfield conditions.
     *
     * @param iContext An interface with context to the path to be considered for binding
     * @param vProperty The property to create the condition binding for
     * @param oEntityType The EntityType
     * @returns Expression binding for conditions for the field
     */
    getConditionsBinding: function (iContext, vProperty, oEntityType) {
      var oPropertyInterface = iContext.getInterface(0),
        oMetaModel = oPropertyInterface.getModel(),
        sFullPropertyPath = oPropertyInterface.getPath();
      var sConditionPath = "",
        sEntityTypePath = iContext.getInterface(1).getPath(),
        aPropertyPathParts,
        i;
      if (oEntityType && oEntityType["$kind"] === "EntityType" && sFullPropertyPath.startsWith(sEntityTypePath)) {
        // in case:
        // 1. sFullPropertyPath is '/SOM/Name' and sEntityTypePath is '/SOM/'(normal scenario)
        // 2. sFullPropertyPath is '/Customer/Set/Name' and sEntityTypePath is '/Customer/Set/'(main entitytype proerty in parameterized case)
        sEntityTypePath = iContext.getInterface(1).getPath();
        var sPropertyPath = sFullPropertyPath.replace(sEntityTypePath, "");
        aPropertyPathParts = sPropertyPath.split("/");
      } else {
        // 1. sFullPropertyPath is '/Customer/Set/Name' and sEntityTypePath is '/Customer/P_CC'(parameter proerty in parameterized case)
        aPropertyPathParts = sFullPropertyPath.substring(1).split("/");
        sEntityTypePath = "/".concat(aPropertyPathParts.shift(), "/");
      }
      for (i = 0; i < aPropertyPathParts.length; ++i) {
        vProperty = oMetaModel.getProperty(sEntityTypePath + aPropertyPathParts.slice(0, i + 1).join("/"));
        if (vProperty.$kind === "NavigationProperty" && vProperty.$isCollection) {
          sConditionPath += "".concat(aPropertyPathParts[i], "*/");
        } else if (typeof vProperty !== "string") {
          sConditionPath += "".concat(aPropertyPathParts[i], "/");
        }
      }
      // remove the last slash from the conditionPath
      return "{$filters>/conditions/".concat(sConditionPath.substring(0, sConditionPath.length - 1), "}");
    },
    constraints: function (oProperty, oInterface) {
      var sValue = AnnotationHelper.format(oProperty, oInterface),
        aMatches = sValue && sValue.match(/constraints:.*?({.*?})/);
      var oConstraints = aMatches ? JSTokenizer.parseJS(aMatches[1]) : {};
      // Workaround. Add "V4: true" to DateTimeOffset constraints. AnnotationHelper is not aware of this flag.
      if (sValue.includes("sap.ui.model.odata.type.DateTimeOffset")) {
        // Ensure that V4:true is there. With the openUI5 BLI: CPOUI5ODATAV4-2131 the constraints are already include 'V4':true
        oConstraints.V4 = true;
      }
      // Remove {nullable:false} from the constraints as it prevents from having an empty filter field
      // in the case of a single-value filter
      if (oConstraints.nullable === false) {
        delete oConstraints.nullable;
      }
      // Unfortunately, JSTokenizer does not provide a method to stringify (reversing parseJS).
      // Using JSON.stringify and replacing double quotes with single quotes works at least in the known simple cases (flat objects not containing quotes in property names or values).
      // If special cases should occur in future, this might need some adoption (depending on the required string format in that case).
      return Object.keys(oConstraints).length === 0 ? undefined : JSON.stringify(oConstraints).replaceAll('"', "'");
    },
    formatOptions: function (oProperty, oInterface) {
      // as the Annotation helper always returns "parseKeepsEmptyString: true" we need to prevent this in case a property (of type string) is nullable
      // Filling oInterface.arguments with an array where the first parameter is null, and the second contains the "expected"
      // parseKeepsEmptyString value follows a proposal from the model colleagues to "overrule" the behavior of the AnnotationHelper
      if (oProperty.$Type === "Edm.String" && (!oProperty.hasOwnProperty("$Nullable") || oProperty.$Nullable === true)) {
        oInterface.arguments = [null, {
          parseKeepsEmptyString: false
        }];
      }
      var sValue = AnnotationHelper.format(oProperty, oInterface),
        aMatches = sValue && sValue.match(/formatOptions:.*?({.*?})/);
      return aMatches && aMatches[1] || undefined;
    },
    getDataType: function (sPropertyType) {
      var oTypeMapping = EDM_TYPE_MAPPING[sPropertyType];
      return oTypeMapping ? oTypeMapping.type : sPropertyType;
    }
  };
  FilterFieldHelper.getConditionsBinding.requiresIContext = true;
  return FilterFieldHelper;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,