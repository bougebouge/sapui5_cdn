/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/ui/model/odata/type/Boolean", "sap/ui/model/odata/type/Date", "sap/ui/model/odata/type/DateTimeOffset", "sap/ui/model/odata/type/Decimal", "sap/ui/model/odata/type/Guid", "sap/ui/model/odata/type/Int32", "sap/ui/model/odata/type/String"], function (Log, EdmBoolean, EdmDate, DateTimeOffset, Decimal, Guid, Int32, EdmString) {
  "use strict";

  var _exports = {};
  var types = {};
  function createEdmType(attributeEDMType) {
    switch (attributeEDMType) {
      case "EDM.BOOLEAN":
        return new EdmBoolean();
      case "EDM.DATE":
      case "EDM.DATETIME":
        return new EdmDate();
      case "EDM.DATETIMEOFFSET":
        return new DateTimeOffset();
      case "EDM.DECIMAL":
        return new Decimal();
      case "EDM.GUID":
        return new Guid();
      case "EDM.INT32":
        return new Int32();
      case "EDM.STRING":
        return new EdmString();
      default:
        return createEdmType("EDM.STRING");
    }
  }
  function parseAttributeValue(type, value, oDataType) {
    switch (type) {
      case "EDM.STRING":
        return value;
      case "EDM.DATE":
      case "EDM.DATETIME":
      case "EDM.DATETIMEOFFSET":
        return oDataType.parseValue(value, "string");
      case "EDM.INT32":
        return parseInt(value, 10);
      case "EDM.DECIMAL":
        return parseFloat(value);
      case "EDM.GUID":
        return value;
      case "EDM.BOOLEAN":
        // ABAP style: 'X' = true, '' = false
        return value === "X";
      default:
        return value;
    }
  }
  function getType(attributeEDMType) {
    var type = types[attributeEDMType];
    if (!type) {
      type = createEdmType(attributeEDMType);
      types[attributeEDMType] = type;
    }
    return type;
  }
  function formatter(key, template) {
    var context = this.getBindingContext();
    if (key === undefined || key === null || template === undefined || template === null || !context) {
      return "";
    }
    var attributes = context.getObject("_InstanceAttribute");
    if (attributes === undefined || attributes === null || attributes.length === 0) {
      return template;
    }
    var placeholderReplacer = function (match, attributeSource, attributeName) {
      var source = parseInt(attributeSource, 10).toString(); // remove leading zeros from the attribute source

      var resolvedAttribute = attributes.find(function (attribute) {
        return attribute.SitnInstceAttribSource === source && attribute.SitnInstceAttribName === attributeName;
      });
      if (resolvedAttribute === undefined) {
        Log.error("Failed to resolve attribute ".concat(attributeSource, ".").concat(attributeName));
        return "";
      }
      if (!resolvedAttribute._InstanceAttributeValue) {
        Log.error("Failed to resolve a value for attribute ".concat(attributeSource, ".").concat(attributeName));
        return "";
      }
      var resolvedAttributeType = getType(resolvedAttribute.SitnInstceAttribEntityType);

      // Format the value(s) - if there are multiple, concatenate them
      return resolvedAttribute._InstanceAttributeValue.map(function (value) {
        var parsedValue = parseAttributeValue(resolvedAttribute.SitnInstceAttribEntityType, value.SitnInstceAttribValue, resolvedAttributeType);
        return resolvedAttributeType.formatValue(parsedValue, "string");
      }).join(", ");
    };

    // Replace placeholders for attribute values.
    // Their format is {<digitsequence>.<something>} - e.g. {01.PURCHASECONTRACT}
    return template.replace(/\{(\d+)\.([^}]+)}/g, placeholderReplacer);
  }
  _exports.formatter = formatter;
  function bindText(textTemplatePropertyPath) {
    return {
      parts: [{
        path: "SitnInstceKey"
      }, {
        path: "_InstanceText/".concat(textTemplatePropertyPath)
      }],
      formatter: formatter
    };
  }
  _exports.bindText = bindText;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0eXBlcyIsImNyZWF0ZUVkbVR5cGUiLCJhdHRyaWJ1dGVFRE1UeXBlIiwiRWRtQm9vbGVhbiIsIkVkbURhdGUiLCJEYXRlVGltZU9mZnNldCIsIkRlY2ltYWwiLCJHdWlkIiwiSW50MzIiLCJFZG1TdHJpbmciLCJwYXJzZUF0dHJpYnV0ZVZhbHVlIiwidHlwZSIsInZhbHVlIiwib0RhdGFUeXBlIiwicGFyc2VWYWx1ZSIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsImdldFR5cGUiLCJmb3JtYXR0ZXIiLCJrZXkiLCJ0ZW1wbGF0ZSIsImNvbnRleHQiLCJnZXRCaW5kaW5nQ29udGV4dCIsInVuZGVmaW5lZCIsImF0dHJpYnV0ZXMiLCJnZXRPYmplY3QiLCJsZW5ndGgiLCJwbGFjZWhvbGRlclJlcGxhY2VyIiwibWF0Y2giLCJhdHRyaWJ1dGVTb3VyY2UiLCJhdHRyaWJ1dGVOYW1lIiwic291cmNlIiwidG9TdHJpbmciLCJyZXNvbHZlZEF0dHJpYnV0ZSIsImZpbmQiLCJhdHRyaWJ1dGUiLCJTaXRuSW5zdGNlQXR0cmliU291cmNlIiwiU2l0bkluc3RjZUF0dHJpYk5hbWUiLCJMb2ciLCJlcnJvciIsIl9JbnN0YW5jZUF0dHJpYnV0ZVZhbHVlIiwicmVzb2x2ZWRBdHRyaWJ1dGVUeXBlIiwiU2l0bkluc3RjZUF0dHJpYkVudGl0eVR5cGUiLCJtYXAiLCJwYXJzZWRWYWx1ZSIsIlNpdG5JbnN0Y2VBdHRyaWJWYWx1ZSIsImZvcm1hdFZhbHVlIiwiam9pbiIsInJlcGxhY2UiLCJiaW5kVGV4dCIsInRleHRUZW1wbGF0ZVByb3BlcnR5UGF0aCIsInBhcnRzIiwicGF0aCJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiU2l0dWF0aW9uc1RleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvZyBmcm9tIFwic2FwL2Jhc2UvTG9nXCI7XG5pbXBvcnQgdHlwZSB7IFByb3BlcnR5QmluZGluZ0luZm8gfSBmcm9tIFwic2FwL3VpL2Jhc2UvTWFuYWdlZE9iamVjdFwiO1xuaW1wb3J0IHR5cGUgQ29udHJvbCBmcm9tIFwic2FwL3VpL2NvcmUvQ29udHJvbFwiO1xuaW1wb3J0IEVkbUJvb2xlYW4gZnJvbSBcInNhcC91aS9tb2RlbC9vZGF0YS90eXBlL0Jvb2xlYW5cIjtcbmltcG9ydCBFZG1EYXRlIGZyb20gXCJzYXAvdWkvbW9kZWwvb2RhdGEvdHlwZS9EYXRlXCI7XG5pbXBvcnQgRGF0ZVRpbWVPZmZzZXQgZnJvbSBcInNhcC91aS9tb2RlbC9vZGF0YS90eXBlL0RhdGVUaW1lT2Zmc2V0XCI7XG5pbXBvcnQgRGVjaW1hbCBmcm9tIFwic2FwL3VpL21vZGVsL29kYXRhL3R5cGUvRGVjaW1hbFwiO1xuaW1wb3J0IEd1aWQgZnJvbSBcInNhcC91aS9tb2RlbC9vZGF0YS90eXBlL0d1aWRcIjtcbmltcG9ydCBJbnQzMiBmcm9tIFwic2FwL3VpL21vZGVsL29kYXRhL3R5cGUvSW50MzJcIjtcbmltcG9ydCB0eXBlIE9EYXRhVHlwZSBmcm9tIFwic2FwL3VpL21vZGVsL29kYXRhL3R5cGUvT0RhdGFUeXBlXCI7XG5pbXBvcnQgRWRtU3RyaW5nIGZyb20gXCJzYXAvdWkvbW9kZWwvb2RhdGEvdHlwZS9TdHJpbmdcIjtcblxuLyoqXG4gKiBBdHRyaWJ1dGUgdHlwZS5cbiAqXG4gKiBTaXR1YXRpb24gSGFuZGxpbmcgc3VwcG9ydHMgYSBzdWJzZXQgb2YgdGhlIEVETSB0eXBlcy5cbiAqL1xudHlwZSBJbnN0YW5jZUF0dHJpYnV0ZUVkbVR5cGUgPVxuXHR8IFwiRURNLlNUUklOR1wiXG5cdHwgXCJFRE0uREFURVwiXG5cdHwgXCJFRE0uREFURVRJTUVcIlxuXHR8IFwiRURNLkRBVEVUSU1FT0ZGU0VUXCJcblx0fCBcIkVETS5JTlQzMlwiXG5cdHwgXCJFRE0uREVDSU1BTFwiXG5cdHwgXCJFRE0uR1VJRFwiXG5cdHwgXCJFRE0uQk9PTEVBTlwiO1xuXG4vKipcbiAqIEF0dHJpYnV0ZS5cbiAqL1xuZXhwb3J0IHR5cGUgSW5zdGFuY2VBdHRyaWJ1dGUgPSB7XG5cdFNpdG5JbnN0Y2VBdHRyaWJTb3VyY2U6IHN0cmluZztcblx0U2l0bkluc3RjZUF0dHJpYk5hbWU6IHN0cmluZztcblx0U2l0bkluc3RjZUF0dHJpYkVudGl0eVR5cGU6IEluc3RhbmNlQXR0cmlidXRlRWRtVHlwZTtcblx0X0luc3RhbmNlQXR0cmlidXRlVmFsdWU/OiB7XG5cdFx0U2l0bkluc3RjZUF0dHJpYlZhbHVlOiBzdHJpbmc7XG5cdH1bXTtcbn07XG5cbmNvbnN0IHR5cGVzOiBQYXJ0aWFsPFJlY29yZDxJbnN0YW5jZUF0dHJpYnV0ZUVkbVR5cGUsIE9EYXRhVHlwZT4+ID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUVkbVR5cGUoYXR0cmlidXRlRURNVHlwZTogSW5zdGFuY2VBdHRyaWJ1dGVFZG1UeXBlKTogT0RhdGFUeXBlIHtcblx0c3dpdGNoIChhdHRyaWJ1dGVFRE1UeXBlKSB7XG5cdFx0Y2FzZSBcIkVETS5CT09MRUFOXCI6XG5cdFx0XHRyZXR1cm4gbmV3IEVkbUJvb2xlYW4oKTtcblx0XHRjYXNlIFwiRURNLkRBVEVcIjpcblx0XHRjYXNlIFwiRURNLkRBVEVUSU1FXCI6XG5cdFx0XHRyZXR1cm4gbmV3IEVkbURhdGUoKTtcblx0XHRjYXNlIFwiRURNLkRBVEVUSU1FT0ZGU0VUXCI6XG5cdFx0XHRyZXR1cm4gbmV3IERhdGVUaW1lT2Zmc2V0KCk7XG5cdFx0Y2FzZSBcIkVETS5ERUNJTUFMXCI6XG5cdFx0XHRyZXR1cm4gbmV3IERlY2ltYWwoKTtcblx0XHRjYXNlIFwiRURNLkdVSURcIjpcblx0XHRcdHJldHVybiBuZXcgR3VpZCgpO1xuXHRcdGNhc2UgXCJFRE0uSU5UMzJcIjpcblx0XHRcdHJldHVybiBuZXcgSW50MzIoKTtcblx0XHRjYXNlIFwiRURNLlNUUklOR1wiOlxuXHRcdFx0cmV0dXJuIG5ldyBFZG1TdHJpbmcoKTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIGNyZWF0ZUVkbVR5cGUoXCJFRE0uU1RSSU5HXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlVmFsdWUodHlwZTogSW5zdGFuY2VBdHRyaWJ1dGVFZG1UeXBlLCB2YWx1ZTogc3RyaW5nLCBvRGF0YVR5cGU6IE9EYXRhVHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRjYXNlIFwiRURNLlNUUklOR1wiOlxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGNhc2UgXCJFRE0uREFURVwiOlxuXHRcdGNhc2UgXCJFRE0uREFURVRJTUVcIjpcblx0XHRjYXNlIFwiRURNLkRBVEVUSU1FT0ZGU0VUXCI6XG5cdFx0XHRyZXR1cm4gb0RhdGFUeXBlLnBhcnNlVmFsdWUodmFsdWUsIFwic3RyaW5nXCIpO1xuXHRcdGNhc2UgXCJFRE0uSU5UMzJcIjpcblx0XHRcdHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuXHRcdGNhc2UgXCJFRE0uREVDSU1BTFwiOlxuXHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuXHRcdGNhc2UgXCJFRE0uR1VJRFwiOlxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGNhc2UgXCJFRE0uQk9PTEVBTlwiOlxuXHRcdFx0Ly8gQUJBUCBzdHlsZTogJ1gnID0gdHJ1ZSwgJycgPSBmYWxzZVxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSBcIlhcIjtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldFR5cGUoYXR0cmlidXRlRURNVHlwZTogSW5zdGFuY2VBdHRyaWJ1dGVFZG1UeXBlKTogT0RhdGFUeXBlIHtcblx0bGV0IHR5cGUgPSB0eXBlc1thdHRyaWJ1dGVFRE1UeXBlXTtcblx0aWYgKCF0eXBlKSB7XG5cdFx0dHlwZSA9IGNyZWF0ZUVkbVR5cGUoYXR0cmlidXRlRURNVHlwZSk7XG5cdFx0dHlwZXNbYXR0cmlidXRlRURNVHlwZV0gPSB0eXBlO1xuXHR9XG5cdHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0dGVyKHRoaXM6IENvbnRyb2wsIGtleTogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbCwgdGVtcGxhdGU6IHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGwpIHtcblx0Y29uc3QgY29udGV4dCA9IHRoaXMuZ2V0QmluZGluZ0NvbnRleHQoKTtcblx0aWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCB8fCB0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRlbXBsYXRlID09PSBudWxsIHx8ICFjb250ZXh0KSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHRjb25zdCBhdHRyaWJ1dGVzID0gY29udGV4dC5nZXRPYmplY3QoXCJfSW5zdGFuY2VBdHRyaWJ1dGVcIikgYXMgSW5zdGFuY2VBdHRyaWJ1dGVbXSB8IG51bGwgfCB1bmRlZmluZWQ7XG5cdGlmIChhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgfHwgYXR0cmlidXRlcyA9PT0gbnVsbCB8fCBhdHRyaWJ1dGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0fVxuXG5cdGNvbnN0IHBsYWNlaG9sZGVyUmVwbGFjZXIgPSAobWF0Y2g6IHN0cmluZywgYXR0cmlidXRlU291cmNlOiBzdHJpbmcsIGF0dHJpYnV0ZU5hbWU6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IHNvdXJjZSA9IHBhcnNlSW50KGF0dHJpYnV0ZVNvdXJjZSwgMTApLnRvU3RyaW5nKCk7IC8vIHJlbW92ZSBsZWFkaW5nIHplcm9zIGZyb20gdGhlIGF0dHJpYnV0ZSBzb3VyY2VcblxuXHRcdGNvbnN0IHJlc29sdmVkQXR0cmlidXRlOiBJbnN0YW5jZUF0dHJpYnV0ZSB8IHVuZGVmaW5lZCA9IGF0dHJpYnV0ZXMuZmluZChcblx0XHRcdChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5TaXRuSW5zdGNlQXR0cmliU291cmNlID09PSBzb3VyY2UgJiYgYXR0cmlidXRlLlNpdG5JbnN0Y2VBdHRyaWJOYW1lID09PSBhdHRyaWJ1dGVOYW1lXG5cdFx0KTtcblxuXHRcdGlmIChyZXNvbHZlZEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRMb2cuZXJyb3IoYEZhaWxlZCB0byByZXNvbHZlIGF0dHJpYnV0ZSAke2F0dHJpYnV0ZVNvdXJjZX0uJHthdHRyaWJ1dGVOYW1lfWApO1xuXHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0fVxuXG5cdFx0aWYgKCFyZXNvbHZlZEF0dHJpYnV0ZS5fSW5zdGFuY2VBdHRyaWJ1dGVWYWx1ZSkge1xuXHRcdFx0TG9nLmVycm9yKGBGYWlsZWQgdG8gcmVzb2x2ZSBhIHZhbHVlIGZvciBhdHRyaWJ1dGUgJHthdHRyaWJ1dGVTb3VyY2V9LiR7YXR0cmlidXRlTmFtZX1gKTtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlc29sdmVkQXR0cmlidXRlVHlwZSA9IGdldFR5cGUocmVzb2x2ZWRBdHRyaWJ1dGUuU2l0bkluc3RjZUF0dHJpYkVudGl0eVR5cGUpO1xuXG5cdFx0Ly8gRm9ybWF0IHRoZSB2YWx1ZShzKSAtIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSwgY29uY2F0ZW5hdGUgdGhlbVxuXHRcdHJldHVybiByZXNvbHZlZEF0dHJpYnV0ZS5fSW5zdGFuY2VBdHRyaWJ1dGVWYWx1ZVxuXHRcdFx0Lm1hcCgodmFsdWUpID0+IHtcblx0XHRcdFx0Y29uc3QgcGFyc2VkVmFsdWUgPSBwYXJzZUF0dHJpYnV0ZVZhbHVlKFxuXHRcdFx0XHRcdHJlc29sdmVkQXR0cmlidXRlLlNpdG5JbnN0Y2VBdHRyaWJFbnRpdHlUeXBlLFxuXHRcdFx0XHRcdHZhbHVlLlNpdG5JbnN0Y2VBdHRyaWJWYWx1ZSxcblx0XHRcdFx0XHRyZXNvbHZlZEF0dHJpYnV0ZVR5cGVcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHJlc29sdmVkQXR0cmlidXRlVHlwZS5mb3JtYXRWYWx1ZShwYXJzZWRWYWx1ZSwgXCJzdHJpbmdcIik7XG5cdFx0XHR9KVxuXHRcdFx0LmpvaW4oXCIsIFwiKTtcblx0fTtcblxuXHQvLyBSZXBsYWNlIHBsYWNlaG9sZGVycyBmb3IgYXR0cmlidXRlIHZhbHVlcy5cblx0Ly8gVGhlaXIgZm9ybWF0IGlzIHs8ZGlnaXRzZXF1ZW5jZT4uPHNvbWV0aGluZz59IC0gZS5nLiB7MDEuUFVSQ0hBU0VDT05UUkFDVH1cblx0cmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xceyhcXGQrKVxcLihbXn1dKyl9L2csIHBsYWNlaG9sZGVyUmVwbGFjZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluZFRleHQodGV4dFRlbXBsYXRlUHJvcGVydHlQYXRoOiBzdHJpbmcpOiBQcm9wZXJ0eUJpbmRpbmdJbmZvIHtcblx0cmV0dXJuIHtcblx0XHRwYXJ0czogW3sgcGF0aDogXCJTaXRuSW5zdGNlS2V5XCIgfSwgeyBwYXRoOiBgX0luc3RhbmNlVGV4dC8ke3RleHRUZW1wbGF0ZVByb3BlcnR5UGF0aH1gIH1dLFxuXHRcdGZvcm1hdHRlcjogZm9ybWF0dGVyXG5cdH07XG59XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQUE7Ozs7O0VBdUNBLElBQU1BLEtBQTJELEdBQUcsQ0FBQyxDQUFDO0VBRXRFLFNBQVNDLGFBQWEsQ0FBQ0MsZ0JBQTBDLEVBQWE7SUFDN0UsUUFBUUEsZ0JBQWdCO01BQ3ZCLEtBQUssYUFBYTtRQUNqQixPQUFPLElBQUlDLFVBQVUsRUFBRTtNQUN4QixLQUFLLFVBQVU7TUFDZixLQUFLLGNBQWM7UUFDbEIsT0FBTyxJQUFJQyxPQUFPLEVBQUU7TUFDckIsS0FBSyxvQkFBb0I7UUFDeEIsT0FBTyxJQUFJQyxjQUFjLEVBQUU7TUFDNUIsS0FBSyxhQUFhO1FBQ2pCLE9BQU8sSUFBSUMsT0FBTyxFQUFFO01BQ3JCLEtBQUssVUFBVTtRQUNkLE9BQU8sSUFBSUMsSUFBSSxFQUFFO01BQ2xCLEtBQUssV0FBVztRQUNmLE9BQU8sSUFBSUMsS0FBSyxFQUFFO01BQ25CLEtBQUssWUFBWTtRQUNoQixPQUFPLElBQUlDLFNBQVMsRUFBRTtNQUN2QjtRQUNDLE9BQU9SLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFBQztFQUV0QztFQUVBLFNBQVNTLG1CQUFt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