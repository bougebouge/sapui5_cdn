/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "../converters/helpers/DataFieldHelper"], function (valueFormatters, BindingToolkit, DataModelPathHelper, PropertyHelper, UIFormatters, DataFieldHelper) {
  "use strict";

  var _exports = {};
  var isReferencePropertyStaticallyHidden = DataFieldHelper.isReferencePropertyStaticallyHidden;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var pathInModel = BindingToolkit.pathInModel;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var compileExpression = BindingToolkit.compileExpression;
  // Import-export methods related to the common annotations used by the converter to use them in the templating through the Common Formatters.

  /**
   * Retrieves the expressionBinding created out of a binding expression.
   *
   * @param expression The expression which needs to be compiled
   * @returns The expression-binding string
   */
  var getExpressionBinding = function (expression) {
    return compileExpression(expression);
  };
  _exports.getExpressionBinding = getExpressionBinding;
  var getBindingWithTextArrangement = function (oPropertyDataModelPath, propertyBindingExpression, fieldFormatOptions) {
    var _oPropertyDefinition$, _oPropertyDefinition$2;
    var targetDisplayModeOverride = fieldFormatOptions === null || fieldFormatOptions === void 0 ? void 0 : fieldFormatOptions.displayMode;
    var outExpression = propertyBindingExpression;
    var oPropertyDefinition = oPropertyDataModelPath.targetObject.type === "PropertyPath" ? oPropertyDataModelPath.targetObject.$target : oPropertyDataModelPath.targetObject;
    var targetDisplayMode = targetDisplayModeOverride || UIFormatters.getDisplayMode(oPropertyDataModelPath);
    var commonText = (_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Common) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.Text;
    var relativeLocation = getRelativePaths(oPropertyDataModelPath);
    propertyBindingExpression = UIFormatters.formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression);
    if (targetDisplayMode !== "Value" && commonText) {
      switch (targetDisplayMode) {
        case "Description":
          outExpression = getExpressionFromAnnotation(commonText, relativeLocation);
          break;
        case "DescriptionValue":
          outExpression = formatResult([getExpressionFromAnnotation(commonText, relativeLocation), propertyBindingExpression], valueFormatters.formatWithBrackets);
          break;
        case "ValueDescription":
          outExpression = formatResult([propertyBindingExpression, getExpressionFromAnnotation(commonText, relativeLocation)], valueFormatters.formatWithBrackets);
          break;
      }
    }
    return outExpression;
  };
  _exports.getBindingWithTextArrangement = getBindingWithTextArrangement;
  var getBindingWithText = function (targetDataModelPath) {
    var propertyDataModelPath = targetDataModelPath;
    if (PropertyHelper.isPathExpression(targetDataModelPath === null || targetDataModelPath === void 0 ? void 0 : targetDataModelPath.targetObject)) {
      var _targetDataModelPath$;
      propertyDataModelPath = enhanceDataModelPath(targetDataModelPath, (_targetDataModelPath$ = targetDataModelPath.targetObject) === null || _targetDataModelPath$ === void 0 ? void 0 : _targetDataModelPath$.path);
    }
    var propertyDefinition = propertyDataModelPath.targetObject;
    var propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(propertyDataModelPath));
    propertyBindingExpression = UIFormatters.formatWithTypeInformation(propertyDefinition, propertyBindingExpression, true);
    var textArrangementBinding = getBindingWithTextArrangement(propertyDataModelPath, propertyBindingExpression);
    return propertyDefinition.annotations.UI && !isReferencePropertyStaticallyHidden(propertyDefinition.annotations.UI.DataFieldDefault) && compileExpression(textArrangementBinding) || undefined;
  };
  _exports.getBindingWithText = getBindingWithText;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRFeHByZXNzaW9uQmluZGluZyIsImV4cHJlc3Npb24iLCJjb21waWxlRXhwcmVzc2lvbiIsImdldEJpbmRpbmdXaXRoVGV4dEFycmFuZ2VtZW50Iiwib1Byb3BlcnR5RGF0YU1vZGVsUGF0aCIsInByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24iLCJmaWVsZEZvcm1hdE9wdGlvbnMiLCJ0YXJnZXREaXNwbGF5TW9kZU92ZXJyaWRlIiwiZGlzcGxheU1vZGUiLCJvdXRFeHByZXNzaW9uIiwib1Byb3BlcnR5RGVmaW5pdGlvbiIsInRhcmdldE9iamVjdCIsInR5cGUiLCIkdGFyZ2V0IiwidGFyZ2V0RGlzcGxheU1vZGUiLCJVSUZvcm1hdHRlcnMiLCJnZXREaXNwbGF5TW9kZSIsImNvbW1vblRleHQiLCJhbm5vdGF0aW9ucyIsIkNvbW1vbiIsIlRleHQiLCJyZWxhdGl2ZUxvY2F0aW9uIiwiZ2V0UmVsYXRpdmVQYXRocyIsImZvcm1hdFdpdGhUeXBlSW5mb3JtYXRpb24iLCJnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24iLCJmb3JtYXRSZXN1bHQiLCJ2YWx1ZUZvcm1hdHRlcnMiLCJmb3JtYXRXaXRoQnJhY2tldHMiLCJnZXRCaW5kaW5nV2l0aFRleHQiLCJ0YXJnZXREYXRhTW9kZWxQYXRoIiwicHJvcGVydHlEYXRhTW9kZWxQYXRoIiwiUHJvcGVydHlIZWxwZXIiLCJpc1BhdGhFeHByZXNzaW9uIiwiZW5oYW5jZURhdGFNb2RlbFBhdGgiLCJwYXRoIiwicHJvcGVydHlEZWZpbml0aW9uIiwicGF0aEluTW9kZWwiLCJnZXRDb250ZXh0UmVsYXRpdmVUYXJnZXRPYmplY3RQYXRoIiwidGV4dEFycmFuZ2VtZW50QmluZGluZyIsIlVJIiwiaXNSZWZlcmVuY2VQcm9wZXJ0eVN0YXRpY2FsbHlIaWRkZW4iLCJEYXRhRmllbGREZWZhdWx0IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyJDb21tb25Gb3JtYXR0ZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUHJvcGVydHkgfSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXNcIjtcbmltcG9ydCB2YWx1ZUZvcm1hdHRlcnMgZnJvbSBcInNhcC9mZS9jb3JlL2Zvcm1hdHRlcnMvVmFsdWVGb3JtYXR0ZXJcIjtcbmltcG9ydCB0eXBlIHsgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uLCBDb21waWxlZEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbiB9IGZyb20gXCJzYXAvZmUvY29yZS9oZWxwZXJzL0JpbmRpbmdUb29sa2l0XCI7XG5pbXBvcnQgeyBjb21waWxlRXhwcmVzc2lvbiwgZm9ybWF0UmVzdWx0LCBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24sIHBhdGhJbk1vZGVsIH0gZnJvbSBcInNhcC9mZS9jb3JlL2hlbHBlcnMvQmluZGluZ1Rvb2xraXRcIjtcbmltcG9ydCB0eXBlIHsgRGF0YU1vZGVsT2JqZWN0UGF0aCB9IGZyb20gXCJzYXAvZmUvY29yZS90ZW1wbGF0aW5nL0RhdGFNb2RlbFBhdGhIZWxwZXJcIjtcbmltcG9ydCB7IGVuaGFuY2VEYXRhTW9kZWxQYXRoLCBnZXRDb250ZXh0UmVsYXRpdmVUYXJnZXRPYmplY3RQYXRoLCBnZXRSZWxhdGl2ZVBhdGhzIH0gZnJvbSBcInNhcC9mZS9jb3JlL3RlbXBsYXRpbmcvRGF0YU1vZGVsUGF0aEhlbHBlclwiO1xuaW1wb3J0IHR5cGUgKiBhcyBEaXNwbGF5TW9kZUZvcm1hdHRlciBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9EaXNwbGF5TW9kZUZvcm1hdHRlclwiO1xuaW1wb3J0ICogYXMgUHJvcGVydHlIZWxwZXIgZnJvbSBcInNhcC9mZS9jb3JlL3RlbXBsYXRpbmcvUHJvcGVydHlIZWxwZXJcIjtcbmltcG9ydCAqIGFzIFVJRm9ybWF0dGVycyBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9VSUZvcm1hdHRlcnNcIjtcbmltcG9ydCB7IGlzUmVmZXJlbmNlUHJvcGVydHlTdGF0aWNhbGx5SGlkZGVuIH0gZnJvbSBcIi4uL2NvbnZlcnRlcnMvaGVscGVycy9EYXRhRmllbGRIZWxwZXJcIjtcbmV4cG9ydCB0eXBlIERpc3BsYXlNb2RlID0gRGlzcGxheU1vZGVGb3JtYXR0ZXIuRGlzcGxheU1vZGU7XG5cbi8vIEltcG9ydC1leHBvcnQgbWV0aG9kcyByZWxhdGVkIHRvIHRoZSBjb21tb24gYW5ub3RhdGlvbnMgdXNlZCBieSB0aGUgY29udmVydGVyIHRvIHVzZSB0aGVtIGluIHRoZSB0ZW1wbGF0aW5nIHRocm91Z2ggdGhlIENvbW1vbiBGb3JtYXR0ZXJzLlxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgZXhwcmVzc2lvbkJpbmRpbmcgY3JlYXRlZCBvdXQgb2YgYSBiaW5kaW5nIGV4cHJlc3Npb24uXG4gKlxuICogQHBhcmFtIGV4cHJlc3Npb24gVGhlIGV4cHJlc3Npb24gd2hpY2ggbmVlZHMgdG8gYmUgY29tcGlsZWRcbiAqIEByZXR1cm5zIFRoZSBleHByZXNzaW9uLWJpbmRpbmcgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRFeHByZXNzaW9uQmluZGluZyA9IGZ1bmN0aW9uIChleHByZXNzaW9uOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248YW55Pik6IENvbXBpbGVkQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uIHtcblx0cmV0dXJuIGNvbXBpbGVFeHByZXNzaW9uKGV4cHJlc3Npb24pO1xufTtcbmV4cG9ydCBjb25zdCBnZXRCaW5kaW5nV2l0aFRleHRBcnJhbmdlbWVudCA9IGZ1bmN0aW9uIChcblx0b1Byb3BlcnR5RGF0YU1vZGVsUGF0aDogRGF0YU1vZGVsT2JqZWN0UGF0aCxcblx0cHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz4sXG5cdGZpZWxkRm9ybWF0T3B0aW9ucz86IHsgZGlzcGxheU1vZGU/OiBEaXNwbGF5TW9kZSB9XG4pOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPiB7XG5cdGNvbnN0IHRhcmdldERpc3BsYXlNb2RlT3ZlcnJpZGUgPSBmaWVsZEZvcm1hdE9wdGlvbnM/LmRpc3BsYXlNb2RlO1xuXHRsZXQgb3V0RXhwcmVzc2lvbiA9IHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb247XG5cdGNvbnN0IG9Qcm9wZXJ0eURlZmluaXRpb24gPVxuXHRcdG9Qcm9wZXJ0eURhdGFNb2RlbFBhdGgudGFyZ2V0T2JqZWN0LnR5cGUgPT09IFwiUHJvcGVydHlQYXRoXCJcblx0XHRcdD8gKG9Qcm9wZXJ0eURhdGFNb2RlbFBhdGgudGFyZ2V0T2JqZWN0LiR0YXJnZXQgYXMgUHJvcGVydHkpXG5cdFx0XHQ6IChvUHJvcGVydHlEYXRhTW9kZWxQYXRoLnRhcmdldE9iamVjdCBhcyBQcm9wZXJ0eSk7XG5cdGNvbnN0IHRhcmdldERpc3BsYXlNb2RlID0gdGFyZ2V0RGlzcGxheU1vZGVPdmVycmlkZSB8fCBVSUZvcm1hdHRlcnMuZ2V0RGlzcGxheU1vZGUob1Byb3BlcnR5RGF0YU1vZGVsUGF0aCk7XG5cdGNvbnN0IGNvbW1vblRleHQgPSBvUHJvcGVydHlEZWZpbml0aW9uLmFubm90YXRpb25zPy5Db21tb24/LlRleHQ7XG5cdGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBnZXRSZWxhdGl2ZVBhdGhzKG9Qcm9wZXJ0eURhdGFNb2RlbFBhdGgpO1xuXHRwcm9wZXJ0eUJpbmRpbmdFeHByZXNzaW9uID0gVUlGb3JtYXR0ZXJzLmZvcm1hdFdpdGhUeXBlSW5mb3JtYXRpb24ob1Byb3BlcnR5RGVmaW5pdGlvbiwgcHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbik7XG5cdGlmICh0YXJnZXREaXNwbGF5TW9kZSAhPT0gXCJWYWx1ZVwiICYmIGNvbW1vblRleHQpIHtcblx0XHRzd2l0Y2ggKHRhcmdldERpc3BsYXlNb2RlKSB7XG5cdFx0XHRjYXNlIFwiRGVzY3JpcHRpb25cIjpcblx0XHRcdFx0b3V0RXhwcmVzc2lvbiA9IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihjb21tb25UZXh0LCByZWxhdGl2ZUxvY2F0aW9uKSBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiRGVzY3JpcHRpb25WYWx1ZVwiOlxuXHRcdFx0XHRvdXRFeHByZXNzaW9uID0gZm9ybWF0UmVzdWx0KFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihjb21tb25UZXh0LCByZWxhdGl2ZUxvY2F0aW9uKSBhcyBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPixcblx0XHRcdFx0XHRcdHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb25cblx0XHRcdFx0XHRdLFxuXHRcdFx0XHRcdHZhbHVlRm9ybWF0dGVycy5mb3JtYXRXaXRoQnJhY2tldHNcblx0XHRcdFx0KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiVmFsdWVEZXNjcmlwdGlvblwiOlxuXHRcdFx0XHRvdXRFeHByZXNzaW9uID0gZm9ybWF0UmVzdWx0KFxuXHRcdFx0XHRcdFtcblx0XHRcdFx0XHRcdHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24sXG5cdFx0XHRcdFx0XHRnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oY29tbW9uVGV4dCwgcmVsYXRpdmVMb2NhdGlvbikgYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz5cblx0XHRcdFx0XHRdLFxuXHRcdFx0XHRcdHZhbHVlRm9ybWF0dGVycy5mb3JtYXRXaXRoQnJhY2tldHNcblx0XHRcdFx0KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRFeHByZXNzaW9uO1xufTtcbmV4cG9ydCBjb25zdCBnZXRCaW5kaW5nV2l0aFRleHQgPSBmdW5jdGlvbiAodGFyZ2V0RGF0YU1vZGVsUGF0aDogRGF0YU1vZGVsT2JqZWN0UGF0aCk6IENvbXBpbGVkQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uIHtcblx0bGV0IHByb3BlcnR5RGF0YU1vZGVsUGF0aCA9IHRhcmdldERhdGFNb2RlbFBhdGg7XG5cdGlmIChQcm9wZXJ0eUhlbHBlci5pc1BhdGhFeHByZXNzaW9uKHRhcmdldERhdGFNb2RlbFBhdGg/LnRhcmdldE9iamVjdCkpIHtcblx0XHRwcm9wZXJ0eURhdGFNb2RlbFBhdGggPSBlbmhhbmNlRGF0YU1vZGVsUGF0aCh0YXJnZXREYXRhTW9kZWxQYXRoLCB0YXJnZXREYXRhTW9kZWxQYXRoLnRhcmdldE9iamVjdD8ucGF0aCk7XG5cdH1cblx0Y29uc3QgcHJvcGVydHlEZWZpbml0aW9uID0gcHJvcGVydHlEYXRhTW9kZWxQYXRoLnRhcmdldE9iamVjdCBhcyBQcm9wZXJ0eTtcblxuXHRsZXQgcHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbiA9IHBhdGhJbk1vZGVsKFxuXHRcdGdldENvbnRleHRSZWxhdGl2ZVRhcmdldE9iamVjdFBhdGgocHJvcGVydHlEYXRhTW9kZWxQYXRoKVxuXHQpIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+O1xuXG5cdHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24gPSBVSUZvcm1hdHRlcnMuZm9ybWF0V2l0aFR5cGVJbmZvcm1hdGlvbihwcm9wZXJ0eURlZmluaXRpb24sIHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24sIHRydWUpO1xuXHRjb25zdCB0ZXh0QXJyYW5nZW1lbnRCaW5kaW5nID0gZ2V0QmluZGluZ1dpdGhUZXh0QXJyYW5nZW1lbnQocHJvcGVydHlEYXRhTW9kZWxQYXRoLCBwcm9wZXJ0eUJpbmRpbmdFeHByZXNzaW9uKTtcblx0cmV0dXJuICgocHJvcGVydHlEZWZpbml0aW9uLmFubm90YXRpb25zLlVJICYmXG5cdFx0IWlzUmVmZXJlbmNlUHJvcGVydHlTdGF0aWNhbGx5SGlkZGVuKHByb3BlcnR5RGVmaW5pdGlvbi5hbm5vdGF0aW9ucy5VSS5EYXRhRmllbGREZWZhdWx0KSAmJlxuXHRcdGNvbXBpbGVFeHByZXNzaW9uKHRleHRBcnJhbmdlbWVudEJpbmRpbmcpKSB8fFxuXHRc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