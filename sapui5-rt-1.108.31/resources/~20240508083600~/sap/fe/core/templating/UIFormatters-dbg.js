/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/core/templating/FieldControlHelper", "sap/fe/core/templating/PropertyHelper"], function (BindingHelper, MetaModelConverter, valueFormatters, BindingToolkit, DataModelPathHelper, DisplayModeFormatter, FieldControlHelper, PropertyHelper) {
  "use strict";

  var _exports = {};
  var isProperty = PropertyHelper.isProperty;
  var isPathExpression = PropertyHelper.isPathExpression;
  var isKey = PropertyHelper.isKey;
  var isImmutable = PropertyHelper.isImmutable;
  var isComputed = PropertyHelper.isComputed;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var getAssociatedCurrencyProperty = PropertyHelper.getAssociatedCurrencyProperty;
  var isRequiredExpression = FieldControlHelper.isRequiredExpression;
  var isReadOnlyExpression = FieldControlHelper.isReadOnlyExpression;
  var isNonEditableExpression = FieldControlHelper.isNonEditableExpression;
  var isDisabledExpression = FieldControlHelper.isDisabledExpression;
  var isPathUpdatable = DataModelPathHelper.isPathUpdatable;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var notEqual = BindingToolkit.notEqual;
  var not = BindingToolkit.not;
  var isTruthy = BindingToolkit.isTruthy;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var addTypeInformation = BindingToolkit.addTypeInformation;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var UI = BindingHelper.UI;
  var singletonPathVisitor = BindingHelper.singletonPathVisitor;
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var EDM_TYPE_MAPPING = DisplayModeFormatter.EDM_TYPE_MAPPING;
  _exports.EDM_TYPE_MAPPING = EDM_TYPE_MAPPING;
  var getDisplayMode = function (oDataModelObjectPath) {
    return DisplayModeFormatter.getDisplayMode(oDataModelObjectPath.targetObject, oDataModelObjectPath);
  };
  _exports.getDisplayMode = getDisplayMode;
  var getEditableExpressionAsObject = function (oPropertyPath) {
    var oDataFieldConverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var oDataModelObjectPath = arguments.length > 2 ? arguments[2] : undefined;
    var isEditable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : UI.IsEditable;
    return getEditableExpression(oPropertyPath, oDataFieldConverted, oDataModelObjectPath, true, isEditable);
  };
  /**
   * Create the expression to generate an "editable" boolean value.
   *
   * @param oPropertyPath The input property
   * @param oDataFieldConverted The DataFieldConverted object to read the fieldControl annotation
   * @param oDataModelObjectPath The path to this property object
   * @param bAsObject Whether or not this should be returned as an object or a binding string
   * @param isEditable Whether or not UI.IsEditable be considered.
   * @returns The binding expression used to determine if a property is editable or not
   */
  _exports.getEditableExpressionAsObject = getEditableExpressionAsObject;
  var getEditableExpression = function (oPropertyPath) {
    var oDataFieldConverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var oDataModelObjectPath = arguments.length > 2 ? arguments[2] : undefined;
    var bAsObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var isEditable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : UI.IsEditable;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileExpression(false);
    }
    var dataFieldEditableExpression = constant(true);
    if (oDataFieldConverted !== null) {
      dataFieldEditableExpression = ifElse(isNonEditableExpression(oDataFieldConverted), false, isEditable);
    }
    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    var relativePath = getRelativePaths(oDataModelObjectPath);
    // Editability depends on the field control expression
    // If the Field control is statically in ReadOnly or Inapplicable (disabled) -> not editable
    // If the property is a key -> not editable except in creation if not computed
    // If the property is computed -> not editable
    // If the property is not updatable -> not editable
    // If the property is immutable -> not editable except in creation
    // If the Field control is a path resolving to ReadOnly or Inapplicable (disabled) (<= 1) -> not editable
    // Else, to be editable you need
    // immutable and key while in the creation row
    // ui/isEditable
    var isPathUpdatableExpression = isPathUpdatable(oDataModelObjectPath, {
      propertyPath: oPropertyPath,
      pathVisitor: function (path, navigationPaths) {
        return singletonPathVisitor(path, oDataModelObjectPath.convertedTypes, navigationPaths);
      }
    });
    var editableExpression = ifElse(or(not(isPathUpdatableExpression), isComputed(oProperty), isKey(oProperty), isImmutable(oProperty), isNonEditableExpression(oProperty, relativePath)), ifElse(or(isComputed(oProperty), isNonEditableExpression(oProperty, relativePath)), false, UI.IsTransientBinding), isEditable);
    if (bAsObject) {
      return and(editableExpression, dataFieldEditableExpression);
    }
    return compileExpression(and(editableExpression, dataFieldEditableExpression));
  };
  _exports.getEditableExpression = getEditableExpression;
  var getCollaborationExpression = function (dataModelObjectPath, formatter) {
    var _dataModelObjectPath$;
    var objectPath = getTargetObjectPath(dataModelObjectPath);
    var activityExpression = pathInModel("/collaboration/activities".concat(objectPath), "internal");
    var keys = dataModelObjectPath === null || dataModelObjectPath === void 0 ? void 0 : (_dataModelObjectPath$ = dataModelObjectPath.targetEntityType) === null || _dataModelObjectPath$ === void 0 ? void 0 : _dataModelObjectPath$.keys;
    var keysExpressions = [];
    keys === null || keys === void 0 ? void 0 : keys.forEach(function (key) {
      var keyExpression = pathInModel(key.name);
      keysExpressions.push(keyExpression);
    });
    return formatResult([activityExpression].concat(keysExpressions), formatter);
  };
  _exports.getCollaborationExpression = getCollaborationExpression;
  var getEnabledExpressionAsObject = function (oPropertyPath, oDataFieldConverted, oDataModelObjectPath) {
    return getEnabledExpression(oPropertyPath, oDataFieldConverted, true, oDataModelObjectPath);
  };
  /**
   * Create the expression to generate an "enabled" Boolean value.
   *
   * @param oPropertyPath The input property
   * @param oDataFieldConverted The DataFieldConverted Object to read the fieldControl annotation
   * @param bAsObject Whether or not this should be returned as an object or a binding string
   * @param oDataModelObjectPath
   * @returns The binding expression to determine if a property is enabled or not
   */
  _exports.getEnabledExpressionAsObject = getEnabledExpressionAsObject;
  var getEnabledExpression = function (oPropertyPath, oDataFieldConverted) {
    var bAsObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var oDataModelObjectPath = arguments.length > 3 ? arguments[3] : undefined;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileExpression(true);
    }
    var relativePath;
    if (oDataModelObjectPath) {
      relativePath = getRelativePaths(oDataModelObjectPath);
    }
    var dataFieldEnabledExpression = constant(true);
    if (oDataFieldConverted !== null) {
      dataFieldEnabledExpression = ifElse(isDisabledExpression(oDataFieldConverted), false, true);
    }
    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    // Enablement depends on the field control expression
    // If the Field control is statically in Inapplicable (disabled) -> not enabled
    var enabledExpression = ifElse(isDisabledExpression(oProperty, relativePath), false, true);
    if (bAsObject) {
      return and(enabledExpression, dataFieldEnabledExpression);
    }
    return compileExpression(and(enabledExpression, dataFieldEnabledExpression));
  };

  /**
   * Create the expression to generate an "editMode" enum value.
   *
   * @param oPropertyPath The input property
   * @param oDataModelObjectPath The list of data model objects that are involved to reach that property
   * @param bMeasureReadOnly Whether we should set UoM / currency field mode to read only
   * @param bAsObject Whether we should return this as an expression or as a string
   * @param oDataFieldConverted The dataField object
   * @param isEditable Whether or not UI.IsEditable be considered.
   * @returns The binding expression representing the current property edit mode, compliant with the MDC Field definition of editMode.
   */
  _exports.getEnabledExpression = getEnabledExpression;
  var getEditMode = function (oPropertyPath, oDataModelObjectPath) {
    var bMeasureReadOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var bAsObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var oDataFieldConverted = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var isEditable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : UI.IsEditable;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Display";
    }
    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    var relativePath = getRelativePaths(oDataModelObjectPath);
    // if the property is not enabled => Disabled
    // if the property is enabled && not editable => ReadOnly
    // if the property is enabled && editable => Editable
    // If there is an associated unit, and it has a field control also use consider the following
    // if the unit field control is readonly -> EditableReadOnly
    // otherwise -> Editable
    var editableExpression = getEditableExpressionAsObject(oPropertyPath, oDataFieldConverted, oDataModelObjectPath, isEditable);
    var enabledExpression = getEnabledExpressionAsObject(oPropertyPath, oDataFieldConverted, oDataModelObjectPath);
    var associatedCurrencyProperty = getAssociatedCurrencyProperty(oProperty);
    var unitProperty = associatedCurrencyProperty || getAssociatedUnitProperty(oProperty);
    var resultExpression = constant("Editable");
    if (unitProperty) {
      var isUnitReadOnly = isReadOnlyExpression(unitProperty, relativePath);
      resultExpression = ifElse(or(isUnitReadOnly, isComputed(unitProperty), bMeasureReadOnly), ifElse(!isConstant(isUnitReadOnly) && isUnitReadOnly, "EditableReadOnly", "EditableDisplay"), "Editable");
    }
    var readOnlyExpression = or(isReadOnlyExpression(oProperty, relativePath), isReadOnlyExpression(oDataFieldConverted));

    // if the property is from a non-updatable entity => Read only mode, previously calculated edit Mode is ignored
    // if the property is from an updatable entity => previously calculated edit Mode expression
    var editModeExpression = ifElse(enabledExpression, ifElse(editableExpression, resultExpression, ifElse(and(!isConstant(readOnlyExpression) && readOnlyExpression, isEditable), "ReadOnly", "Display")), ifElse(isEditable, "Disabled", "Display"));
    if (bAsObject) {
      return editModeExpression;
    }
    return compileExpression(editModeExpression);
  };
  _exports.getEditMode = getEditMode;
  var hasValidAnalyticalCurrencyOrUnit = function (oPropertyDataModelObjectPath) {
    var _oPropertyDefinition$, _oPropertyDefinition$2, _oPropertyDefinition$3, _oPropertyDefinition$4;
    var oPropertyDefinition = oPropertyDataModelObjectPath.targetObject;
    var currency = (_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Measures) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.ISOCurrency;
    var measure = currency ? currency : (_oPropertyDefinition$3 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$3 === void 0 ? void 0 : (_oPropertyDefinition$4 = _oPropertyDefinition$3.Measures) === null || _oPropertyDefinition$4 === void 0 ? void 0 : _oPropertyDefinition$4.Unit;
    if (measure) {
      return compileExpression(or(isTruthy(getExpressionFromAnnotation(measure)), not(UI.IsTotal)));
    } else {
      return compileExpression(constant(true));
    }
  };
  _exports.hasValidAnalyticalCurrencyOrUnit = hasValidAnalyticalCurrencyOrUnit;
  var ifUnitEditable = function (oPropertyPath, sEditableValue, sNonEditableValue) {
    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    var unitProperty = getAssociatedCurrencyProperty(oProperty) || getAssociatedUnitProperty(oProperty);
    if (!unitProperty) {
      return compileExpression(sNonEditableValue);
    }
    var isUnitReadOnly = isReadOnlyExpression(unitProperty);
    var editableExpression = and(or(!isConstant(isUnitReadOnly), not(isUnitReadOnly)), not(isComputed(unitProperty)));
    return compileExpression(ifElse(editableExpression, sEditableValue, sNonEditableValue));
  };
  _exports.ifUnitEditable = ifUnitEditable;
  var getFieldDisplay = function (oPropertyPath, sTargetDisplayMode, oComputedEditMode) {
    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    return hasValueHelp(oProperty) ? compileExpression(sTargetDisplayMode) : compileExpression(ifElse(equal(oComputedEditMode, "Editable"), "Value", sTargetDisplayMode));
  };
  _exports.getFieldDisplay = getFieldDisplay;
  var formatWithTypeInformation = function (oProperty, propertyBindingExpression) {
    var ignoreConstraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var outExpression = propertyBindingExpression;
    if (oProperty._type === "Property") {
      var oTargetMapping = EDM_TYPE_MAPPING[oProperty.type];
      if (oTargetMapping) {
        var _outExpression$type, _outExpression$type2, _outExpression$type3;
        outExpression.type = oTargetMapping.type;
        if (oTargetMapping.constraints && !ignoreConstraints) {
          var _oProperty$annotation, _oProperty$annotation2, _oProperty$annotation3, _oProperty$annotation4;
          outExpression.constraints = {};
          if (oTargetMapping.constraints.$Scale && oProperty.scale !== undefined) {
            outExpression.constraints.scale = oProperty.scale;
          }
          if (oTargetMapping.constraints.$Precision && oProperty.precision !== undefined) {
            outExpression.constraints.precision = oProperty.precision;
          }
          if (oTargetMapping.constraints.$MaxLength && oProperty.maxLength !== undefined) {
            outExpression.constraints.maxLength = oProperty.maxLength;
          }
          if (oProperty.nullable === false) {
            outExpression.constraints.nullable = oProperty.nullable;
          }
          if (oTargetMapping.constraints["@Org.OData.Validation.V1.Minimum/$Decimal"] && ((_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Validation) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Minimum) !== undefined && !isNaN(oProperty.annotations.Validation.Minimum)) {
            outExpression.constraints.minimum = "".concat(oProperty.annotations.Validation.Minimum);
          }
          if (oTargetMapping.constraints["@Org.OData.Validation.V1.Maximum/$Decimal"] && ((_oProperty$annotation3 = oProperty.annotations) === null || _oProperty$annotation3 === void 0 ? void 0 : (_oProperty$annotation4 = _oProperty$annotation3.Validation) === null || _oProperty$annotation4 === void 0 ? void 0 : _oProperty$annotation4.Maximum) !== undefined && !isNaN(oProperty.annotations.Validation.Maximum)) {
            outExpression.constraints.maximum = "".concat(oProperty.annotations.Validation.Maximum);
          }
        } else if (oProperty.nullable === false) {
          outExpression.constraints = {};
          outExpression.constraints.nullable = oProperty.nullable;
        }
        if ((outExpression === null || outExpression === void 0 ? void 0 : (_outExpression$type = outExpression.type) === null || _outExpression$type === void 0 ? void 0 : _outExpression$type.indexOf("sap.ui.model.odata.type.Int")) === 0) {
          if (!outExpression.formatOptions) {
            outExpression.formatOptions = {};
          }
          outExpression.formatOptions = Object.assign(outExpression.formatOptions, {
            parseAsString: false,
            emptyString: ""
          });
        }
        if (outExpression.type === "sap.ui.model.odata.type.String") {
          var _oTargetMapping$const, _oProperty$annotation5, _oProperty$annotation6;
          if (!outExpression.formatOptions) {
            outExpression.formatOptions = {};
          }
          outExpression.formatOptions.parseKeepsEmptyString = true;
          if ((_oTargetMapping$const = oTargetMapping.constraints) !== null && _oTargetMapping$const !== void 0 && _oTargetMapping$const["@com.sap.vocabularies.Common.v1.IsDigitSequence"] && (_oProperty$annotation5 = oProperty.annotations) !== null && _oProperty$annotation5 !== void 0 && (_oProperty$annotation6 = _oProperty$annotation5.Common) !== null && _oProperty$annotation6 !== void 0 && _oProperty$annotation6.IsDigitSequence) {
            outExpression.constraints.isDigitSequence = true;
          }
        }
        if ((outExpression === null || outExpression === void 0 ? void 0 : (_outExpression$type2 = outExpression.type) === null || _outExpression$type2 === void 0 ? void 0 : _outExpression$type2.indexOf("sap.ui.model.odata.type.Double")) === 0) {
          if (!outExpression.formatOptions) {
            outExpression.formatOptions = {};
          }
          outExpression.formatOptions = Object.assign(outExpression.formatOptions, {
            parseAsString: false,
            emptyString: ""
          });
        }
        if ((outExpression === null || outExpression === void 0 ? void 0 : (_outExpression$type3 = outExpression.type) === null || _outExpression$type3 === void 0 ? void 0 : _outExpression$type3.indexOf("sap.ui.model.odata.type.DateTimeOffset")) === 0) {
          outExpression.constraints.V4 = true;
        }
      }
    }
    return outExpression;
  };
  _exports.formatWithTypeInformation = formatWithTypeInformation;
  var getTypeConfig = function (oProperty, dataType) {
    var _propertyTypeConfig$t, _propertyTypeConfig$t2, _propertyTypeConfig$t3, _propertyTypeConfig$t4;
    var oTargetMapping = EDM_TYPE_MAPPING[oProperty === null || oProperty === void 0 ? void 0 : oProperty.type] || (dataType ? EDM_TYPE_MAPPING[dataType] : undefined);
    var propertyTypeConfig = {
      type: oTargetMapping.type,
      constraints: {},
      formatOptions: {}
    };
    if (isProperty(oProperty)) {
      var _oTargetMapping$const2, _oTargetMapping$const3, _oTargetMapping$const4, _oTargetMapping$const5, _oTargetMapping$const6, _oProperty$annotation7, _oProperty$annotation8, _oProperty$annotation9, _oProperty$annotation10, _oTargetMapping$const7, _oProperty$annotation11, _oProperty$annotation12, _oProperty$annotation13, _oProperty$annotation14, _oTargetMapping$const8, _oProperty$annotation15, _oProperty$annotation16, _oTargetMapping$const9;
      propertyTypeConfig.constraints = {
        scale: (_oTargetMapping$const2 = oTargetMapping.constraints) !== null && _oTargetMapping$const2 !== void 0 && _oTargetMapping$const2.$Scale ? oProperty.scale : undefined,
        precision: (_oTargetMapping$const3 = oTargetMapping.constraints) !== null && _oTargetMapping$const3 !== void 0 && _oTargetMapping$const3.$Precision ? oProperty.precision : undefined,
        maxLength: (_oTargetMapping$const4 = oTargetMapping.constraints) !== null && _oTargetMapping$const4 !== void 0 && _oTargetMapping$const4.$MaxLength ? oProperty.maxLength : undefined,
        nullable: (_oTargetMapping$const5 = oTargetMapping.constraints) !== null && _oTargetMapping$const5 !== void 0 && _oTargetMapping$const5.$Nullable ? oProperty.nullable : undefined,
        minimum: (_oTargetMapping$const6 = oTargetMapping.constraints) !== null && _oTargetMapping$const6 !== void 0 && _oTargetMapping$const6["@Org.OData.Validation.V1.Minimum/$Decimal"] && !isNaN((_oProperty$annotation7 = oProperty.annotations) === null || _oProperty$annotation7 === void 0 ? void 0 : (_oProperty$annotation8 = _oProperty$annotation7.Validation) === null || _oProperty$annotation8 === void 0 ? void 0 : _oProperty$annotation8.Minimum) ? "".concat((_oProperty$annotation9 = oProperty.annotations) === null || _oProperty$annotation9 === void 0 ? void 0 : (_oProperty$annotation10 = _oProperty$annotation9.Validation) === null || _oProperty$annotation10 === void 0 ? void 0 : _oProperty$annotation10.Minimum) : undefined,
        maximum: (_oTargetMapping$const7 = oTargetMapping.constraints) !== null && _oTargetMapping$const7 !== void 0 && _oTargetMapping$const7["@Org.OData.Validation.V1.Maximum/$Decimal"] && !isNaN((_oProperty$annotation11 = oProperty.annotations) === null || _oProperty$annotation11 === void 0 ? void 0 : (_oProperty$annotation12 = _oProperty$annotation11.Validation) === null || _oProperty$annotation12 === void 0 ? void 0 : _oProperty$annotation12.Maximum) ? "".concat((_oProperty$annotation13 = oProperty.annotations) === null || _oProperty$annotation13 === void 0 ? void 0 : (_oProperty$annotation14 = _oProperty$annotation13.Validation) === null || _oProperty$annotation14 === void 0 ? void 0 : _oProperty$annotation14.Maximum) : undefined,
        isDigitSequence: propertyTypeConfig.type === "sap.ui.model.odata.type.String" && (_oTargetMapping$const8 = oTargetMapping.constraints) !== null && _oTargetMapping$const8 !== void 0 && _oTargetMapping$const8["@com.sap.vocabularies.Common.v1.IsDigitSequence"] && (_oProperty$annotation15 = oProperty.annotations) !== null && _oProperty$annotation15 !== void 0 && (_oProperty$annotation16 = _oProperty$annotation15.Common) !== null && _oProperty$annotation16 !== void 0 && _oProperty$annotation16.IsDigitSequence ? true : undefined,
        V4: (_oTargetMapping$const9 = oTargetMapping.constraints) !== null && _oTargetMapping$const9 !== void 0 && _oTargetMapping$const9.$V4 ? true : undefined
      };
    }
    propertyTypeConfig.formatOptions = {
      parseAsString: (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t = propertyTypeConfig.type) === null || _propertyTypeConfig$t === void 0 ? void 0 : _propertyTypeConfig$t.indexOf("sap.ui.model.odata.type.Int")) === 0 || (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t2 = propertyTypeConfig.type) === null || _propertyTypeConfig$t2 === void 0 ? void 0 : _propertyTypeConfig$t2.indexOf("sap.ui.model.odata.type.Double")) === 0 ? false : undefined,
      emptyString: (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t3 = propertyTypeConfig.type) === null || _propertyTypeConfig$t3 === void 0 ? void 0 : _propertyTypeConfig$t3.indexOf("sap.ui.model.odata.type.Int")) === 0 || (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t4 = propertyTypeConfig.type) === null || _propertyTypeConfig$t4 === void 0 ? void 0 : _propertyTypeConfig$t4.indexOf("sap.ui.model.odata.type.Double")) === 0 ? "" : undefined,
      parseKeepsEmptyString: propertyTypeConfig.type === "sap.ui.model.odata.type.String" ? true : undefined
    };
    return propertyTypeConfig;
  };
  _exports.getTypeConfig = getTypeConfig;
  var getBindingWithUnitOrCurrency = function (oPropertyDataModelPath, propertyBindingExpression, ignoreUnitConstraint, formatOptions) {
    var _oPropertyDefinition$5, _oPropertyDefinition$6, _unit, _oPropertyDefinition$7, _oPropertyDefinition$8;
    var oPropertyDefinition = oPropertyDataModelPath.targetObject;
    var unit = (_oPropertyDefinition$5 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$5 === void 0 ? void 0 : (_oPropertyDefinition$6 = _oPropertyDefinition$5.Measures) === null || _oPropertyDefinition$6 === void 0 ? void 0 : _oPropertyDefinition$6.Unit;
    var relativeLocation = getRelativePaths(oPropertyDataModelPath);
    propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression);
    if (((_unit = unit) === null || _unit === void 0 ? void 0 : _unit.toString()) === "%") {
      if ((formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.showMeasure) === false) {
        return propertyBindingExpression;
      }
      return formatResult([propertyBindingExpression], valueFormatters.formatWithPercentage);
    }
    var complexType = unit ? "sap.ui.model.odata.type.Unit" : "sap.ui.model.odata.type.Currency";
    unit = unit ? unit : (_oPropertyDefinition$7 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$7 === void 0 ? void 0 : (_oPropertyDefinition$8 = _oPropertyDefinition$7.Measures) === null || _oPropertyDefinition$8 === void 0 ? void 0 : _oPropertyDefinition$8.ISOCurrency;
    var unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation), ignoreUnitConstraint) : getExpressionFromAnnotation(unit, relativeLocation);
    return addTypeInformation([propertyBindingExpression, unitBindingExpression], complexType, undefined, formatOptions);
  };
  _exports.getBindingWithUnitOrCurrency = getBindingWithUnitOrCurrency;
  var getBindingForUnitOrCurrency = function (oPropertyDataModelPath) {
    var _oPropertyDefinition$9, _oPropertyDefinition$10, _unit2, _oPropertyDefinition$11, _oPropertyDefinition$12;
    var oPropertyDefinition = oPropertyDataModelPath.targetObject;
    var unit = (_oPropertyDefinition$9 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$9 === void 0 ? void 0 : (_oPropertyDefinition$10 = _oPropertyDefinition$9.Measures) === null || _oPropertyDefinition$10 === void 0 ? void 0 : _oPropertyDefinition$10.Unit;
    if (((_unit2 = unit) === null || _unit2 === void 0 ? void 0 : _unit2.toString()) === "%") {
      return constant("%");
    }
    var relativeLocation = getRelativePaths(oPropertyDataModelPath);
    var complexType = unit ? "sap.ui.model.odata.type.Unit" : "sap.ui.model.odata.type.Currency";
    unit = unit ? unit : (_oPropertyDefinition$11 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$11 === void 0 ? void 0 : (_oPropertyDefinition$12 = _oPropertyDefinition$11.Measures) === null || _oPropertyDefinition$12 === void 0 ? void 0 : _oPropertyDefinition$12.ISOCurrency;
    var unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation)) : getExpressionFromAnnotation(unit, relativeLocation);
    var propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(oPropertyDataModelPath));
    propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression, true);
    return addTypeInformation([propertyBindingExpression, unitBindingExpression], complexType, undefined, {
      parseKeepsEmptyString: true,
      emptyString: "",
      showNumber: false
    });
  };
  _exports.getBindingForUnitOrCurrency = getBindingForUnitOrCurrency;
  var getBindingWithTimezone = function (oPropertyDataModelPath, propertyBindingExpression) {
    var _oPropertyDefinition$13, _oPropertyDefinition$14;
    var ignoreUnitConstraint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var hideTimezoneForEmptyValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var oPropertyDefinition = oPropertyDataModelPath.targetObject;
    var timezone = (_oPropertyDefinition$13 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$13 === void 0 ? void 0 : (_oPropertyDefinition$14 = _oPropertyDefinition$13.Common) === null || _oPropertyDefinition$14 === void 0 ? void 0 : _oPropertyDefinition$14.Timezone;
    var relativeLocation = getRelativePaths(oPropertyDataModelPath);
    propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression);
    var complexType = "sap.fe.core.type.DateTimeWithTimezone";
    var unitBindingExpression = timezone.$target ? formatWithTypeInformation(timezone.$target, getExpressionFromAnnotation(timezone, relativeLocation), ignoreUnitConstraint) : getExpressionFromAnnotation(timezone, relativeLocation);
    var formatOptions;
    if (hideTimezoneForEmptyValues) {
      formatOptions = {
        showTimezoneForEmptyValues: false
      };
    }
    return addTypeInformation([propertyBindingExpression, unitBindingExpression], complexType, undefined, formatOptions);
  };
  _exports.getBindingWithTimezone = getBindingWithTimezone;
  var getAlignmentExpression = function (oComputedEditMode) {
    var sAlignDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Begin";
    var sAlignEdit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Begin";
    return compileExpression(ifElse(equal(oComputedEditMode, "Display"), sAlignDisplay, sAlignEdit));
  };

  /**
   * Formatter helper to retrieve the converterContext from the metamodel context.
   *
   * @param oContext The original metamodel context
   * @param oInterface The current templating context
   * @returns The ConverterContext representing that object
   */
  _exports.getAlignmentExpression = getAlignmentExpression;
  var getConverterContext = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return convertMetaModelContext(oInterface.context);
    }
    return null;
  };
  getConverterContext.requiresIContext = true;

  /**
   * Formatter helper to retrieve the data model objects that are involved from the metamodel context.
   *
   * @param oContext The original ODataMetaModel context
   * @param oInterface The current templating context
   * @returns An array of entitysets and navproperties that are involved to get to a specific object in the metamodel
   */
  _exports.getConverterContext = getConverterContext;
  var getDataModelObjectPath = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return getInvolvedDataModelObjects(oInterface.context);
    }
    return null;
  };
  getDataModelObjectPath.requiresIContext = true;
  _exports.getDataModelObjectPath = getDataModelObjectPath;
  var isCollectionField = function (oDataModelPath) {
    var _oDataModelPath$navig;
    if ((_oDataModelPath$navig = oDataModelPath.navigationProperties) !== null && _oDataModelPath$navig !== void 0 && _oDataModelPath$navig.length) {
      var hasOneToManyNavigation = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : oDataModelPath.navigationProperties.findIndex(function (oNav) {
        if (oNav.isCollection) {
          var _oDataModelPath$conte, _oDataModelPath$conte2;
          if ((_oDataModelPath$conte = oDataModelPath.contextLocation) !== null && _oDataModelPath$conte !== void 0 && (_oDataModelPath$conte2 = _oDataModelPath$conte.navigationProperties) !== null && _oDataModelPath$conte2 !== void 0 && _oDataModelPath$conte2.length) {
            var _oDataModelPath$conte3;
            //we check the one to many nav is not already part of the context
            return ((_oDataModelPath$conte3 = oDataModelPath.contextLocation) === null || _oDataModelPath$conte3 === void 0 ? void 0 : _oDataModelPath$conte3.navigationProperties.findIndex(function (oContextNav) {
              return oContextNav.name === oNav.name;
            })) === -1;
          }
          return true;
        }
        return false;
      })) > -1;
      if (hasOneToManyNavigation) {
        return true;
      }
    }
    return false;
  };
  _exports.isCollectionField = isCollectionField;
  var getRequiredExpressionAsObject = function (oPropertyPath, oDataFieldConverted) {
    var forceEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return getRequiredExpression(oPropertyPath, oDataFieldConverted, forceEditMode, true);
  };
  _exports.getRequiredExpressionAsObject = getRequiredExpressionAsObject;
  var getRequiredExpression = function (oPropertyPath, oDataFieldConverted) {
    var forceEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var bAsObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var oRequiredProperties = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var dataModelObjectPath = arguments.length > 5 ? arguments[5] : undefined;
    var returnExpression;
    var aRequiredPropertiesFromInsertRestrictions = oRequiredProperties.requiredPropertiesFromInsertRestrictions || [];
    var aRequiredPropertiesFromUpdateRestrictions = oRequiredProperties.requiredPropertiesFromUpdateRestrictions || [];
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      returnExpression = constant(false);
    } else {
      var relativePath;
      if (dataModelObjectPath) {
        relativePath = getRelativePaths(dataModelObjectPath);
      }
      var dataFieldRequiredExpression = constant(true);
      if (oDataFieldConverted !== null) {
        dataFieldRequiredExpression = isRequiredExpression(oDataFieldConverted);
      }
      var requiredPropertyFromInsertRestrictionsExpression = constant(false);
      var requiredPropertyFromUpdateRestrictionsExpression = constant(false);
      var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
      // Enablement depends on the field control expression
      // If the Field control is statically in Inapplicable (disabled) -> not enabled
      var requiredExpression = isRequiredExpression(oProperty, relativePath);
      var editMode = forceEditMode || UI.IsEditable;
      if (aRequiredPropertiesFromInsertRestrictions.length && aRequiredPropertiesFromInsertRestrictions.includes(oPropertyPath.name)) {
        requiredPropertyFromInsertRestrictionsExpression = and(constant(true), UI.IsCreateMode);
      }
      if (aRequiredPropertiesFromUpdateRestrictions.length && aRequiredPropertiesFromUpdateRestrictions.includes(oPropertyPath.name)) {
        requiredPropertyFromUpdateRestrictionsExpression = and(constant(true), notEqual(UI.IsCreateMode, true));
      }
      returnExpression = or(and(or(requiredExpression, dataFieldRequiredExpression), editMode), requiredPropertyFromInsertRestrictionsExpression, requiredPropertyFromUpdateRestrictionsExpression);
    }
    if (bAsObject) {
      return returnExpression;
    }
    return compileExpression(returnExpression);
  };
  _exports.getRequiredExpression = getRequiredExpression;
  var getRequiredExpressionForConnectedDataField = function (dataFieldObjectPath) {
    var _dataFieldObjectPath$, _dataFieldObjectPath$2;
    var data = dataFieldObjectPath === null || dataFieldObjectPath === void 0 ? void 0 : (_dataFieldObjectPath$ = dataFieldObjectPath.targetObject) === null || _dataFieldObjectPath$ === void 0 ? void 0 : (_dataFieldObjectPath$2 = _dataFieldObjectPath$.$target) === null || _dataFieldObjectPath$2 === void 0 ? void 0 : _dataFieldObjectPath$2.Data;
    var keys = Object.keys(data);
    var dataFields = [];
    var propertyPath;
    var isRequiredExpressions = [];
    for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {
      var key = _keys[_i];
      if (data[key]["$Type"] && data[key]["$Type"].indexOf("DataField") > -1) {
        dataFields.push(data[key]);
      }
    }
    for (var _i2 = 0, _dataFields = dataFields; _i2 < _dataFields.length; _i2++) {
      var dataField = _dataFields[_i2];
      switch (dataField.$Type) {
        case "com.sap.vocabularies.UI.v1.DataField":
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
          if (typeof dataField.Value === "object") {
            propertyPath = dataField.Value.$target;
          }
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          if (dataField.Target.$target) {
            if (dataField.Target.$target.$Type === "com.sap.vocabularies.UI.v1.DataField" || dataField.Target.$target.$Type === "com.sap.vocabularies.UI.v1.DataPointType") {
              if (typeof dataField.Target.$target.Value === "object") {
                propertyPath = dataField.Target.$target.Value.$target;
              }
            } else {
              if (typeof dataField.Target === "object") {
                propertyPath = dataField.Target.$target;
              }
              break;
            }
          }
          break;
        // no default
      }

      isRequiredExpressions.push(getRequiredExpressionAsObject(propertyPath, dataField, false));
    }
    return compileExpression(or.apply(void 0, _toConsumableArray(isRequiredExpressions)));
  };
  _exports.getRequiredExpressionForConnectedDataField = getRequiredExpressionForConnectedDataField;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,