/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/helpers/IssueManager", "sap/fe/macros/CommonHelper", "../../ManifestSettings", "./Chart", "./Table"], function (IssueManager, CommonHelper, ManifestSettings, Chart, Table) {
  "use strict";

  var _exports = {};
  var createChartVisualization = Chart.createChartVisualization;
  var TemplateType = ManifestSettings.TemplateType;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  var getVisualizationsFromPresentationVariant = function (presentationVariantAnnotation, visualizationPath, converterContext) {
    var visualizationAnnotations = [];
    var bIsALP = converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;
    var baseVisualizationPath = visualizationPath.split("@")[0];
    if (!isPresentationCompliant(presentationVariantAnnotation, bIsALP)) {
      var entityType = converterContext.getEntityType();
      var defaultLineItemAnnotation = getDefaultLineItem(entityType);
      if (defaultLineItemAnnotation) {
        visualizationAnnotations.push({
          visualization: defaultLineItemAnnotation,
          annotationPath: "".concat(baseVisualizationPath).concat(converterContext.getRelativeAnnotationPath(defaultLineItemAnnotation.fullyQualifiedName, entityType)),
          converterContext: converterContext
        });
      }
    } else {
      var visualizations = presentationVariantAnnotation.Visualizations;
      var pushFirstVizOfType = function (allowedTerms) {
        var firstViz = visualizations.find(function (viz) {
          return allowedTerms.indexOf(viz.$target.term) >= 0;
        });
        if (firstViz) {
          visualizationAnnotations.push({
            visualization: firstViz.$target,
            annotationPath: "".concat(baseVisualizationPath).concat(firstViz.value),
            converterContext: converterContext
          });
        }
      };
      if (bIsALP) {
        // In case of ALP, we use the first LineItem and the first Chart
        pushFirstVizOfType(["com.sap.vocabularies.UI.v1.LineItem"]);
        pushFirstVizOfType(["com.sap.vocabularies.UI.v1.Chart"]);
      } else {
        // Otherwise, we use the first viz only (Chart or LineItem)
        pushFirstVizOfType(["com.sap.vocabularies.UI.v1.LineItem", "com.sap.vocabularies.UI.v1.Chart"]);
      }
    }
    return visualizationAnnotations;
  };
  _exports.getVisualizationsFromPresentationVariant = getVisualizationsFromPresentationVariant;
  function getSelectionPresentationVariant(entityType, annotationPath, converterContext) {
    if (annotationPath) {
      var resolvedTarget = converterContext.getEntityTypeAnnotation(annotationPath);
      var selectionPresentationVariant = resolvedTarget.annotation;
      if (selectionPresentationVariant) {
        if (selectionPresentationVariant.term === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
          return selectionPresentationVariant;
        }
      } else {
        throw new Error("Annotation Path for the SPV mentioned in the manifest is not found, Please add the SPV in the annotation");
      }
    } else {
      var _entityType$annotatio, _entityType$annotatio2;
      return (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.SelectionPresentationVariant;
    }
  }
  _exports.getSelectionPresentationVariant = getSelectionPresentationVariant;
  function isSelectionPresentationCompliant(SelectionPresentationVariant, bIsALP) {
    var presentationVariant = SelectionPresentationVariant && SelectionPresentationVariant.PresentationVariant;
    if (presentationVariant) {
      return isPresentationCompliant(presentationVariant, bIsALP);
    } else {
      throw new Error("Presentation Variant is not present in the SPV annotation");
    }
  }
  _exports.isSelectionPresentationCompliant = isSelectionPresentationCompliant;
  function isPresentationCompliant(presentationVariant) {
    var bIsALP = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var bHasTable = false,
      bHasChart = false;
    if (bIsALP) {
      if (presentationVariant !== null && presentationVariant !== void 0 && presentationVariant.Visualizations) {
        var aVisualizations = presentationVariant.Visualizations;
        aVisualizations.forEach(function (oVisualization) {
          if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem") {
            bHasTable = true;
          }
          if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.Chart") {
            bHasChart = true;
          }
        });
      }
      return bHasChart && bHasTable;
    } else {
      return (presentationVariant === null || presentationVariant === void 0 ? void 0 : presentationVariant.Visualizations) && !!presentationVariant.Visualizations.find(function (visualization) {
        return visualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem" || visualization.$target.term === "com.sap.vocabularies.UI.v1.Chart";
      });
    }
  }
  _exports.isPresentationCompliant = isPresentationCompliant;
  function getDefaultLineItem(entityType) {
    var _entityType$annotatio3;
    return (_entityType$annotatio3 = entityType.annotations.UI) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.LineItem;
  }
  _exports.getDefaultLineItem = getDefaultLineItem;
  function getDefaultChart(entityType) {
    var _entityType$annotatio4;
    return (_entityType$annotatio4 = entityType.annotations.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.Chart;
  }
  _exports.getDefaultChart = getDefaultChart;
  function getDefaultPresentationVariant(entityType) {
    var _entityType$annotatio5, _entityType$annotatio6;
    return (_entityType$annotatio5 = entityType.annotations) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.UI) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.PresentationVariant;
  }
  _exports.getDefaultPresentationVariant = getDefaultPresentationVariant;
  function getDefaultSelectionVariant(entityType) {
    var _entityType$annotatio7, _entityType$annotatio8;
    return (_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.UI) === null || _entityType$annotatio8 === void 0 ? void 0 : _entityType$annotatio8.SelectionVariant;
  }
  _exports.getDefaultSelectionVariant = getDefaultSelectionVariant;
  function getSelectionVariant(entityType, converterContext) {
    var annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();
    var selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);
    var selectionVariant;
    if (selectionPresentationVariant) {
      selectionVariant = selectionPresentationVariant.SelectionVariant;
      if (selectionVariant) {
        return selectionVariant;
      }
    } else {
      selectionVariant = getDefaultSelectionVariant(entityType);
      return selectionVariant;
    }
  }
  _exports.getSelectionVariant = getSelectionVariant;
  function getDataVisualizationConfiguration(visualizationPath, isCondensedTableLayoutCompliant, inConverterContext, viewConfiguration, doNotCheckApplySupported, associatedPresentationVariantPath) {
    var resolvedTarget = visualizationPath !== "" ? inConverterContext.getEntityTypeAnnotation(visualizationPath) : {
      annotation: undefined,
      converterContext: inConverterContext
    };
    var resolvedAssociatedPresentationVariant = associatedPresentationVariantPath ? inConverterContext.getEntityTypeAnnotation(associatedPresentationVariantPath) : null;
    var resolvedVisualization = resolvedTarget.annotation;
    inConverterContext = resolvedTarget.converterContext;
    var visualizationAnnotations = [];
    var presentationVariantAnnotation;
    var presentationPath = "";
    var chartVisualization, tableVisualization;
    var sTerm = resolvedVisualization === null || resolvedVisualization === void 0 ? void 0 : resolvedVisualization.term;
    if (sTerm) {
      switch (sTerm) {
        case "com.sap.vocabularies.UI.v1.LineItem":
        case "com.sap.vocabularies.UI.v1.Chart":
          presentationVariantAnnotation = resolvedAssociatedPresentationVariant === null || resolvedAssociatedPresentationVariant === void 0 ? void 0 : resolvedAssociatedPresentationVariant.annotation;
          visualizationAnnotations.push({
            visualization: resolvedVisualization,
            annotationPath: visualizationPath,
            converterContext: inConverterContext
          });
          break;
        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          presentationVariantAnnotation = resolvedVisualization;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(resolvedVisualization, visualizationPath, inConverterContext));
          break;
        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          presentationVariantAnnotation = resolvedVisualization.PresentationVariant;
          // Presentation can be inline or outside the SelectionPresentationVariant
          presentationPath = presentationVariantAnnotation.fullyQualifiedName;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(presentationVariantAnnotation, visualizationPath, inConverterContext));
          break;
        default:
          break;
      }
      visualizationAnnotations.forEach(function (visualizationAnnotation) {
        var visualization = visualizationAnnotation.visualization,
          annotationPath = visualizationAnnotation.annotationPath,
          converterContext = visualizationAnnotation.converterContext;
        switch (visualization.term) {
          case "com.sap.vocabularies.UI.v1.Chart":
            chartVisualization = createChartVisualization(visualization, annotationPath, converterContext, doNotCheckApplySupported);
            break;
          case "com.sap.vocabularies.UI.v1.LineItem":
          default:
            tableVisualization = Table.createTableVisualization(visualization, annotationPath, converterContext, presentationVariantAnnotation, isCondensedTableLayoutCompliant, viewConfiguration);
            break;
        }
      });
    } else {
      tableVisualization = Table.createDefaultTableVisualization(inConverterContext);
      inConverterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_LINEITEM);
    }
    var aVisualizations = [];
    var sPath = sTerm === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" ? presentationPath : resolvedVisualization && resolvedVisualization.fullyQualifiedName;
    if (sPath === undefined) {
      sPath = "/";
    }
    if (chartVisualization) {
      aVisualizations.push(chartVisualization);
    }
    if (tableVisualization) {
      aVisualizations.push(tableVisualization);
    }
    return {
      visualizations: aVisualizations,
      annotationPath: inConverterContext.getEntitySetBasedAnnotationPath(sPath)
    };
  }

  /**
   * Return UI Control (LineItem/Chart) Context.
   *
   * @function
   * @name getUiControl
   * @param oPresentationContext Presentation context object (Presentation variant or UI.LineItem/Chart)
   * @param sControlPath Control path
   * @returns The Control (LineItem/Chart) context
   */
  _exports.getDataVisualizationConfiguration = getDataVisualizationConfiguration;
  function getUiControl(oPresentationContext, sControlPath) {
    var oPresentation = oPresentationContext.getObject(oPresentationContext.getPath()),
      oPresentationVariantPath = CommonHelper.createPresentationPathContext(oPresentationContext),
      oModel = oPresentationContext.getModel();
    if (CommonHelper._isPresentationVariantAnnotation(oPresentationVariantPath.getPath())) {
      // Uncomplete PresentationVariant can be passed to macro via SelectionPresentationVariant
      var aVisualizations = oPresentation.Visualizations;
      if (Array.isArray(aVisualizations)) {
        for (var i = 0; i < aVisualizations.length; i++) {
          if (aVisualizations[i].$AnnotationPath.indexOf(sControlPath) !== -1) {
            sControlPath = aVisualizations[i].$AnnotationPath;
            break;
          }
        }
      }
      return oModel.getMetaContext(oPresentationContext.getPath().split("@")[0] + sControlPath);
    }
    return oPresentationContext;
  }
  _exports.getUiControl = getUiControl;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRWaXN1YWxpemF0aW9uc0Zyb21QcmVzZW50YXRpb25WYXJpYW50IiwicHJlc2VudGF0aW9uVmFyaWFudEFubm90YXRpb24iLCJ2aXN1YWxpemF0aW9uUGF0aCIsImNvbnZlcnRlckNvbnRleHQiLCJ2aXN1YWxpemF0aW9uQW5ub3RhdGlvbnMiLCJiSXNBTFAiLCJnZXRNYW5pZmVzdFdyYXBwZXIiLCJoYXNNdWx0aXBsZVZpc3VhbGl6YXRpb25zIiwiZ2V0VGVtcGxhdGVUeXBlIiwiVGVtcGxhdGVUeXBlIiwiQW5hbHl0aWNhbExpc3RQYWdlIiwiYmFzZVZpc3VhbGl6YXRpb25QYXRoIiwic3BsaXQiLCJpc1ByZXNlbnRhdGlvbkNvbXBsaWFudCIsImVudGl0eVR5cGUiLCJnZXRFbnRpdHlUeXBlIiwiZGVmYXVsdExpbmVJdGVtQW5ub3RhdGlvbiIsImdldERlZmF1bHRMaW5lSXRlbSIsInB1c2giLCJ2aXN1YWxpemF0aW9uIiwiYW5ub3RhdGlvblBhdGgiLCJnZXRSZWxhdGl2ZUFubm90YXRpb25QYXRoIiwiZnVsbHlRdWFsaWZpZWROYW1lIiwidmlzdWFsaXphdGlvbnMiLCJWaXN1YWxpemF0aW9ucyIsInB1c2hGaXJzdFZpek9mVHlwZSIsImFsbG93ZWRUZXJtcyIsImZpcnN0Vml6IiwiZmluZCIsInZpeiIsImluZGV4T2YiLCIkdGFyZ2V0IiwidGVybSIsInZhbHVlIiwiZ2V0U2VsZWN0aW9uUHJlc2VudGF0aW9uVmFyaWFudCIsInJlc29sdmVkVGFyZ2V0IiwiZ2V0RW50aXR5VHlwZUFubm90YXRpb24iLCJzZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50IiwiYW5ub3RhdGlvbiIsIkVycm9yIiwiYW5ub3RhdGlvbnMiLCJVSSIsIlNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQiLCJpc1NlbGVjdGlvblByZXNlbnRhdGlvbkNvbXBsaWFudCIsInByZXNlbnRhdGlvblZhcmlhbnQiLCJQcmVzZW50YXRpb25WYXJpYW50IiwiYkhhc1RhYmxlIiwiYkhhc0NoYXJ0IiwiYVZpc3VhbGl6YXRpb25zIiwiZm9yRWFjaCIsIm9WaXN1YWxpemF0aW9uIiwiTGluZUl0ZW0iLCJnZXREZWZhdWx0Q2hhcnQiLCJDaGFydCIsImdldERlZmF1bHRQcmVzZW50YXRpb25WYXJpYW50IiwiZ2V0RGVmYXVsdFNlbGVjdGlvblZhcmlhbnQiLCJTZWxlY3Rpb25WYXJpYW50IiwiZ2V0U2VsZWN0aW9uVmFyaWFudCIsImdldERlZmF1bHRUZW1wbGF0ZUFubm90YXRpb25QYXRoIiwic2VsZWN0aW9uVmFyaWFudCIsImdldERhdGFWaXN1YWxpemF0aW9uQ29uZmlndXJhdGlvbiIsImlzQ29uZGVuc2VkVGFibGVMYXlvdXRDb21wbGlhbnQiLCJpbkNvbnZlcnRlckNvbnRleHQiLCJ2aWV3Q29uZmlndXJhdGlvbiIsImRvTm90Q2hlY2tBcHBseVN1cHBvcnRlZCIsImFzc29jaWF0ZWRQcmVzZW50YXRpb25WYXJpYW50UGF0aCIsInVuZGVmaW5lZCIsInJlc29sdmVkQXNzb2NpYXRlZFByZXNlbnRhdGlvblZhcmlhbnQiLCJyZXNvbHZlZFZpc3VhbGl6YXRpb24iLCJwcmVzZW50YXRpb25QYXRoIiwiY2hhcnRWaXN1YWxpemF0aW9uIiwidGFibGVWaXN1YWxpemF0aW9uIiwic1Rlcm0iLCJjb25jYXQiLCJ2aXN1YWxpemF0aW9uQW5ub3RhdGlvbiIsImNyZWF0ZUNoYXJ0VmlzdWFsaXphdGlvbiIsIlRhYmxlIiwiY3JlYXRlVGFibGVWaXN1YWxpemF0aW9uIiwiY3JlYXRlRGVmYXVsdFRhYmxlVmlzdWFsaXphdGlvbiIsImdldERpYWdub3N0aWNzIiwiYWRkSXNzdWUiLCJJc3N1ZUNhdGVnb3J5IiwiQW5ub3RhdGlvbiIsIklzc3VlU2V2ZXJpdHkiLCJNZWRpdW0iLCJJc3N1ZVR5cGUiLCJNSVNTSU5HX0xJTkVJVEVNIiwic1BhdGgiLCJnZXRFbnRpdHlTZXRCYXNlZEFubm90YXRpb25QYXRoIiwiZ2V0VWlDb250cm9sIiwib1ByZXNlbnRhdGlvbkNvbnRleHQiLCJzQ29udHJvbFBhdGgiLCJvUHJlc2VudGF0aW9uIiwiZ2V0T2JqZWN0IiwiZ2V0UGF0aCIsIm9QcmVzZW50YXRpb25WYXJpYW50UGF0aCIsIkNvbW1vbkhlbHBlciIsImNyZWF0ZVByZXNlbnRhdGlvblBhdGhDb250ZXh0Iiwib01vZGVsIiwiZ2V0TW9kZWwiLCJfaXNQcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJsZW5ndGgiLCIkQW5ub3RhdGlvblBhdGgiLCJnZXRNZXRhQ29udGV4dCJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiRGF0YVZpc3VhbGl6YXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFbnRpdHlUeXBlIH0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzXCI7XG5pbXBvcnQgdHlwZSB7XG5cdENoYXJ0LFxuXHRMaW5lSXRlbSxcblx0UHJlc2VudGF0aW9uVmFyaWFudCxcblx0UHJlc2VudGF0aW9uVmFyaWFudFR5cGUsXG5cdFNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQsXG5cdFNlbGVjdGlvblZhcmlhbnRcbn0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzL3ZvY2FidWxhcmllcy9VSVwiO1xuaW1wb3J0IHsgVUlBbm5vdGF0aW9uVGVybXMgfSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXMvdm9jYWJ1bGFyaWVzL1VJXCI7XG5pbXBvcnQgeyBJc3N1ZUNhdGVnb3J5LCBJc3N1ZVNldmVyaXR5LCBJc3N1ZVR5cGUgfSBmcm9tIFwic2FwL2ZlL2NvcmUvY29udmVydGVycy9oZWxwZXJzL0lzc3VlTWFuYWdlclwiO1xuaW1wb3J0IENvbW1vbkhlbHBlciBmcm9tIFwic2FwL2ZlL21hY3Jvcy9Db21tb25IZWxwZXJcIjtcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSBcInNhcC91aS9tb2RlbC9Db250ZXh0XCI7XG5pbXBvcnQgdHlwZSBPRGF0YU1vZGVsIGZyb20gXCJzYXAvdWkvbW9kZWwvb2RhdGEvdjQvT0RhdGFNb2RlbFwiO1xuaW1wb3J0IHR5cGUgQ29udmVydGVyQ29udGV4dCBmcm9tIFwiLi4vLi4vQ29udmVydGVyQ29udGV4dFwiO1xuaW1wb3J0IHR5cGUgeyBWaWV3UGF0aENvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vLi4vTWFuaWZlc3RTZXR0aW5nc1wiO1xuaW1wb3J0IHsgVGVtcGxhdGVUeXBlIH0gZnJvbSBcIi4uLy4uL01hbmlmZXN0U2V0dGluZ3NcIjtcbmltcG9ydCB0eXBlIHsgQ2hhcnRWaXN1YWxpemF0aW9uIH0gZnJvbSBcIi4vQ2hhcnRcIjtcbmltcG9ydCB7IGNyZWF0ZUNoYXJ0VmlzdWFsaXphdGlvbiB9IGZyb20gXCIuL0NoYXJ0XCI7XG5pbXBvcnQgdHlwZSB7IFRhYmxlVmlzdWFsaXphdGlvbiB9IGZyb20gXCIuL1RhYmxlXCI7XG5pbXBvcnQgVGFibGUgZnJvbSBcIi4vVGFibGVcIjtcblxuZXhwb3J0IHR5cGUgRGF0YVZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucyA9IExpbmVJdGVtIHwgQ2hhcnQgfCBQcmVzZW50YXRpb25WYXJpYW50IHwgU2VsZWN0aW9uVmFyaWFudCB8IFNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQ7XG5cbmV4cG9ydCB0eXBlIEFjdHVhbFZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucyA9IExpbmVJdGVtIHwgQ2hhcnQ7XG5cbmV4cG9ydCB0eXBlIFZpc3VhbGl6YXRpb25BbmRQYXRoID0ge1xuXHR2aXN1YWxpemF0aW9uOiBBY3R1YWxWaXN1YWxpemF0aW9uQW5ub3RhdGlvbnM7XG5cdGFubm90YXRpb25QYXRoOiBzdHJpbmc7XG5cdHNlbGVjdGlvblZhcmlhbnRQYXRoPzogc3RyaW5nO1xuXHRjb252ZXJ0ZXJDb250ZXh0OiBDb252ZXJ0ZXJDb250ZXh0O1xufTtcblxuZXhwb3J0IHR5cGUgRGF0YVZpc3VhbGl6YXRpb25EZWZpbml0aW9uID0ge1xuXHR2aXN1YWxpemF0aW9uczogKFRhYmxlVmlzdWFsaXphdGlvbiB8IENoYXJ0VmlzdWFsaXphdGlvbilbXTtcblx0YW5ub3RhdGlvblBhdGg6IHN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWaXN1YWxpemF0aW9uc0Zyb21QcmVzZW50YXRpb25WYXJpYW50ID0gZnVuY3Rpb24gKFxuXHRwcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbjogUHJlc2VudGF0aW9uVmFyaWFudFR5cGUsXG5cdHZpc3VhbGl6YXRpb25QYXRoOiBzdHJpbmcsXG5cdGNvbnZlcnRlckNvbnRleHQ6IENvbnZlcnRlckNvbnRleHRcbik6IFZpc3VhbGl6YXRpb25BbmRQYXRoW10ge1xuXHRjb25zdCB2aXN1YWxpemF0aW9uQW5ub3RhdGlvbnM6IFZpc3VhbGl6YXRpb25BbmRQYXRoW10gPSBbXTtcblxuXHRjb25zdCBiSXNBTFAgPVxuXHRcdGNvbnZlcnRlckNvbnRleHQuZ2V0TWFuaWZlc3RXcmFwcGVyKCkuaGFzTXVsdGlwbGVWaXN1YWxpemF0aW9ucygpIHx8XG5cdFx0Y29udmVydGVyQ29udGV4dC5nZXRUZW1wbGF0ZVR5cGUoKSA9PT0gVGVtcGxhdGVUeXBlLkFuYWx5dGljYWxMaXN0UGFnZTtcblxuXHRjb25zdCBiYXNlVmlzdWFsaXphdGlvblBhdGggPSB2aXN1YWxpemF0aW9uUGF0aC5zcGxpdChcIkBcIilbMF07XG5cblx0aWYgKCFpc1ByZXNlbnRhdGlvbkNvbXBsaWFudChwcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbiwgYklzQUxQKSkge1xuXHRcdGNvbnN0IGVudGl0eVR5cGUgPSBjb252ZXJ0ZXJDb250ZXh0LmdldEVudGl0eVR5cGUoKTtcblx0XHRjb25zdCBkZWZhdWx0TGluZUl0ZW1Bbm5vdGF0aW9uID0gZ2V0RGVmYXVsdExpbmVJdGVtKGVudGl0eVR5cGUpO1xuXHRcdGlmIChkZWZhdWx0TGluZUl0ZW1Bbm5vdGF0aW9uKSB7XG5cdFx0XHR2aXN1YWxpemF0aW9uQW5ub3RhdGlvbnMucHVzaCh7XG5cdFx0XHRcdHZpc3VhbGl6YXRpb246IGRlZmF1bHRMaW5lSXRlbUFubm90YXRpb24sXG5cdFx0XHRcdGFubm90YXRpb25QYXRoOiBgJHtiYXNlVmlzdWFsaXphdGlvblBhdGh9JHtjb252ZXJ0ZXJDb250ZXh0LmdldFJlbGF0aXZlQW5ub3RhdGlvblBhdGgoXG5cdFx0XHRcdFx0ZGVmYXVsdExpbmVJdGVtQW5ub3RhdGlvbi5mdWxseVF1YWxpZmllZE5hbWUsXG5cdFx0XHRcdFx0ZW50aXR5VHlwZVxuXHRcdFx0XHQpfWAsXG5cdFx0XHRcdGNvbnZlcnRlckNvbnRleHQ6IGNvbnZlcnRlckNvbnRleHRcblx0XHRcdH0pO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRjb25zdCB2aXN1YWxpemF0aW9ucyA9IHByZXNlbnRhdGlvblZhcmlhbnRBbm5vdGF0aW9uLlZpc3VhbGl6YXRpb25zO1xuXG5cdFx0Y29uc3QgcHVzaEZpcnN0Vml6T2ZUeXBlID0gZnVuY3Rpb24gKGFsbG93ZWRUZXJtczogc3RyaW5nW10pIHtcblx0XHRcdGNvbnN0IGZpcnN0Vml6ID0gdmlzdWFsaXphdGlvbnMuZmluZCgodml6KSA9PiB7XG5cdFx0XHRcdHJldHVybiBhbGxvd2VkVGVybXMuaW5kZXhPZih2aXouJHRhcmdldC50ZXJtKSA+PSAwO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChmaXJzdFZpeikge1xuXHRcdFx0XHR2aXN1YWxpemF0aW9uQW5ub3RhdGlvbnMucHVzaCh7XG5cdFx0XHRcdFx0dmlzdWFsaXphdGlvbjogZmlyc3RWaXouJHRhcmdldCBhcyBBY3R1YWxWaXN1YWxpemF0aW9uQW5ub3RhdGlvbnMsXG5cdFx0XHRcdFx0YW5ub3RhdGlvblBhdGg6IGAke2Jhc2VWaXN1YWxpemF0aW9uUGF0aH0ke2ZpcnN0Vml6LnZhbHVlfWAsXG5cdFx0XHRcdFx0Y29udmVydGVyQ29udGV4dDogY29udmVydGVyQ29udGV4dFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKGJJc0FMUCkge1xuXHRcdFx0Ly8gSW4gY2FzZSBvZiBBTFAsIHdlIHVzZSB0aGUgZmlyc3QgTGluZUl0ZW0gYW5kIHRoZSBmaXJzdCBDaGFydFxuXHRcdFx0cHVzaEZpcnN0Vml6T2ZUeXBlKFtVSUFubm90YXRpb25UZXJtcy5MaW5lSXRlbV0pO1xuXHRcdFx0cHVzaEZpcnN0Vml6T2ZUeXBlKFtVSUFubm90YXRpb25UZXJtcy5DaGFydF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBPdGhlcndpc2UsIHdlIHVzZSB0aGUgZmlyc3Qgdml6IG9ubHkgKENoYXJ0IG9yIExpbmVJdGVtKVxuXHRcdFx0cHVzaEZpcnN0Vml6T2ZUeXBlKFtVSUFubm90YXRpb25UZXJtcy5MaW5lSXRlbSwgVUlBbm5vdGF0aW9uVGVybXMuQ2hhcnRdKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50KFxuXHRlbnRpdHlUeXBlOiBFbnRpdHlUeXBlLFxuXHRhbm5vdGF0aW9uUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuXHRjb252ZXJ0ZXJDb250ZXh0OiBDb252ZXJ0ZXJDb250ZXh0XG4pOiBhbnkge1xuXHRpZiAoYW5ub3RhdGlvblBhdGgpIHtcblx0XHRjb25zdCByZXNvbHZlZFRhcmdldCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0RW50aXR5VHlwZUFubm90YXRpb24oYW5ub3RhdGlvblBhdGgpO1xuXHRcdGNvbnN0IHNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQgPSByZXNvbHZlZFRhcmdldC5hbm5vdGF0aW9uIGFzIFNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQ7XG5cdFx0aWYgKHNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQpIHtcblx0XHRcdGlmIChzZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50LnRlcm0gPT09IFVJQW5ub3RhdGlvblRlcm1zLlNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQpIHtcblx0XHRcdFx0cmV0dXJuIHNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIkFubm90YXRpb24gUGF0aCBmb3IgdGhlIFNQViBtZW50aW9uZWQgaW4gdGhlIG1hbmlmZXN0IGlzIG5vdCBmb3VuZCwgUGxlYXNlIGFkZCB0aGUgU1BWIGluIHRoZSBhbm5vdGF0aW9uXCIpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZW50aXR5VHlwZS5hbm5vdGF0aW9ucz8uVUk/LlNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQ7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2VsZWN0aW9uUHJlc2VudGF0aW9uQ29tcGxpYW50KFxuXHRTZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50OiBTZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50LFxuXHRiSXNBTFA6IGJvb2xlYW5cbik6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuXHRjb25zdCBwcmVzZW50YXRpb25WYXJpYW50ID0gU2VsZWN0aW9uUHJlc2VudGF0aW9uVmFyaWFudCAmJiBTZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50LlByZXNlbnRhdGlvblZhcmlhbnQ7XG5cdGlmIChwcmVzZW50YXRpb25WYXJpYW50KSB7XG5cdFx0cmV0dXJuIGlzUHJlc2VudGF0aW9uQ29tcGxpYW50KHByZXNlbnRhdGlvblZhcmlhbnQsIGJJc0FMUCk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiUHJlc2VudGF0aW9uIFZhcmlhbnQgaXMgbm90IHByZXNlbnQgaW4gdGhlIFNQViBhbm5vdGF0aW9uXCIpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXNlbnRhdGlvbkNvbXBsaWFudChwcmVzZW50YXRpb25WYXJpYW50OiBQcmVzZW50YXRpb25WYXJpYW50VHlwZSwgYklzQUxQID0gZmFsc2UpOiBib29sZWFuIHtcblx0bGV0IGJIYXNUYWJsZSA9IGZhbHNlLFxuXHRcdGJIYXNDaGFydCA9IGZhbHNlO1xuXHRpZiAoYklzQUxQKSB7XG5cdFx0aWYgKHByZXNlbnRhdGlvblZhcmlhbnQ/LlZpc3VhbGl6YXRpb25zKSB7XG5cdFx0XHRjb25zdCBhVmlzdWFsaXphdGlvbnMgPSBwcmVzZW50YXRpb25WYXJpYW50LlZpc3VhbGl6YXRpb25zO1xuXHRcdFx0YVZpc3VhbGl6YXRpb25zLmZvckVhY2goKG9WaXN1YWxpemF0aW9uKSA9PiB7XG5cdFx0XHRcdGlmIChvVmlzdWFsaXphdGlvbi4kdGFyZ2V0LnRlcm0gPT09IFVJQW5ub3RhdGlvblRlcm1zLkxpbmVJdGVtKSB7XG5cdFx0XHRcdFx0Ykhhc1RhYmxlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob1Zpc3VhbGl6YXRpb24uJHRhcmdldC50ZXJtID09PSBVSUFubm90YXRpb25UZXJtcy5DaGFydCkge1xuXHRcdFx0XHRcdGJIYXNDaGFydCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gYkhhc0NoYXJ0ICYmIGJIYXNUYWJsZTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0cHJlc2VudGF0aW9uVmFyaWFudD8uVmlzdWFsaXphdGlvbnMgJiZcblx0XHRcdCEhcHJlc2VudGF0aW9uVmFyaWFudC5WaXN1YWxpemF0aW9ucy5maW5kKCh2aXN1YWxpemF0aW9uKSA9PiB7XG5cdFx0XHRcdHJldHVybiB2aXN1YWxpemF0aW9uLiR0YXJnZXQudGVybSA9PT0gVUlBbm5vdGF0aW9uVGVybXMuTGluZUl0ZW0gfHwgdmlzdWFsaXphdGlvbi4kdGFyZ2V0LnRlcm0gPT09IFVJQW5ub3RhdGlvblRlcm1zLkNoYXJ0O1xuXHRcdFx0fSlcblx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0TGluZUl0ZW0oZW50aXR5VHlwZTogRW50aXR5VHlwZSk6IExpbmVJdGVtIHwgdW5kZWZpbmVkIHtcblx0cmV0dXJuIGVudGl0eVR5cGUuYW5ub3RhdGlvbnMuVUk/LkxpbmVJdGVtO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRDaGFydChlbnRpdHlUeXBlOiBFbnRpdHlUeXBlKTogQ2hhcnQgfCB1bmRlZmluZWQge1xuXHRyZXR1cm4gZW50aXR5VHlwZS5hbm5vdGF0aW9ucy5VST8uQ2hhcnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFByZXNlbnRhdGlvblZhcmlhbnQoZW50aXR5VHlwZTogRW50aXR5VHlwZSk6IFByZXNlbnRhdGlvblZhcmlhbnQgfCB1bmRlZmluZWQge1xuXHRyZXR1cm4gZW50aXR5VHlwZS5hbm5vdGF0aW9ucz8uVUk/LlByZXNlbnRhdGlvblZhcmlhbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0U2VsZWN0aW9uVmFyaWFudChlbnRpdHlUeXBlOiBFbnRpdHlUeXBlKTogU2VsZWN0aW9uVmFyaWFudCB8IHVuZGVmaW5lZCB7XG5cdHJldHVybiBlbnRpdHlUeXBlLmFubm90YXRpb25zPy5VST8uU2VsZWN0aW9uVmFyaWFudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdGlvblZhcmlhbnQoZW50aXR5VHlwZTogRW50aXR5VHlwZSwgY29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dCk6IFNlbGVjdGlvblZhcmlhbnQgfCB1bmRlZmluZWQge1xuXHRjb25zdCBhbm5vdGF0aW9uUGF0aCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0TWFuaWZlc3RXcmFwcGVyKCkuZ2V0RGVmYXVsdFRlbXBsYXRlQW5ub3RhdGlvblBhdGgoKTtcblx0Y29uc3Qgc2VsZWN0aW9uUHJlc2VudGF0aW9uVmFyaWFudCA9IGdldFNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQoZW50aXR5VHlwZSwgYW5ub3RhdGlvblBhdGgsIGNvbnZlcnRlckNvbnRleHQpO1xuXHRsZXQgc2VsZWN0aW9uVmFyaWFudDtcblx0aWYgKHNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnQpIHtcblx0XHRzZWxlY3Rpb25WYXJpYW50ID0gc2VsZWN0aW9uUHJlc2VudGF0aW9uVmFyaWFudC5TZWxlY3Rpb25WYXJpYW50O1xuXHRcdGlmIChzZWxlY3Rpb25WYXJpYW50KSB7XG5cdFx0XHRyZXR1cm4gc2VsZWN0aW9uVmFyaWFudDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0c2VsZWN0aW9uVmFyaWFudCA9IGdldERlZmF1bHRTZWxlY3Rpb25WYXJpYW50KGVudGl0eVR5cGUpO1xuXHRcdHJldHVybiBzZWxlY3Rpb25WYXJpYW50O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhVmlzdWFsaXphdGlvbkNvbmZpZ3VyYXRpb24oXG5cdHZpc3VhbGl6YXRpb25QYXRoOiBzdHJpbmcsXG5cdGlzQ29uZGVuc2VkVGFibGVMYXlvdXRDb21wbGlhbnQ6IGJvb2xlYW4sXG5cdGluQ29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dCxcblx0dmlld0NvbmZpZ3VyYXRpb24/OiBWaWV3UGF0aENvbmZpZ3VyYXRpb24sXG5cdGRvTm90Q2hlY2tBcHBseVN1cHBvcnRlZD86IGJvb2xlYW4sXG5cdGFzc29jaWF0ZWRQcmVzZW50YXRpb25WYXJpYW50UGF0aD86IHN0cmluZ1xuKTogRGF0YVZpc3VhbGl6YXRpb25EZWZpbml0aW9uIHtcblx0Y29uc3QgcmVzb2x2ZWRUYXJnZXQgPVxuXHRcdHZpc3VhbGl6YXRpb25QYXRoICE9PSBcIlwiXG5cdFx0XHQ/IGluQ29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlUeXBlQW5ub3RhdGlvbih2aXN1YWxpemF0aW9uUGF0aClcblx0XHRcdDogeyBhbm5vdGF0aW9uOiB1bmRlZmluZWQsIGNvbnZlcnRlckNvbnRleHQ6IGluQ29udmVydGVyQ29udGV4dCB9O1xuXHRjb25zdCByZXNvbHZlZEFzc29jaWF0ZWRQcmVzZW50YXRpb25WYXJpYW50ID0gYXNzb2NpYXRlZFByZXNlbnRhdGlvblZhcmlhbnRQYXRoXG5cdFx0PyBpbkNvbnZlcnRlckNvbnRleHQuZ2V0RW50aXR5VHlwZUFubm90YXRpb24oYXNzb2NpYXRlZFByZXNlbnRhdGlvblZhcmlhbnRQYXRoKVxuXHRcdDogbnVsbDtcblx0Y29uc3QgcmVzb2x2ZWRWaXN1YWxpemF0aW9uID0gcmVzb2x2ZWRUYXJnZXQuYW5ub3RhdGlvbiBhcyBEYXRhVmlzdWFsaXphdGlvbkFubm90YXRpb25zO1xuXHRpbkNvbnZlcnRlckNvbnRleHQgPSByZXNvbHZlZFRhcmdldC5jb252ZXJ0ZXJDb250ZXh0O1xuXHRsZXQgdmlzdWFsaXphdGlvbkFubm90YXRpb25zOiBWaXN1YWxpemF0aW9uQW5kUGF0aFtdID0gW107XG5cdGxldCBwcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbjogUHJlc2VudGF0aW9uVmFyaWFudFR5cGU7XG5cdGxldCBwcmVzZW50YXRpb25QYXRoOiBzdHJpbmcgPSBcIlwiO1xuXHRsZXQgY2hhcnRWaXN1YWxpemF0aW9uLCB0YWJsZVZpc3VhbGl6YXRpb247XG5cdGNvbnN0IHNUZXJtID0gcmVzb2x2ZWRWaXN1YWxpemF0aW9uPy50ZXJtO1xuXHRpZiAoc1Rlcm0pIHtcblx0XHRzd2l0Y2ggKHNUZXJtKSB7XG5cdFx0XHRjYXNlIFVJQW5ub3RhdGlvblRlcm1zLkxpbmVJdGVtOlxuXHRcdFx0Y2FzZSBVSUFubm90YXRpb25UZXJtcy5DaGFydDpcblx0XHRcdFx0cHJlc2VudGF0aW9uVmFyaWFudEFubm90YXRpb24gPSByZXNvbHZlZEFzc29jaWF0ZWRQcmVzZW50YXRpb25WYXJpYW50Py5hbm5vdGF0aW9uO1xuXHRcdFx0XHR2aXN1YWxpemF0aW9uQW5ub3RhdGlvbnMucHVzaCh7XG5cdFx0XHRcdFx0dmlzdWFsaXphdGlvbjogcmVzb2x2ZWRWaXN1YWxpemF0aW9uIGFzIEFjdHVhbFZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucyxcblx0XHRcdFx0XHRhbm5vdGF0aW9uUGF0aDogdmlzdWFsaXphdGlvblBhdGgsXG5cdFx0XHRcdFx0Y29udmVydGVyQ29udGV4dDogaW5Db252ZXJ0ZXJDb250ZXh0XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgVUlBbm5vdGF0aW9uVGVybXMuUHJlc2VudGF0aW9uVmFyaWFudDpcblx0XHRcdFx0cHJlc2VudGF0aW9uVmFyaWFudEFubm90YXRpb24gPSByZXNvbHZlZFZpc3VhbGl6YXRpb247XG5cdFx0XHRcdHZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucyA9IHZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucy5jb25jYXQoXG5cdFx0XHRcdFx0Z2V0VmlzdWFsaXphdGlvbnNGcm9tUHJlc2VudGF0aW9uVmFyaWFudChyZXNvbHZlZFZpc3VhbGl6YXRpb24sIHZpc3VhbGl6YXRpb25QYXRoLCBpbkNvbnZlcnRlckNvbnRleHQpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBVSUFubm90YXRpb25UZXJtcy5TZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50OlxuXHRcdFx0XHRwcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbiA9IHJlc29sdmVkVmlzdWFsaXphdGlvbi5QcmVzZW50YXRpb25WYXJpYW50O1xuXHRcdFx0XHQvLyBQcmVzZW50YXRpb24gY2FuIGJlIGlubGluZSBvciBvdXRzaWRlIHRoZSBTZWxlY3Rpb25QcmVzZW50YXRpb25WYXJpYW50XG5cdFx0XHRcdHByZXNlbnRhdGlvblBhdGggPSBwcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbi5mdWxseVF1YWxpZmllZE5hbWU7XG5cdFx0XHRcdHZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucyA9IHZpc3VhbGl6YXRpb25Bbm5vdGF0aW9ucy5jb25jYXQoXG5cdFx0XHRcdFx0Z2V0VmlzdWFsaXphdGlvbnNGcm9tUHJlc2VudGF0aW9uVmFyaWFudChwcmVzZW50YXRpb25WYXJpYW50QW5ub3RhdGlvbiwgdmlzdWFsaXphdGlvblBhdGgsIGluQ29udmVydGVyQ29udGV4dClcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHR2aXN1YWxpemF0aW9uQW5ub3RhdGlvbnMuZm9yRWFjaCgodmlzdWFsaXphdGlvbkFubm90YXRpb24pID0+IHtcblx0XHRcdGNvbnN0IHsgdmlzdWFsaXphdGlvbiwgYW5ub3RhdGlvblBhdGgsIGNvbnZlcnRlckNvbnRleHQgfSA9IHZpc3VhbGl6YXRpb25Bbm5vdGF0aW9uO1xuXHRcdFx0c3dpdGNoICh2aXN1YWxpemF0aW9uLnRlcm0pIHtcblx0XHRcdFx0Y2FzZSBVSUFubm90YXRpb25UZXJtcy5DaGFydDpcblx0XHRcdFx0XHRjaGFydFZpc3VhbGl6YXRpb24gPSBjcmVhdGVDaGFydFZpc3VhbGl6YXRpb24oXG5cdFx0XHRcdFx0XHR2aXN1YWxpemF0aW9uLFxuXHRcdFx0XHRcdFx0YW5ub3RhdGlvblBhdGgsXG5cdFx0XHRcdFx0XHRjb252ZXJ0ZXJDb250ZXh0LFxuXHRcdFx0XHRcdFx0ZG9Ob3RDaGVja0FwcGx5U3VwcG9ydGVkXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBVSUFubm90YXRpb25UZXJtcy5MaW5lSXRlbTpcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0YWJsZVZpc3VhbGl6YXRpb24gPSBUYWJsZS5jcmVhdGVUYWJsZVZpc3VhbGl6YXRpb24oXG5cdFx0XHRcdFx0XHR2aXN1YWxpemF0aW9uLFxuXHRcdFx0XHRcdFx0YW5ub3RhdGlvblBhdGgsXG5cdFx0XHRcdFx0XHRjb252ZXJ0ZXJDb250ZXh0LFxuXHRcdFx0XHRcdFx0cHJlc2VudGF0aW9uVmFyaWFudEFubm90YXRpb24sXG5cdFx0XHRcdFx0XHRpc0NvbmRlbnNlZFRhYmxlTGF5b3V0Q29tcGxpYW50LFxuXHRcdFx0XHRcdFx0dmlld0NvbmZpZ3VyYXRpb25cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHRhYmxlVmlzdWFsaXphdGlvbiA9IFRhYmxlLmNyZWF0ZURlZmF1bHRUYWJsZVZpc3VhbGl6YXRpb24oaW5Db252ZXJ0ZXJDb250ZXh0KTtcblx0XHRpbkNvbnZlcnRlckNvbnRleHQuZ2V0RGlhZ25vc3RpY3MoKS5hZGRJc3N1ZShJc3N1ZUNhdGVnb3J5LkFubm90YXRpb24sIElzc3VlU2V2ZXJpdHkuTWVkaXVtLCBJc3N1ZVR5cGUuTUlTU0lOR19MSU5FSVRFTSk7XG5cdH1cblx0Y29uc3QgYVZpc3VhbGl6YXRpb25zOiBhbnkgPSBbXTtcblx0bGV0IHNQYXRoID1cblx0XHRzVGVybSA9PT0gVUlBbm5vdGF0aW9uVGVybXMuU2VsZWN0aW9uUHJlc2VudGF0aW9uVmFyaWFudFxuXHRcdFx0PyBwcmVzZW50YXRpb25QYXRoXG5cdFx0XHQ6IHJlc29sdmVkVmlzdWFsaXphdGlvbiAmJiByZXNvbHZlZFZpc3VhbGl6YXRpb24uZnVsbHlRdWFsaWZpZWROYW1lO1xuXHRpZiAoc1BhdGggPT09IHVuZGVmaW5lZCkge1xuXHRcdHNQYXRoID0gXCIvXCI7XG5cdH1cblx0aWYgKGNoYXJ0VmlzdWFsaXphdGlvbikge1xuXHRcdGFWaXN1YWxpemF0aW9ucy5wdXNoKGNoYXJ0VmlzdWFsaXphdGlvbik7XG5cdH1cblx0aWYgKHRhYmxlVmlzdWFsaXphdGlvbikge1xuXHRcdGFWaXN1YWxpemF0aW9ucy5wdXNoKHRhYmxlVmlzdWFsaXphdGlvbik7XG5cdH1cblx0cmV0dXJuIHtcblx0XHR2aXN1YWxpemF0aW9uczogYVZpc3VhbGl6YXRpb25zLFxuXHRcdGFubm90YXRpb25QYXRoOiBpbkNvbnZlcnRlckNvbnRleHQuZ2V0RW50aXR5U2V0QmFzZWRBbm5vdGF0aW9uUGF0aChzUGF0aClcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gVUkgQ29udHJvbCAoTGluZUl0ZW0vQ2hhcnQpIENvbnRleHQuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAbmFtZSBnZXRVaUNvbnRyb2xcbiAqIEBwYXJhbSBvUHJlc2VudGF0aW9uQ29udGV4dCBQcmVzZW50YXRpb24gY29udGV4dCBvYmplY3QgKFByZXNlbnRhdGlvbiB2YXJpYW50IG9yIFVJLkxpbmVJdGVtL0NoYXJ0KVxuICogQHBhcmFtIHNDb250cm9sUGF0aCBDb250cm9sIHBhdGhcbiAqIEByZXR1cm5zIFRoZSBDb250cm9sIChMaW5lSXRlbS9DaGFydCkgY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VWlDb250cm9sKG9QcmVzZW50YXRpb25Db250ZXh0OiBDb250ZXh0LCBzQ29udHJvbFBhdGg6IFN0cmluZykge1xuXHRjb25zdCBvUHJlc2VudGF0aW9uID0gb1ByZXNlbnRhdGlvbkNvbnRleHQuZ2V0T2JqZWN0KG9QcmVzZW50YXRpb25Db250ZXh0LmdldFBhdGgoKSkgYXMgYW55LFxuXHRcdG9QcmVzZW50YXRpb25WYXJpYW50UGF0aCA9IENvbW1vbkhlbHBlci5jcmVhdGVQcmVzZW50YXRpb25QYXRoQ29udGV4dChvUHJlc2VudGF0aW9uQ29udGV4dCksXG5cdFx0b01vZGVsID0gb1ByZXNlbnRhdGlvbkNvbnRleHQuZ2V0TW9kZWwoKSBhcyBPRGF0YU1vZGVsO1xuXHRpZiAoQ29tbW9uSGVscGVyLl9pc1ByZXNlbnRhdGlvblZhcmlhbnRBbm5vdGF0aW9uKG9QcmVzZW50YXRpb25WYXJpYW50UGF0aC5nZXRQYXRoKCkpKSB7XG5cdFx0Ly8gVW5jb21wbGV0ZSBQcmVzZW50YXRpb25WYXJpYW50IGNhbiBiZSBwYXNzZWQgdG8gbWFjcm8gdmlhIFNlbGVjdGlvblByZXNlbnRhdGlvblZhcmlhbnRcblx0XHRjb25zdCBhVmlzdWFsaXphdGlvbnMgPSBvUHJlc2VudGF0aW9uLlZpc3VhbGl6YXRpb25zO1xuXHRcdGlmIChBcnJheS5pc0FycmF5KGFWaXN1YWxpemF0aW9ucykpIHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYVZpc3VhbGl6YXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChhVmlzdWFsaXphdGlvbnNbaV0uJEFubm90YXRpb25QYXRoLmluZGV4T2Yoc0NvbnRyb2xQYXRoKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRzQ29udHJvbFBhdGggPSBhVmlzdWFsaXphdGlvbnNbaV0uJEFubm90YXRpb25QYXRoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAob01vZGVsIGFzIGFueSkuZ2V0TWV0YUNvbnRleHQob1ByZXNlbnRhdGlvbkNvbnRleHQuZ2V0UGF0aCgpLnNwbGl0KFwiQFwiKVswXSArIHNDb250cm9sUGF0aCk7XG5cdH1cblx0cmV0dXJuIG9QcmVzZW50YXRpb25Db250ZXh0O1xufVxuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7O0VBc0NPLElBQU1BLHdDQUF3QyxHQUFHLFVBQ3ZEQyw2QkFBc0QsRUFDdERDLGlCQUF5QixFQUN6QkMsZ0JBQWtDLEVBQ1Q7SUFDekIsSUFBTUMsd0JBQWdELEdBQUcsRUFBRTtJQUUzRCxJQUFNQyxNQUFNLEdBQ1hGLGdCQUFnQixDQUFDRyxrQkFBa0IsRUFBRSxDQUFDQyx5QkFBeUIsRUFBRSxJQUNqRUosZ0JBQWdCLENBQUNLLGVBQWUsRUFBRSxLQUFLQyxZQUFZLENBQUNDLGtCQUFrQjtJQUV2RSxJQUFNQyxxQkFBcUIsR0FBR1QsaUJBQWlCLENBQUNVLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0QsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQ1osNkJBQTZCLEVBQUVJLE1BQU0sQ0FBQyxFQUFFO01BQ3BFLElBQU1TLFVBQVUsR0FBR1gsZ0JBQWdCLENBQUNZLGFBQWEsRUFBRTtNQUNuRCxJQUFNQyx5QkFBeUIsR0FBR0Msa0JBQWtCLENBQUNILFVBQVUsQ0FBQztNQUNoRSxJQUFJRSx5QkFBeUIsRUFBRTtRQUM5Qlosd0JBQXdCLENBQUNjLElBQUksQ0FBQztVQUM3QkMsYUFBYSxFQUFFSCx5QkFBeUI7VUFDeENJLGNBQWMsWUFBS1QscUJBQXFCLFNBQUdSLGdCQUFnQixDQUFDa0IseUJBQXlCLENBQ3BG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