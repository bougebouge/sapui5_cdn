/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingToolkit", "sap/m/Text"], function (BindingToolkit, Text) {
  "use strict";

  var isConstant = BindingToolkit.isConstant;
  var compileExpression = BindingToolkit.compileExpression;
  var compileConstant = BindingToolkit.compileConstant;
  var addChildAggregation = function (aggregationChildren, aggregationName, child) {
    if (child === undefined || typeof child === "string") {
      return;
    }
    if (!aggregationChildren[aggregationName]) {
      aggregationChildren[aggregationName] = [];
    }
    if (isChildAnElement(child)) {
      aggregationChildren[aggregationName].push(child);
    } else if (Array.isArray(child)) {
      child.forEach(function (subChild) {
        addChildAggregation(aggregationChildren, aggregationName, subChild);
      });
    } else {
      Object.keys(child).forEach(function (childKey) {
        addChildAggregation(aggregationChildren, childKey, child[childKey]);
      });
    }
  };
  var isChildAnElement = function (children) {
    var _isA, _ref;
    return children === null || children === void 0 ? void 0 : (_isA = (_ref = children).isA) === null || _isA === void 0 ? void 0 : _isA.call(_ref, "sap.ui.core.Element");
  };
  var isAControl = function (children) {
    return !!(children !== null && children !== void 0 && children.getMetadata);
  };
  function processAggregations(metadata, mSettings) {
    var metadataAggregations = metadata.getAllAggregations();
    var defaultAggregationName = metadata.getDefaultAggregationName();
    var aggregationChildren = {};
    addChildAggregation(aggregationChildren, defaultAggregationName, mSettings.children);
    delete mSettings.children;
    // find out which aggregation are bound (both in children and directly under it)
    Object.keys(metadataAggregations).forEach(function (aggregationName) {
      if (aggregationChildren[aggregationName] !== undefined) {
        if (mSettings.hasOwnProperty(aggregationName)) {
          // always use the first item as template according to UI5 logic
          mSettings[aggregationName].template = aggregationChildren[aggregationName][0];
        } else {
          mSettings[aggregationName] = aggregationChildren[aggregationName];
        }
      }
    });
  }
  var jsxControl = function (ControlType, mSettings, key) {
    if (ControlType.isFragment) {
      return mSettings.children;
    }
    var targetControl;
    if (isAControl(ControlType)) {
      var metadata = ControlType.getMetadata();
      if (key !== undefined) {
        mSettings["key"] = key;
      }
      processAggregations(metadata, mSettings);
      var classDef = mSettings.class;
      var refDef = mSettings.ref;
      delete mSettings.ref;
      delete mSettings.class;
      var settingsKey;
      for (settingsKey in mSettings) {
        var _mSettings$settingsKe;
        if ((_mSettings$settingsKe = mSettings[settingsKey]) !== null && _mSettings$settingsKe !== void 0 && _mSettings$settingsKe._type) {
          var bindingToolkitExpression = mSettings[settingsKey];
          if (isConstant(bindingToolkitExpression)) {
            mSettings[settingsKey] = compileConstant(mSettings[settingsKey], false, true, true);
          } else {
            mSettings[settingsKey] = compileExpression(bindingToolkitExpression);
          }
        }
      }
      targetControl = new ControlType(mSettings);
      if (classDef) {
        targetControl.addStyleClass(classDef);
      }
      if (refDef) {
        refDef.setCurrent(targetControl);
      }
    } else if (typeof ControlType === "function") {
      var controlTypeFn = ControlType;
      targetControl = controlTypeFn(mSettings);
    } else {
      targetControl = new Text({
        text: "Missing component " + ControlType
      });
    }
    return targetControl;
  };
  return jsxControl;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,