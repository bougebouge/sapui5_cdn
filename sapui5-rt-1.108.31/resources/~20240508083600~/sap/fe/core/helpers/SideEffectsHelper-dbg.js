/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define([], function () {
  "use strict";

  var fnGetOwnerEntityForSourceEntity = function (oSourceEntity, sEntityType, oMetaModel) {
    var sNavigationPath = oSourceEntity["$NavigationPropertyPath"];
    var pOwnerEntity;
    // Source entities have an empty path, that is same as the target entity type of the side effect annotation
    // or it always involves get target entity for this navigation path
    if (sNavigationPath === "") {
      pOwnerEntity = Promise.resolve(sEntityType);
    } else {
      pOwnerEntity = oMetaModel.requestObject("/" + sEntityType + "/" + sNavigationPath + "/@sapui.name");
    }
    return {
      pOwnerEntity: pOwnerEntity,
      sNavigationPath: sNavigationPath
    };
  };
  var fnGetObjectToGenerateSideEffectMap = function (sEntityType, sSideEffectAnnotation, oSideEffectAnnotation, oMetaModel) {
    var sQualifier = sSideEffectAnnotation.indexOf("#") > -1 && sSideEffectAnnotation.substr(sSideEffectAnnotation.indexOf("#")) || "",
      aSourceProperties = oSideEffectAnnotation.SourceProperties || [],
      aSourceEntities = oSideEffectAnnotation.SourceEntities || [],
      // for each source property or source entity, there could be a oMetaModel.requestObject(...) to get the target entity type of the navigation involved
      resultArray = [];
    aSourceProperties.forEach(function (oSourceProperty) {
      var _fnGetPathForSourcePr = fnGetPathForSourceProperty(oSourceProperty["$PropertyPath"], sEntityType, oMetaModel),
        sPath = _fnGetPathForSourcePr.sPath,
        pOwnerEntity = _fnGetPathForSourcePr.pOwnerEntity,
        sNavigationPath = _fnGetPathForSourcePr.sNavigationPath;
      resultArray.push({
        pOwnerEntity: pOwnerEntity,
        sQualifier: sQualifier,
        sNavigationPath: sNavigationPath,
        sPath: sPath,
        sEntityType: sEntityType,
        oSideEffectAnnotation: oSideEffectAnnotation
      });
    });
    aSourceEntities.forEach(function (oSourceEntity) {
      var _fnGetOwnerEntityForS = fnGetOwnerEntityForSourceEntity(oSourceEntity, sEntityType, oMetaModel),
        pOwnerEntity = _fnGetOwnerEntityForS.pOwnerEntity,
        sNavigationPath = _fnGetOwnerEntityForS.sNavigationPath;
      resultArray.push({
        pOwnerEntity: pOwnerEntity,
        sQualifier: sQualifier,
        sNavigationPath: sNavigationPath,
        sPath: "entity",
        sEntityType: sEntityType,
        oSideEffectAnnotation: oSideEffectAnnotation
      });
    });
    return resultArray;
  };
  var fnGetPathForSourceProperty = function (sPath, sEntityType, oMetaModel) {
    // if the property path has a navigation, get the target entity type of the navigation
    var sNavigationPath = sPath.indexOf("/") > 0 ? "/" + sEntityType + "/" + sPath.substr(0, sPath.lastIndexOf("/") + 1) + "@sapui.name" : false,
      pOwnerEntity = !sNavigationPath ? Promise.resolve(sEntityType) : oMetaModel.requestObject(sNavigationPath);
    sPath = sNavigationPath ? sPath.substr(sPath.lastIndexOf("/") + 1) : sPath;
    return {
      sPath: sPath,
      pOwnerEntity: pOwnerEntity,
      sNavigationPath: sNavigationPath
    };
  };
  var SideEffectsHelper = {
    generateSideEffectsMapFromMetaModel: function (oMetaModel) {
      var oSideEffects = {};
      var allEntityTypes = [];
      var allSideEffectsDataArray = [];
      return oMetaModel.requestObject("/$").then(function (oEverything) {
        var fnFilterEntityTypes = function (sKey) {
          return oEverything[sKey]["$kind"] === "EntityType";
        };
        // get everything --> filter the entity types which have side effects annotated
        return Object.keys(oEverything).filter(fnFilterEntityTypes);
      }).then(function (mapEntityTypes) {
        allEntityTypes = mapEntityTypes;
        return Promise.allSettled(mapEntityTypes.map(function (sEntityType) {
          return oMetaModel.requestObject("/" + sEntityType + "@");
        }));
      }).then(function (entityTypesAnnotations) {
        var allSideEffectsPromises = [];
        // loop through all entity types and filter entities having side effect annotations
        // then generate map object for all side effects found
        // also generate the promises array out of the side effect object
        entityTypesAnnotations.forEach(function (entityTypeData, index) {
          if (entityTypeData.status === "fulfilled") {
            var sEntityType = allEntityTypes[index];
            var oAnnotations = entityTypeData.value;
            Object.keys(oAnnotations).filter(function (sAnnotation) {
              return sAnnotation.indexOf("@com.sap.vocabularies.Common.v1.SideEffects") > -1;
            }).forEach(function (sSideEffectAnnotation) {
              var sideEffectsMap = fnGetObjectToGenerateSideEffectMap(sEntityType, sSideEffectAnnotation, oAnnotations[sSideEffectAnnotation], oMetaModel);
              allSideEffectsDataArray = allSideEffectsDataArray.concat(sideEffectsMap);
              allSideEffectsPromises = allSideEffectsPromises.concat(sideEffectsMap.map(function (i) {
                return i["pOwnerEntity"];
              }));
            });
          }
        });
        return Promise.allSettled(allSideEffectsPromises);
      }).then(function (allSideEffectPromisesResult) {
        // when all the side effects promises have been settled(from source properties and ewntites), we generate side effects object based on side effect data objects values, like entity, sourceproperties

        allSideEffectPromisesResult.forEach(function (result, index) {
          if (result.status === "fulfilled") {
            var sOwnerEntityType = result.value;
            var sideeffectDataMap = allSideEffectsDataArray[index];
            var sEntityType = sideeffectDataMap.sEntityType,
              sQualifier = sideeffectDataMap.sQualifier,
              oSideEffectAnnotation = sideeffectDataMap.oSideEffectAnnotation,
              sPath = sideeffectDataMap.sPath;
            var aSourceProperties = oSideEffectAnnotation.SourceProperties;
            if (sPath === "entity") {
              // data coming from source entities
              oSideEffects[sOwnerEntityType] = oSideEffects[sOwnerEntityType] || [[], {}];
              // side effects for fields referenced via source entities must always be requested immediately
              oSideEffects[sOwnerEntityType][0].push(sEntityType + sQualifier + "$$ImmediateRequest"); // --> mappingSourceEntities
            } else {
              oSideEffects[sOwnerEntityType] = oSideEffects[sOwnerEntityType] || [[], {}];
              oSideEffects[sOwnerEntityType][1][sPath] = oSideEffects[sOwnerEntityType][1][sPath] || [];
              // if there is only one source property, side effect request is required immediately
              oSideEffects[sOwnerEntityType][1][sPath].push(sEntityType + sQualifier + (aSourceProperties.length === 1 && "$$ImmediateRequest" || "")); // --> mappingSourceProperties
            }
          }
        });

        return oSideEffects;
      }).catch(function (e) {
        return Promise.reject(e);
      });
    }
  };
  return SideEffectsHelper;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,