/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/ui/mdc/condition/FilterOperatorUtil", "sap/ui/mdc/condition/Operator", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/ValidateException"], function (FilterOperatorUtil, Operator, Filter, ModelOperator, ValidateException) {
  "use strict";

  var aSupportedOperations = ["DATE", "FROM", "TO", "DATERANGE"];
  var DYNAMIC_DATE_CATEGORY = "DYNAMIC.DATE";
  var FIXED_DATE_CATEGORY = "FIXED.DATE";
  var DYNAMIC_DATE_INT_CATEGORY = "DYNAMIC.DATE.INT";
  var DYNAMIC_DATERANGE_CATEGORY = "DYNAMIC.DATERANGE";
  var DYNAMIC_MONTH_CATEGORY = "DYNAMIC.MONTH";
  var FIXED_WEEK_CATEGORY = "FIXED.WEEK";
  var FIXED_MONTH_CATEGORY = "FIXED.MONTH";
  var FIXED_QUARTER_CATEGORY = "FIXED.QUARTER";
  var FIXED_YEAR_CATEGORY = "FIXED.YEAR";
  var DYNAMIC_WEEK_INT_CATEGORY = "DYNAMIC.WEEK.INT";
  var DYNAMIC_MONTH_INT_CATEGORY = "DYNAMIC.MONTH.INT";
  var DYNAMIC_QUARTER_INT_CATEGORY = "DYNAMIC.QUARTER.INT";
  var DYNAMIC_YEAR_INT_CATEGORY = "DYNAMIC.YEAR.INT";
  var mSemanticDateOperations = {
    "DATE": {
      "key": "DATE",
      "category": DYNAMIC_DATE_CATEGORY
    },
    "FROM": {
      "key": "FROM",
      "category": DYNAMIC_DATE_CATEGORY
    },
    "TO": {
      "key": "TO",
      "category": DYNAMIC_DATE_CATEGORY
    },
    "DATERANGE": {
      "key": "DATERANGE",
      "category": DYNAMIC_DATERANGE_CATEGORY
    },
    "SPECIFICMONTH": {
      "key": "SPECIFICMONTH",
      "category": DYNAMIC_MONTH_CATEGORY
    },
    "TODAY": {
      "key": "TODAY",
      "category": FIXED_DATE_CATEGORY
    },
    "TODAYFROMTO": {
      "key": "TODAYFROMTO",
      "category": DYNAMIC_DATE_INT_CATEGORY
    },
    "YESTERDAY": {
      "key": "YESTERDAY",
      "category": FIXED_DATE_CATEGORY
    },
    "TOMORROW": {
      "key": "TOMORROW",
      "category": FIXED_DATE_CATEGORY
    },
    "LASTDAYS": {
      "key": "LASTDAYS",
      "category": DYNAMIC_DATE_INT_CATEGORY
    },
    "NEXTDAYS": {
      "key": "NEXTDAYS",
      "category": DYNAMIC_DATE_INT_CATEGORY
    },
    "THISWEEK": {
      "key": "THISWEEK",
      "category": FIXED_WEEK_CATEGORY
    },
    "LASTWEEK": {
      "key": "LASTWEEK",
      "category": FIXED_WEEK_CATEGORY
    },
    "LASTWEEKS": {
      "key": "LASTWEEKS",
      "category": DYNAMIC_WEEK_INT_CATEGORY
    },
    "NEXTWEEK": {
      "key": "NEXTWEEK",
      "category": FIXED_WEEK_CATEGORY
    },
    "NEXTWEEKS": {
      "key": "NEXTWEEKS",
      "category": DYNAMIC_WEEK_INT_CATEGORY
    },
    "THISMONTH": {
      "key": "THISMONTH",
      "category": FIXED_MONTH_CATEGORY
    },
    "LASTMONTH": {
      "key": "LASTMONTH",
      "category": FIXED_MONTH_CATEGORY
    },
    "LASTMONTHS": {
      "key": "LASTMONTHS",
      "category": DYNAMIC_MONTH_INT_CATEGORY
    },
    "NEXTMONTH": {
      "key": "NEXTMONTH",
      "category": FIXED_MONTH_CATEGORY
    },
    "NEXTMONTHS": {
      "key": "NEXTMONTHS",
      "category": DYNAMIC_MONTH_INT_CATEGORY
    },
    "THISQUARTER": {
      "key": "THISQUARTER",
      "category": FIXED_QUARTER_CATEGORY
    },
    "LASTQUARTER": {
      "key": "LASTQUARTER",
      "category": FIXED_QUARTER_CATEGORY
    },
    "LASTQUARTERS": {
      "key": "LASTQUARTERS",
      "category": DYNAMIC_QUARTER_INT_CATEGORY
    },
    "NEXTQUARTER": {
      "key": "NEXTQUARTER",
      "category": FIXED_QUARTER_CATEGORY
    },
    "NEXTQUARTERS": {
      "key": "NEXTQUARTERS",
      "category": DYNAMIC_QUARTER_INT_CATEGORY
    },
    "QUARTER1": {
      "key": "QUARTER1",
      "category": FIXED_QUARTER_CATEGORY
    },
    "QUARTER2": {
      "key": "QUARTER2",
      "category": FIXED_QUARTER_CATEGORY
    },
    "QUARTER3": {
      "key": "QUARTER3",
      "category": FIXED_QUARTER_CATEGORY
    },
    "QUARTER4": {
      "key": "QUARTER4",
      "category": FIXED_QUARTER_CATEGORY
    },
    "THISYEAR": {
      "key": "THISYEAR",
      "category": FIXED_YEAR_CATEGORY
    },
    "LASTYEAR": {
      "key": "LASTYEAR",
      "category": FIXED_YEAR_CATEGORY
    },
    "LASTYEARS": {
      "key": "LASTYEARS",
      "category": DYNAMIC_YEAR_INT_CATEGORY
    },
    "NEXTYEAR": {
      "key": "NEXTYEAR",
      "category": FIXED_YEAR_CATEGORY
    },
    "NEXTYEARS": {
      "key": "NEXTYEARS",
      "category": DYNAMIC_YEAR_INT_CATEGORY
    },
    "YEARTODATE": {
      "key": "YEARTODATE",
      "category": FIXED_YEAR_CATEGORY
    },
    "DATETOYEAR": {
      "key": "DATETOYEAR",
      "category": FIXED_YEAR_CATEGORY
    }
  };
  function _getDateRangeOperator() {
    return new Operator({
      name: "DATERANGE",
      filterOperator: ModelOperator.BT,
      alias: {
        Date: "DATERANGE",
        DateTime: "DATERANGE"
      },
      valueTypes: [Operator.ValueType.Self, Operator.ValueType.Self],
      validate: function (aValues, oType) {
        if (aValues.length < 2) {
          throw new ValidateException("Date Range must have two values");
        } else {
          var fromDate = new Date(aValues[0]);
          var toDate = new Date(aValues[1]);
          if (fromDate.getTime() > toDate.getTime()) {
            throw new ValidateException("From Date Should Be Less Than To Date");
          }
        }
        Operator.prototype.validate.apply(this, [aValues, oType]);
      }
    });
  }
  function _getDateOperator() {
    return new Operator({
      name: "DATE",
      alias: {
        Date: "DATE",
        DateTime: "DATE"
      },
      filterOperator: ModelOperator.EQ,
      valueTypes: [Operator.ValueType.Self],
      getModelFilter: function (oCondition, sFieldPath, oType) {
        return SemanticDateOperators.getModelFilterForDate(oCondition, sFieldPath, oType);
      }
    });
  }
  function _getFromOperator() {
    return new Operator({
      name: "FROM",
      alias: {
        Date: "FROM",
        DateTime: "FROM"
      },
      filterOperator: ModelOperator.GE,
      valueTypes: [Operator.ValueType.Self]
    });
  }
  function _getToOperator() {
    return new Operator({
      name: "TO",
      alias: {
        Date: "TO",
        DateTime: "TO"
      },
      filterOperator: ModelOperator.LE,
      valueTypes: [Operator.ValueType.Self],
      getModelFilter: function (oCondition, sFieldPath, oType) {
        return SemanticDateOperators.getModelFilterForTo(oCondition, sFieldPath, oType);
      }
    });
  }
  function _filterOperation(oOperation, aOperatorConfiguration) {
    if (!aOperatorConfiguration) {
      return true;
    }
    aOperatorConfiguration = Array.isArray(aOperatorConfiguration) ? aOperatorConfiguration : [aOperatorConfiguration];
    var bResult;
    aOperatorConfiguration.some(function (oOperatorConfiguration) {
      var j;
      if (!oOperatorConfiguration.path) {
        return false;
      }
      var sValue = oOperation[oOperatorConfiguration.path];
      var bExclude = oOperatorConfiguration.exclude || false;
      var aOperatorValues;
      if (oOperatorConfiguration.contains && sValue) {
        aOperatorValues = oOperatorConfiguration.contains.split(",");
        bResult = bExclude;
        for (j = 0; j < aOperatorValues.length; j++) {
          if (bExclude && sValue.indexOf(aOperatorValues[j]) > -1) {
            bResult = false;
            return true;
          } else if (!bExclude && sValue.indexOf(aOperatorValues[j]) > -1) {
            bResult = true;
            return true;
          }
        }
      }
      if (oOperatorConfiguration.equals && sValue) {
        aOperatorValues = oOperatorConfiguration.equals.split(",");
        bResult = bExclude;
        for (j = 0; j < aOperatorValues.length; j++) {
          if (bExclude && sValue === aOperatorValues[j]) {
            bResult = false;
            return true;
          } else if (!bExclude && sValue === aOperatorValues[j]) {
            bResult = true;
            return true;
          }
        }
      }
      return false;
    });
    return bResult;
  }
  var SemanticDateOperators = {
    // Extending operators for Sematic Date Control
    addSemanticDateOperators: function () {
      FilterOperatorUtil.addOperator(_getDateRangeOperator());
      FilterOperatorUtil.addOperator(_getDateOperator());
      FilterOperatorUtil.addOperator(_getFromOperator());
      FilterOperatorUtil.addOperator(_getToOperator());
    },
    getSupportedOperations: function () {
      return aSupportedOperations;
    },
    getSemanticDateOperations: function () {
      return Object.keys(mSemanticDateOperations);
    },
    // TODO: Would need to check with MDC for removeOperator method
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    removeSemanticDateOperators: function () {},
    // To filter operators based on manifest aOperatorConfiguration settings
    getFilterOperations: function (aOperatorConfiguration) {
      var aOperations = [];
      for (var n in mSemanticDateOperations) {
        var oOperation = mSemanticDateOperations[n];
        if (_filterOperation(oOperation, aOperatorConfiguration)) {
          aOperations.push(oOperation);
        }
      }
      return aOperations.map(function (oOperation) {
        return oOperation.key;
      });
    },
    hasSemanticDateOperations: function (oConditions) {
      var aSemanticDateOps = this.getSemanticDateOperations();
      for (var n in oConditions) {
        var aFilterCondtion = oConditions[n];
        var oSemanticOperator = aFilterCondtion.find(function (oCondition) {
          return aSemanticDateOps.indexOf(oCondition.operator) > -1;
        });
        if (oSemanticOperator) {
          return false;
        }
      }
      return true;
    },
    getModelFilterForDate: function (oCondition, sFieldPath, oType) {
      if (oType.isA("sap.ui.model.odata.type.DateTimeOffset")) {
        var sFrom = oCondition.values[0];
        var oModelFormat = oType.getModelFormat(); // use ModelFormat to convert in JS-Date and add 23:59:59
        var oDate = oModelFormat.parse(sFrom);
        oDate.setHours(23);
        oDate.setMinutes(59);
        oDate.setSeconds(59);
        oDate.setMilliseconds(999);
        var sTo = oModelFormat.format(oDate);
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.BT,
          value1: sFrom,
          value2: sTo
        });
      } else {
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.EQ,
          value1: oCondition.values[0]
        });
      }
    },
    getModelFilterForTo: function (oCondition, sFieldPath, oType) {
      if (oType.isA("sap.ui.model.odata.type.DateTimeOffset")) {
        var value = oCondition.values[0];
        var oModelFormat = oType.getModelFormat(); // use ModelFormat to convert in JS-Date and add 23:59:59
        var oDate = oModelFormat.parse(value);
        oDate.setHours(23);
        oDate.setMinutes(59);
        oDate.setSeconds(59);
        oDate.setMilliseconds(999);
        var sTo = oModelFormat.format(oDate);
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.LE,
          value1: sTo
        });
      } else {
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.LE,
          value1: oCondition.values[0]
        });
      }
    }
  };
  return SemanticDateOperators;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,